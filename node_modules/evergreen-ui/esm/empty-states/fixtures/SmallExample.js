import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import { Button } from '../../buttons';
import { LockIcon } from '../../icons';
import { Pane } from '../../layers';
import { Popover } from '../../popover';
import { majorScale } from '../../scales';
import { useTheme } from '../../theme';
import EmptyState from '../src/EmptyState';

var SmallExample = function SmallExample(props) {
  var _useTheme = useTheme(),
      colors = _useTheme.colors;

  return /*#__PURE__*/React.createElement(Pane, {
    marginBottom: majorScale(20)
  }, /*#__PURE__*/React.createElement(Popover, _extends({}, props.popoverProps, {
    content: /*#__PURE__*/React.createElement(Pane, {
      width: 450,
      height: "auto"
    }, /*#__PURE__*/React.createElement(EmptyState, {
      background: "light",
      title: "You need permission to access these sources",
      orientation: "vertical",
      icon: /*#__PURE__*/React.createElement(LockIcon, {
        color: colors.blue300
      }),
      iconBgColor: colors.blue100,
      description: "If you believe you should have accesss to this page, please check with your Workspace Owner or request access below.",
      primaryCta: /*#__PURE__*/React.createElement(EmptyState.PrimaryButton, {
        appearance: "primary"
      }, "Request Access")
    }))
  }), /*#__PURE__*/React.createElement(Button, null, "Trigger Popover")));
};

SmallExample.displayName = "SmallExample";
SmallExample.propTypes = {
  popoverProps: PropTypes.any
};
export default SmallExample;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lbXB0eS1zdGF0ZXMvZml4dHVyZXMvU21hbGxFeGFtcGxlLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHJvcFR5cGVzIiwiQnV0dG9uIiwiTG9ja0ljb24iLCJQYW5lIiwiUG9wb3ZlciIsIm1ham9yU2NhbGUiLCJ1c2VUaGVtZSIsIkVtcHR5U3RhdGUiLCJTbWFsbEV4YW1wbGUiLCJwcm9wcyIsImNvbG9ycyIsInBvcG92ZXJQcm9wcyIsImJsdWUzMDAiLCJibHVlMTAwIiwicHJvcFR5cGVzIiwiYW55Il0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxNQUFULFFBQXVCLGVBQXZCO0FBQ0EsU0FBU0MsUUFBVCxRQUF5QixhQUF6QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsY0FBckI7QUFDQSxTQUFTQyxPQUFULFFBQXdCLGVBQXhCO0FBQ0EsU0FBU0MsVUFBVCxRQUEyQixjQUEzQjtBQUNBLFNBQVNDLFFBQVQsUUFBeUIsYUFBekI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLG1CQUF2Qjs7QUFFQSxJQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFBQyxLQUFLLEVBQUk7QUFDNUIsa0JBQW1CSCxRQUFRLEVBQTNCO0FBQUEsTUFBUUksTUFBUixhQUFRQSxNQUFSOztBQUVBLHNCQUNFLG9CQUFDLElBQUQ7QUFBTSxJQUFBLFlBQVksRUFBRUwsVUFBVSxDQUFDLEVBQUQ7QUFBOUIsa0JBQ0Usb0JBQUMsT0FBRCxlQUNNSSxLQUFLLENBQUNFLFlBRFo7QUFFRSxJQUFBLE9BQU8sZUFDTCxvQkFBQyxJQUFEO0FBQU0sTUFBQSxLQUFLLEVBQUUsR0FBYjtBQUFrQixNQUFBLE1BQU0sRUFBQztBQUF6QixvQkFDRSxvQkFBQyxVQUFEO0FBQ0UsTUFBQSxVQUFVLEVBQUMsT0FEYjtBQUVFLE1BQUEsS0FBSyxFQUFDLDZDQUZSO0FBR0UsTUFBQSxXQUFXLEVBQUMsVUFIZDtBQUlFLE1BQUEsSUFBSSxlQUFFLG9CQUFDLFFBQUQ7QUFBVSxRQUFBLEtBQUssRUFBRUQsTUFBTSxDQUFDRTtBQUF4QixRQUpSO0FBS0UsTUFBQSxXQUFXLEVBQUVGLE1BQU0sQ0FBQ0csT0FMdEI7QUFNRSxNQUFBLFdBQVcsRUFBQyxzSEFOZDtBQU9FLE1BQUEsVUFBVSxlQUFFLG9CQUFDLFVBQUQsQ0FBWSxhQUFaO0FBQTBCLFFBQUEsVUFBVSxFQUFDO0FBQXJDO0FBUGQsTUFERjtBQUhKLG1CQWdCRSxvQkFBQyxNQUFELDBCQWhCRixDQURGLENBREY7QUFzQkQsQ0F6QkQ7O0FBQU1MLFk7QUEyQk5BLFlBQVksQ0FBQ00sU0FBYixHQUF5QjtBQUN2QkgsRUFBQUEsWUFBWSxFQUFFWCxTQUFTLENBQUNlO0FBREQsQ0FBekI7QUFJQSxlQUFlUCxZQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vYnV0dG9ucydcbmltcG9ydCB7IExvY2tJY29uIH0gZnJvbSAnLi4vLi4vaWNvbnMnXG5pbXBvcnQgeyBQYW5lIH0gZnJvbSAnLi4vLi4vbGF5ZXJzJ1xuaW1wb3J0IHsgUG9wb3ZlciB9IGZyb20gJy4uLy4uL3BvcG92ZXInXG5pbXBvcnQgeyBtYWpvclNjYWxlIH0gZnJvbSAnLi4vLi4vc2NhbGVzJ1xuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcbmltcG9ydCBFbXB0eVN0YXRlIGZyb20gJy4uL3NyYy9FbXB0eVN0YXRlJ1xuXG5jb25zdCBTbWFsbEV4YW1wbGUgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgY29sb3JzIH0gPSB1c2VUaGVtZSgpXG5cbiAgcmV0dXJuIChcbiAgICA8UGFuZSBtYXJnaW5Cb3R0b209e21ham9yU2NhbGUoMjApfT5cbiAgICAgIDxQb3BvdmVyXG4gICAgICAgIHsuLi5wcm9wcy5wb3BvdmVyUHJvcHN9XG4gICAgICAgIGNvbnRlbnQ9e1xuICAgICAgICAgIDxQYW5lIHdpZHRoPXs0NTB9IGhlaWdodD1cImF1dG9cIj5cbiAgICAgICAgICAgIDxFbXB0eVN0YXRlXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ9XCJsaWdodFwiXG4gICAgICAgICAgICAgIHRpdGxlPVwiWW91IG5lZWQgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhlc2Ugc291cmNlc1wiXG4gICAgICAgICAgICAgIG9yaWVudGF0aW9uPVwidmVydGljYWxcIlxuICAgICAgICAgICAgICBpY29uPXs8TG9ja0ljb24gY29sb3I9e2NvbG9ycy5ibHVlMzAwfSAvPn1cbiAgICAgICAgICAgICAgaWNvbkJnQ29sb3I9e2NvbG9ycy5ibHVlMTAwfVxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbj1cIklmIHlvdSBiZWxpZXZlIHlvdSBzaG91bGQgaGF2ZSBhY2Nlc3NzIHRvIHRoaXMgcGFnZSwgcGxlYXNlIGNoZWNrIHdpdGggeW91ciBXb3Jrc3BhY2UgT3duZXIgb3IgcmVxdWVzdCBhY2Nlc3MgYmVsb3cuXCJcbiAgICAgICAgICAgICAgcHJpbWFyeUN0YT17PEVtcHR5U3RhdGUuUHJpbWFyeUJ1dHRvbiBhcHBlYXJhbmNlPVwicHJpbWFyeVwiPlJlcXVlc3QgQWNjZXNzPC9FbXB0eVN0YXRlLlByaW1hcnlCdXR0b24+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1BhbmU+XG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAgPEJ1dHRvbj5UcmlnZ2VyIFBvcG92ZXI8L0J1dHRvbj5cbiAgICAgIDwvUG9wb3Zlcj5cbiAgICA8L1BhbmU+XG4gIClcbn1cblxuU21hbGxFeGFtcGxlLnByb3BUeXBlcyA9IHtcbiAgcG9wb3ZlclByb3BzOiBQcm9wVHlwZXMuYW55XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNtYWxsRXhhbXBsZVxuIl19