import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["accountForScrollbar", "children", "className"],
    _excluded2 = ["className", "height"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, useState } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { useStyleConfig } from '../../hooks';
import { Pane } from '../../layers';
import ScrollbarSize from './ScrollbarSize';
var emptyObject = {};
var internalStyles = {
  display: 'flex',
  flexShrink: 0
};
var TableHead = /*#__PURE__*/memo(function TableHead(props) {
  var _props$accountForScro = props.accountForScrollbar,
      accountForScrollbar = _props$accountForScro === void 0 ? true : _props$accountForScro,
      children = props.children,
      className = props.className,
      rest = _objectWithoutProperties(props, _excluded);

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      scrollbarWidth = _useState2[0],
      setScrollBarWidth = _useState2[1];

  var _useStyleConfig = useStyleConfig('TableHead', emptyObject, emptyObject, internalStyles),
      themedClassName = _useStyleConfig.className,
      themeHeight = _useStyleConfig.height,
      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  var height = rest.height || themeHeight;
  return /*#__PURE__*/React.createElement(Pane, _extends({
    paddingRight: scrollbarWidth,
    className: cx(themedClassName, className),
    height: height
  }, boxProps, rest), children, " ", accountForScrollbar && /*#__PURE__*/React.createElement(ScrollbarSize, {
    handleScrollbarSize: setScrollBarWidth
  }));
});
TableHead.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {
  /**
   * The height of the table head.
   */
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * This should always be true if you are using TableHead together with a TableBody.
   * Because TableBody has `overflowY: scroll` by default.
   */
  accountForScrollbar: PropTypes.bool
});
export default TableHead;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvVGFibGVIZWFkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsInVzZVN0YXRlIiwiY3giLCJQcm9wVHlwZXMiLCJ1c2VTdHlsZUNvbmZpZyIsIlBhbmUiLCJTY3JvbGxiYXJTaXplIiwiZW1wdHlPYmplY3QiLCJpbnRlcm5hbFN0eWxlcyIsImRpc3BsYXkiLCJmbGV4U2hyaW5rIiwiVGFibGVIZWFkIiwicHJvcHMiLCJhY2NvdW50Rm9yU2Nyb2xsYmFyIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJyZXN0Iiwic2Nyb2xsYmFyV2lkdGgiLCJzZXRTY3JvbGxCYXJXaWR0aCIsInRoZW1lZENsYXNzTmFtZSIsInRoZW1lSGVpZ2h0IiwiaGVpZ2h0IiwiYm94UHJvcHMiLCJwcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJzdHJpbmciLCJib29sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxRQUF0QixRQUFzQyxPQUF0QztBQUNBLE9BQU9DLEVBQVAsTUFBZSxZQUFmO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLGNBQVQsUUFBK0IsYUFBL0I7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGNBQXJCO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQixpQkFBMUI7QUFFQSxJQUFNQyxXQUFXLEdBQUcsRUFBcEI7QUFFQSxJQUFNQyxjQUFjLEdBQUc7QUFDckJDLEVBQUFBLE9BQU8sRUFBRSxNQURZO0FBRXJCQyxFQUFBQSxVQUFVLEVBQUU7QUFGUyxDQUF2QjtBQUtBLElBQU1DLFNBQVMsZ0JBQUdYLElBQUksQ0FBQyxTQUFTVyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUMvQyw4QkFBcUVBLEtBQXJFLENBQVFDLG1CQUFSO0FBQUEsTUFBUUEsbUJBQVIsc0NBQThCLElBQTlCO0FBQUEsTUFBb0NDLFFBQXBDLEdBQXFFRixLQUFyRSxDQUFvQ0UsUUFBcEM7QUFBQSxNQUE4Q0MsU0FBOUMsR0FBcUVILEtBQXJFLENBQThDRyxTQUE5QztBQUFBLE1BQTREQyxJQUE1RCw0QkFBcUVKLEtBQXJFOztBQUNBLGtCQUE0Q1gsUUFBUSxDQUFDLENBQUQsQ0FBcEQ7QUFBQTtBQUFBLE1BQU9nQixjQUFQO0FBQUEsTUFBdUJDLGlCQUF2Qjs7QUFFQSx3QkFBeUVkLGNBQWMsQ0FDckYsV0FEcUYsRUFFckZHLFdBRnFGLEVBR3JGQSxXQUhxRixFQUlyRkMsY0FKcUYsQ0FBdkY7QUFBQSxNQUFtQlcsZUFBbkIsbUJBQVFKLFNBQVI7QUFBQSxNQUE0Q0ssV0FBNUMsbUJBQW9DQyxNQUFwQztBQUFBLE1BQTREQyxRQUE1RDs7QUFPQSxNQUFNRCxNQUFNLEdBQUdMLElBQUksQ0FBQ0ssTUFBTCxJQUFlRCxXQUE5QjtBQUVBLHNCQUNFLG9CQUFDLElBQUQ7QUFDRSxJQUFBLFlBQVksRUFBRUgsY0FEaEI7QUFFRSxJQUFBLFNBQVMsRUFBRWYsRUFBRSxDQUFDaUIsZUFBRCxFQUFrQkosU0FBbEIsQ0FGZjtBQUdFLElBQUEsTUFBTSxFQUFFTTtBQUhWLEtBSU1DLFFBSk4sRUFLTU4sSUFMTixHQU9HRixRQVBILE9BT2NELG1CQUFtQixpQkFBSSxvQkFBQyxhQUFEO0FBQWUsSUFBQSxtQkFBbUIsRUFBRUs7QUFBcEMsSUFQckMsQ0FERjtBQVdELENBeEJxQixDQUF0QjtBQTBCQVAsU0FBUyxDQUFDWSxTQUFWLG1DQUlLbEIsSUFBSSxDQUFDa0IsU0FKVjtBQU1FO0FBQ0Y7QUFDQTtBQUNFRixFQUFBQSxNQUFNLEVBQUVsQixTQUFTLENBQUNxQixTQUFWLENBQW9CLENBQUNyQixTQUFTLENBQUNzQixNQUFYLEVBQW1CdEIsU0FBUyxDQUFDdUIsTUFBN0IsQ0FBcEIsQ0FUVjs7QUFXRTtBQUNGO0FBQ0E7QUFDQTtBQUNFYixFQUFBQSxtQkFBbUIsRUFBRVYsU0FBUyxDQUFDd0I7QUFmakM7QUFrQkEsZUFBZWhCLFNBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgdXNlU3R5bGVDb25maWcgfSBmcm9tICcuLi8uLi9ob29rcydcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgU2Nyb2xsYmFyU2l6ZSBmcm9tICcuL1Njcm9sbGJhclNpemUnXG5cbmNvbnN0IGVtcHR5T2JqZWN0ID0ge31cblxuY29uc3QgaW50ZXJuYWxTdHlsZXMgPSB7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleFNocmluazogMFxufVxuXG5jb25zdCBUYWJsZUhlYWQgPSBtZW1vKGZ1bmN0aW9uIFRhYmxlSGVhZChwcm9wcykge1xuICBjb25zdCB7IGFjY291bnRGb3JTY3JvbGxiYXIgPSB0cnVlLCBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5yZXN0IH0gPSBwcm9wc1xuICBjb25zdCBbc2Nyb2xsYmFyV2lkdGgsIHNldFNjcm9sbEJhcldpZHRoXSA9IHVzZVN0YXRlKDApXG5cbiAgY29uc3QgeyBjbGFzc05hbWU6IHRoZW1lZENsYXNzTmFtZSwgaGVpZ2h0OiB0aGVtZUhlaWdodCwgLi4uYm94UHJvcHMgfSA9IHVzZVN0eWxlQ29uZmlnKFxuICAgICdUYWJsZUhlYWQnLFxuICAgIGVtcHR5T2JqZWN0LFxuICAgIGVtcHR5T2JqZWN0LFxuICAgIGludGVybmFsU3R5bGVzXG4gIClcblxuICBjb25zdCBoZWlnaHQgPSByZXN0LmhlaWdodCB8fCB0aGVtZUhlaWdodFxuXG4gIHJldHVybiAoXG4gICAgPFBhbmVcbiAgICAgIHBhZGRpbmdSaWdodD17c2Nyb2xsYmFyV2lkdGh9XG4gICAgICBjbGFzc05hbWU9e2N4KHRoZW1lZENsYXNzTmFtZSwgY2xhc3NOYW1lKX1cbiAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgey4uLmJveFByb3BzfVxuICAgICAgey4uLnJlc3R9XG4gICAgPlxuICAgICAge2NoaWxkcmVufSB7YWNjb3VudEZvclNjcm9sbGJhciAmJiA8U2Nyb2xsYmFyU2l6ZSBoYW5kbGVTY3JvbGxiYXJTaXplPXtzZXRTY3JvbGxCYXJXaWR0aH0gLz59XG4gICAgPC9QYW5lPlxuICApXG59KVxuXG5UYWJsZUhlYWQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIFBhbmUgY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgKi9cbiAgLi4uUGFuZS5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIHRhYmxlIGhlYWQuXG4gICAqL1xuICBoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhpcyBzaG91bGQgYWx3YXlzIGJlIHRydWUgaWYgeW91IGFyZSB1c2luZyBUYWJsZUhlYWQgdG9nZXRoZXIgd2l0aCBhIFRhYmxlQm9keS5cbiAgICogQmVjYXVzZSBUYWJsZUJvZHkgaGFzIGBvdmVyZmxvd1k6IHNjcm9sbGAgYnkgZGVmYXVsdC5cbiAgICovXG4gIGFjY291bnRGb3JTY3JvbGxiYXI6IFByb3BUeXBlcy5ib29sXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlSGVhZFxuIl19