import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { memo, useRef, useState, useEffect } from 'react';
import PropTypes from 'prop-types';

var noop = function noop() {};

var style = {
  position: 'fixed',
  top: -500,
  left: -500,
  width: 100,
  overflowY: 'scroll'
};
var ScrollbarSize = /*#__PURE__*/memo(function ScrollbarSize(_ref) {
  var _ref$handleScrollbarS = _ref.handleScrollbarSize,
      handleScrollbarSize = _ref$handleScrollbarS === void 0 ? noop : _ref$handleScrollbarS;
  var innerRef = useRef();
  var outerRef = useRef();

  var _useState = useState({
    innerWidth: null,
    outerWidth: null
  }),
      _useState2 = _slicedToArray(_useState, 2),
      widths = _useState2[0],
      setWidths = _useState2[1];

  useEffect(function () {
    var newWidths = {
      innerWidth: null,
      outerWidth: null
    };

    if (innerRef.current) {
      newWidths.innerWidth = innerRef.current.getBoundingClientRect().width;
    }

    if (outerRef.current) {
      newWidths.outerWidth = outerRef.current.getBoundingClientRect().width;
    }

    setWidths(newWidths);
  }, []);
  useEffect(function () {
    if (widths.innerWidth && widths.outerWidth) {
      handleScrollbarSize(widths.outerWidth - widths.innerWidth);
    }
  }, [widths, handleScrollbarSize]);
  return /*#__PURE__*/React.createElement("div", {
    ref: outerRef,
    "aria-hidden": true,
    style: style
  }, /*#__PURE__*/React.createElement("div", {
    ref: innerRef
  }));
});
ScrollbarSize.propTypes = {
  /**
   * Returns the size of the scrollbar by creating a hidden fixed div.
   */
  handleScrollbarSize: PropTypes.func
};
export default ScrollbarSize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvU2Nyb2xsYmFyU2l6ZS5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIm1lbW8iLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIlByb3BUeXBlcyIsIm5vb3AiLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwib3ZlcmZsb3dZIiwiU2Nyb2xsYmFyU2l6ZSIsImhhbmRsZVNjcm9sbGJhclNpemUiLCJpbm5lclJlZiIsIm91dGVyUmVmIiwiaW5uZXJXaWR0aCIsIm91dGVyV2lkdGgiLCJ3aWR0aHMiLCJzZXRXaWR0aHMiLCJuZXdXaWR0aHMiLCJjdXJyZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicHJvcFR5cGVzIiwiZnVuYyJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxNQUF0QixFQUE4QkMsUUFBOUIsRUFBd0NDLFNBQXhDLFFBQXlELE9BQXpEO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0Qjs7QUFFQSxJQUFNQyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFNLENBQUUsQ0FBckI7O0FBQ0EsSUFBTUMsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLFFBQVEsRUFBRSxPQURFO0FBRVpDLEVBQUFBLEdBQUcsRUFBRSxDQUFDLEdBRk07QUFHWkMsRUFBQUEsSUFBSSxFQUFFLENBQUMsR0FISztBQUlaQyxFQUFBQSxLQUFLLEVBQUUsR0FKSztBQUtaQyxFQUFBQSxTQUFTLEVBQUU7QUFMQyxDQUFkO0FBUUEsSUFBTUMsYUFBYSxnQkFBR1osSUFBSSxDQUFDLFNBQVNZLGFBQVQsT0FBdUQ7QUFBQSxtQ0FBOUJDLG1CQUE4QjtBQUFBLE1BQTlCQSxtQkFBOEIsc0NBQVJSLElBQVE7QUFDaEYsTUFBTVMsUUFBUSxHQUFHYixNQUFNLEVBQXZCO0FBQ0EsTUFBTWMsUUFBUSxHQUFHZCxNQUFNLEVBQXZCOztBQUNBLGtCQUE0QkMsUUFBUSxDQUFDO0FBQUVjLElBQUFBLFVBQVUsRUFBRSxJQUFkO0FBQW9CQyxJQUFBQSxVQUFVLEVBQUU7QUFBaEMsR0FBRCxDQUFwQztBQUFBO0FBQUEsTUFBT0MsTUFBUDtBQUFBLE1BQWVDLFNBQWY7O0FBRUFoQixFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkLFFBQU1pQixTQUFTLEdBQUc7QUFBRUosTUFBQUEsVUFBVSxFQUFFLElBQWQ7QUFBb0JDLE1BQUFBLFVBQVUsRUFBRTtBQUFoQyxLQUFsQjs7QUFFQSxRQUFJSCxRQUFRLENBQUNPLE9BQWIsRUFBc0I7QUFDcEJELE1BQUFBLFNBQVMsQ0FBQ0osVUFBVixHQUF1QkYsUUFBUSxDQUFDTyxPQUFULENBQWlCQyxxQkFBakIsR0FBeUNaLEtBQWhFO0FBQ0Q7O0FBRUQsUUFBSUssUUFBUSxDQUFDTSxPQUFiLEVBQXNCO0FBQ3BCRCxNQUFBQSxTQUFTLENBQUNILFVBQVYsR0FBdUJGLFFBQVEsQ0FBQ00sT0FBVCxDQUFpQkMscUJBQWpCLEdBQXlDWixLQUFoRTtBQUNEOztBQUVEUyxJQUFBQSxTQUFTLENBQUNDLFNBQUQsQ0FBVDtBQUNELEdBWlEsRUFZTixFQVpNLENBQVQ7QUFjQWpCLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2QsUUFBSWUsTUFBTSxDQUFDRixVQUFQLElBQXFCRSxNQUFNLENBQUNELFVBQWhDLEVBQTRDO0FBQzFDSixNQUFBQSxtQkFBbUIsQ0FBQ0ssTUFBTSxDQUFDRCxVQUFQLEdBQW9CQyxNQUFNLENBQUNGLFVBQTVCLENBQW5CO0FBQ0Q7QUFDRixHQUpRLEVBSU4sQ0FBQ0UsTUFBRCxFQUFTTCxtQkFBVCxDQUpNLENBQVQ7QUFNQSxzQkFDRTtBQUFLLElBQUEsR0FBRyxFQUFFRSxRQUFWO0FBQW9CLHVCQUFwQjtBQUFnQyxJQUFBLEtBQUssRUFBRVQ7QUFBdkMsa0JBQ0U7QUFBSyxJQUFBLEdBQUcsRUFBRVE7QUFBVixJQURGLENBREY7QUFLRCxDQTlCeUIsQ0FBMUI7QUFnQ0FGLGFBQWEsQ0FBQ1csU0FBZCxHQUEwQjtBQUN4QjtBQUNGO0FBQ0E7QUFDRVYsRUFBQUEsbUJBQW1CLEVBQUVULFNBQVMsQ0FBQ29CO0FBSlAsQ0FBMUI7QUFPQSxlQUFlWixhQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuXG5jb25zdCBub29wID0gKCkgPT4ge31cbmNvbnN0IHN0eWxlID0ge1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgdG9wOiAtNTAwLFxuICBsZWZ0OiAtNTAwLFxuICB3aWR0aDogMTAwLFxuICBvdmVyZmxvd1k6ICdzY3JvbGwnXG59XG5cbmNvbnN0IFNjcm9sbGJhclNpemUgPSBtZW1vKGZ1bmN0aW9uIFNjcm9sbGJhclNpemUoeyBoYW5kbGVTY3JvbGxiYXJTaXplID0gbm9vcCB9KSB7XG4gIGNvbnN0IGlubmVyUmVmID0gdXNlUmVmKClcbiAgY29uc3Qgb3V0ZXJSZWYgPSB1c2VSZWYoKVxuICBjb25zdCBbd2lkdGhzLCBzZXRXaWR0aHNdID0gdXNlU3RhdGUoeyBpbm5lcldpZHRoOiBudWxsLCBvdXRlcldpZHRoOiBudWxsIH0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBuZXdXaWR0aHMgPSB7IGlubmVyV2lkdGg6IG51bGwsIG91dGVyV2lkdGg6IG51bGwgfVxuXG4gICAgaWYgKGlubmVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIG5ld1dpZHRocy5pbm5lcldpZHRoID0gaW5uZXJSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgIH1cblxuICAgIGlmIChvdXRlclJlZi5jdXJyZW50KSB7XG4gICAgICBuZXdXaWR0aHMub3V0ZXJXaWR0aCA9IG91dGVyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICB9XG5cbiAgICBzZXRXaWR0aHMobmV3V2lkdGhzKVxuICB9LCBbXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh3aWR0aHMuaW5uZXJXaWR0aCAmJiB3aWR0aHMub3V0ZXJXaWR0aCkge1xuICAgICAgaGFuZGxlU2Nyb2xsYmFyU2l6ZSh3aWR0aHMub3V0ZXJXaWR0aCAtIHdpZHRocy5pbm5lcldpZHRoKVxuICAgIH1cbiAgfSwgW3dpZHRocywgaGFuZGxlU2Nyb2xsYmFyU2l6ZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17b3V0ZXJSZWZ9IGFyaWEtaGlkZGVuIHN0eWxlPXtzdHlsZX0+XG4gICAgICA8ZGl2IHJlZj17aW5uZXJSZWZ9IC8+XG4gICAgPC9kaXY+XG4gIClcbn0pXG5cblNjcm9sbGJhclNpemUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgc2Nyb2xsYmFyIGJ5IGNyZWF0aW5nIGEgaGlkZGVuIGZpeGVkIGRpdi5cbiAgICovXG4gIGhhbmRsZVNjcm9sbGJhclNpemU6IFByb3BUeXBlcy5mdW5jXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbGJhclNpemVcbiJdfQ==