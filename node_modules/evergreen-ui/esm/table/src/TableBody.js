import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import { Pane } from '../../layers';
var TableBody = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TableBody(props, ref) {
  var children = props.children,
      rest = _objectWithoutProperties(props, _excluded);

  return /*#__PURE__*/React.createElement(Pane, _extends({
    ref: ref,
    "data-evergreen-table-body": true,
    flex: "1",
    overflowY: "auto"
  }, rest), children);
}));
TableBody.propTypes = _objectSpread({}, Pane.propTypes);
export default TableBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvVGFibGVCb2R5LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsImZvcndhcmRSZWYiLCJQYW5lIiwiVGFibGVCb2R5IiwicHJvcHMiLCJyZWYiLCJjaGlsZHJlbiIsInJlc3QiLCJwcm9wVHlwZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxVQUF0QixRQUF3QyxPQUF4QztBQUNBLFNBQVNDLElBQVQsUUFBcUIsY0FBckI7QUFFQSxJQUFNQyxTQUFTLGdCQUFHSCxJQUFJLGVBQ3BCQyxVQUFVLENBQUMsU0FBU0UsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLEdBQTFCLEVBQStCO0FBQ3hDLE1BQVFDLFFBQVIsR0FBOEJGLEtBQTlCLENBQVFFLFFBQVI7QUFBQSxNQUFxQkMsSUFBckIsNEJBQThCSCxLQUE5Qjs7QUFFQSxzQkFDRSxvQkFBQyxJQUFEO0FBQU0sSUFBQSxHQUFHLEVBQUVDLEdBQVg7QUFBZ0IscUNBQWhCO0FBQTBDLElBQUEsSUFBSSxFQUFDLEdBQS9DO0FBQW1ELElBQUEsU0FBUyxFQUFDO0FBQTdELEtBQXdFRSxJQUF4RSxHQUNHRCxRQURILENBREY7QUFLRCxDQVJTLENBRFUsQ0FBdEI7QUFZQUgsU0FBUyxDQUFDSyxTQUFWLHFCQUlLTixJQUFJLENBQUNNLFNBSlY7QUFPQSxlQUFlTCxTQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5cbmNvbnN0IFRhYmxlQm9keSA9IG1lbW8oXG4gIGZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVCb2R5KHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCAuLi5yZXN0IH0gPSBwcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lIHJlZj17cmVmfSBkYXRhLWV2ZXJncmVlbi10YWJsZS1ib2R5IGZsZXg9XCIxXCIgb3ZlcmZsb3dZPVwiYXV0b1wiIHsuLi5yZXN0fT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9QYW5lPlxuICAgIClcbiAgfSlcbilcblxuVGFibGVCb2R5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbXBvc2VzIHRoZSBQYW5lIGNvbXBvbmVudCBhcyB0aGUgYmFzZS5cbiAgICovXG4gIC4uLlBhbmUucHJvcFR5cGVzXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlQm9keVxuIl19