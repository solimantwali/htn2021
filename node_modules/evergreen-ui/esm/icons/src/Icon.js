import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["className", "color", "name", "size", "svgPaths16", "svgPaths20", "title"],
    _excluded2 = ["className"];
import React, { forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { useStyleConfig } from '../../hooks';
var pseudoSelectors = {};
var internalStyles = {};
var Icon = /*#__PURE__*/forwardRef(function Icon(_ref, ref) {
  var className = _ref.className,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'currentColor' : _ref$color,
      name = _ref.name,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 16 : _ref$size,
      svgPaths16 = _ref.svgPaths16,
      svgPaths20 = _ref.svgPaths20,
      title = _ref.title,
      svgProps = _objectWithoutProperties(_ref, _excluded);

  var _useStyleConfig = useStyleConfig('Icon', {
    color: color
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  var SIZE_STANDARD = 16;
  var SIZE_LARGE = 20; // Choose which pixel grid is most appropriate for given icon size

  var pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD;
  var pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20;
  var paths = pathStrings.map(function (d, i) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement("path", {
        key: i,
        d: d,
        fillRule: "evenodd"
      })
    );
  });
  var viewBox = "0 0 ".concat(pixelGridSize, " ").concat(pixelGridSize);
  return /*#__PURE__*/React.createElement(Box, _extends({
    is: "svg",
    ref: ref,
    className: cx(className, themedClassName)
  }, styleProps, svgProps, {
    "data-icon": name,
    width: size,
    height: size,
    viewBox: viewBox
  }), title && /*#__PURE__*/React.createElement("title", null, title), paths);
});
Icon.propTypes = {
  /**
   * Class name passed to the component.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string,

  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: PropTypes.string,

  /**
   * Size of the icon, in pixels.
   * Blueprint contains 16px and 20px SVG icon images,
   * and chooses the appropriate resolution based on this prop.
   */
  size: PropTypes.number,

  /**
   * Name of the icon
   */
  name: PropTypes.string,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: PropTypes.string,
  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,
  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired
};
export default Icon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29ucy9zcmMvSWNvbi5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsImZvcndhcmRSZWYiLCJjeCIsIlByb3BUeXBlcyIsIkJveCIsInVzZVN0eWxlQ29uZmlnIiwicHNldWRvU2VsZWN0b3JzIiwiaW50ZXJuYWxTdHlsZXMiLCJJY29uIiwicmVmIiwiY2xhc3NOYW1lIiwiY29sb3IiLCJuYW1lIiwic2l6ZSIsInN2Z1BhdGhzMTYiLCJzdmdQYXRoczIwIiwidGl0bGUiLCJzdmdQcm9wcyIsInRoZW1lZENsYXNzTmFtZSIsInN0eWxlUHJvcHMiLCJTSVpFX1NUQU5EQVJEIiwiU0laRV9MQVJHRSIsInBpeGVsR3JpZFNpemUiLCJwYXRoU3RyaW5ncyIsInBhdGhzIiwibWFwIiwiZCIsImkiLCJ2aWV3Qm94IiwicHJvcFR5cGVzIiwic3RyaW5nIiwibnVtYmVyIiwiYXJyYXlPZiIsImlzUmVxdWlyZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxVQUFoQixRQUFrQyxPQUFsQztBQUNBLE9BQU9DLEVBQVAsTUFBZSxZQUFmO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEdBQVAsTUFBZ0IsUUFBaEI7QUFDQSxTQUFTQyxjQUFULFFBQStCLGFBQS9CO0FBRUEsSUFBTUMsZUFBZSxHQUFHLEVBQXhCO0FBQ0EsSUFBTUMsY0FBYyxHQUFHLEVBQXZCO0FBRUEsSUFBTUMsSUFBSSxnQkFBR1AsVUFBVSxDQUFDLFNBQVNPLElBQVQsT0FFdEJDLEdBRnNCLEVBR3RCO0FBQUEsTUFGRUMsU0FFRixRQUZFQSxTQUVGO0FBQUEsd0JBRmFDLEtBRWI7QUFBQSxNQUZhQSxLQUViLDJCQUZxQixjQUVyQjtBQUFBLE1BRnFDQyxJQUVyQyxRQUZxQ0EsSUFFckM7QUFBQSx1QkFGMkNDLElBRTNDO0FBQUEsTUFGMkNBLElBRTNDLDBCQUZrRCxFQUVsRDtBQUFBLE1BRnNEQyxVQUV0RCxRQUZzREEsVUFFdEQ7QUFBQSxNQUZrRUMsVUFFbEUsUUFGa0VBLFVBRWxFO0FBQUEsTUFGOEVDLEtBRTlFLFFBRjhFQSxLQUU5RTtBQUFBLE1BRndGQyxRQUV4Rjs7QUFDQSx3QkFBc0RaLGNBQWMsQ0FDbEUsTUFEa0UsRUFFbEU7QUFBRU0sSUFBQUEsS0FBSyxFQUFMQTtBQUFGLEdBRmtFLEVBR2xFTCxlQUhrRSxFQUlsRUMsY0FKa0UsQ0FBcEU7QUFBQSxNQUFtQlcsZUFBbkIsbUJBQVFSLFNBQVI7QUFBQSxNQUF1Q1MsVUFBdkM7O0FBTUEsTUFBTUMsYUFBYSxHQUFHLEVBQXRCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLEVBQW5CLENBUkEsQ0FVQTs7QUFDQSxNQUFNQyxhQUFhLEdBQUdULElBQUksSUFBSVEsVUFBUixHQUFxQkEsVUFBckIsR0FBa0NELGFBQXhEO0FBQ0EsTUFBTUcsV0FBVyxHQUFHRCxhQUFhLEtBQUtGLGFBQWxCLEdBQWtDTixVQUFsQyxHQUErQ0MsVUFBbkU7QUFDQSxNQUFNUyxLQUFLLEdBQUdELFdBQVcsQ0FBQ0UsR0FBWixDQUFnQixVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQTtBQUFBO0FBQzVCO0FBQ0E7QUFBTSxRQUFBLEdBQUcsRUFBRUEsQ0FBWDtBQUFjLFFBQUEsQ0FBQyxFQUFFRCxDQUFqQjtBQUFvQixRQUFBLFFBQVEsRUFBQztBQUE3QjtBQUY0QjtBQUFBLEdBQWhCLENBQWQ7QUFLQSxNQUFNRSxPQUFPLGlCQUFVTixhQUFWLGNBQTJCQSxhQUEzQixDQUFiO0FBRUEsc0JBQ0Usb0JBQUMsR0FBRDtBQUNFLElBQUEsRUFBRSxFQUFDLEtBREw7QUFFRSxJQUFBLEdBQUcsRUFBRWIsR0FGUDtBQUdFLElBQUEsU0FBUyxFQUFFUCxFQUFFLENBQUNRLFNBQUQsRUFBWVEsZUFBWjtBQUhmLEtBSU1DLFVBSk4sRUFLTUYsUUFMTjtBQU1FLGlCQUFXTCxJQU5iO0FBT0UsSUFBQSxLQUFLLEVBQUVDLElBUFQ7QUFRRSxJQUFBLE1BQU0sRUFBRUEsSUFSVjtBQVNFLElBQUEsT0FBTyxFQUFFZTtBQVRYLE1BV0daLEtBQUssaUJBQUksbUNBQVFBLEtBQVIsQ0FYWixFQVlHUSxLQVpILENBREY7QUFnQkQsQ0F2Q3NCLENBQXZCO0FBeUNBaEIsSUFBSSxDQUFDcUIsU0FBTCxHQUFpQjtBQUNmO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VuQixFQUFBQSxTQUFTLEVBQUVQLFNBQVMsQ0FBQzJCLE1BTE47O0FBT2Y7QUFDRjtBQUNBO0FBQ0VuQixFQUFBQSxLQUFLLEVBQUVSLFNBQVMsQ0FBQzJCLE1BVkY7O0FBWWY7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNFakIsRUFBQUEsSUFBSSxFQUFFVixTQUFTLENBQUM0QixNQWpCRDs7QUFtQmY7QUFDRjtBQUNBO0FBQ0VuQixFQUFBQSxJQUFJLEVBQUVULFNBQVMsQ0FBQzJCLE1BdEJEOztBQXdCZjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRWQsRUFBQUEsS0FBSyxFQUFFYixTQUFTLENBQUMyQixNQTlCRjtBQWdDZmhCLEVBQUFBLFVBQVUsRUFBRVgsU0FBUyxDQUFDNkIsT0FBVixDQUFrQjdCLFNBQVMsQ0FBQzJCLE1BQTVCLEVBQW9DRyxVQWhDakM7QUFrQ2ZsQixFQUFBQSxVQUFVLEVBQUVaLFNBQVMsQ0FBQzZCLE9BQVYsQ0FBa0I3QixTQUFTLENBQUMyQixNQUE1QixFQUFvQ0c7QUFsQ2pDLENBQWpCO0FBcUNBLGVBQWV6QixJQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyB1c2VTdHlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuXG5jb25zdCBwc2V1ZG9TZWxlY3RvcnMgPSB7fVxuY29uc3QgaW50ZXJuYWxTdHlsZXMgPSB7fVxuXG5jb25zdCBJY29uID0gZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uKFxuICB7IGNsYXNzTmFtZSwgY29sb3IgPSAnY3VycmVudENvbG9yJywgbmFtZSwgc2l6ZSA9IDE2LCBzdmdQYXRoczE2LCBzdmdQYXRoczIwLCB0aXRsZSwgLi4uc3ZnUHJvcHMgfSxcbiAgcmVmXG4pIHtcbiAgY29uc3QgeyBjbGFzc05hbWU6IHRoZW1lZENsYXNzTmFtZSwgLi4uc3R5bGVQcm9wcyB9ID0gdXNlU3R5bGVDb25maWcoXG4gICAgJ0ljb24nLFxuICAgIHsgY29sb3IgfSxcbiAgICBwc2V1ZG9TZWxlY3RvcnMsXG4gICAgaW50ZXJuYWxTdHlsZXNcbiAgKVxuICBjb25zdCBTSVpFX1NUQU5EQVJEID0gMTZcbiAgY29uc3QgU0laRV9MQVJHRSA9IDIwXG5cbiAgLy8gQ2hvb3NlIHdoaWNoIHBpeGVsIGdyaWQgaXMgbW9zdCBhcHByb3ByaWF0ZSBmb3IgZ2l2ZW4gaWNvbiBzaXplXG4gIGNvbnN0IHBpeGVsR3JpZFNpemUgPSBzaXplID49IFNJWkVfTEFSR0UgPyBTSVpFX0xBUkdFIDogU0laRV9TVEFOREFSRFxuICBjb25zdCBwYXRoU3RyaW5ncyA9IHBpeGVsR3JpZFNpemUgPT09IFNJWkVfU1RBTkRBUkQgPyBzdmdQYXRoczE2IDogc3ZnUGF0aHMyMFxuICBjb25zdCBwYXRocyA9IHBhdGhTdHJpbmdzLm1hcCgoZCwgaSkgPT4gKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICA8cGF0aCBrZXk9e2l9IGQ9e2R9IGZpbGxSdWxlPVwiZXZlbm9kZFwiIC8+XG4gICkpXG5cbiAgY29uc3Qgdmlld0JveCA9IGAwIDAgJHtwaXhlbEdyaWRTaXplfSAke3BpeGVsR3JpZFNpemV9YFxuXG4gIHJldHVybiAoXG4gICAgPEJveFxuICAgICAgaXM9XCJzdmdcIlxuICAgICAgcmVmPXtyZWZ9XG4gICAgICBjbGFzc05hbWU9e2N4KGNsYXNzTmFtZSwgdGhlbWVkQ2xhc3NOYW1lKX1cbiAgICAgIHsuLi5zdHlsZVByb3BzfVxuICAgICAgey4uLnN2Z1Byb3BzfVxuICAgICAgZGF0YS1pY29uPXtuYW1lfVxuICAgICAgd2lkdGg9e3NpemV9XG4gICAgICBoZWlnaHQ9e3NpemV9XG4gICAgICB2aWV3Qm94PXt2aWV3Qm94fVxuICAgID5cbiAgICAgIHt0aXRsZSAmJiA8dGl0bGU+e3RpdGxlfTwvdGl0bGU+fVxuICAgICAge3BhdGhzfVxuICAgIDwvQm94PlxuICApXG59KVxuXG5JY29uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgcGFzc2VkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIE9ubHkgdXNlIGlmIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ29sb3Igb2YgaWNvbi4gRXF1aXZhbGVudCB0byBzZXR0aW5nIENTUyBgZmlsbGAgcHJvcGVydHkuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgaWNvbiwgaW4gcGl4ZWxzLlxuICAgKiBCbHVlcHJpbnQgY29udGFpbnMgMTZweCBhbmQgMjBweCBTVkcgaWNvbiBpbWFnZXMsXG4gICAqIGFuZCBjaG9vc2VzIHRoZSBhcHByb3ByaWF0ZSByZXNvbHV0aW9uIGJhc2VkIG9uIHRoaXMgcHJvcC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGljb25cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIHN0cmluZy5cbiAgICogQnJvd3NlcnMgdXN1YWxseSByZW5kZXIgdGhpcyBhcyBhIHRvb2x0aXAgb24gaG92ZXIsIHdoZXJlYXMgc2NyZWVuXG4gICAqIHJlYWRlcnMgd2lsbCB1c2UgaXQgZm9yIGF1cmFsIGZlZWRiYWNrLlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGlzIHNldCB0byB0aGUgaWNvbidzIG5hbWUgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICBzdmdQYXRoczE2OiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKS5pc1JlcXVpcmVkLFxuXG4gIHN2Z1BhdGhzMjA6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgSWNvblxuIl19