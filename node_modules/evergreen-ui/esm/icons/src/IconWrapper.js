import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["color", "icon", "size", "title"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { forwardRef, memo } from 'react';
import PropTypes from 'prop-types';
import ReactIs from 'react-is';
import Box from 'ui-box';
/**
 * This is an internal helper component for rendering custom or Evergreen icons
 * Box props are applied to the outer Box container, and Evergreen icon-specific props are added to the icon element.
 */

export var IconWrapper = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Icon(_ref, ref) {
  var color = _ref.color,
      icon = _ref.icon,
      size = _ref.size,
      title = _ref.title,
      props = _objectWithoutProperties(_ref, _excluded);

  if (!icon || typeof icon === 'string') {
    return null;
  }

  var iconProps = {
    color: color,
    size: size,
    title: title
  };
  var iconWithProps = null;

  if (ReactIs.isValidElementType(icon)) {
    var Component = icon;
    iconWithProps = /*#__PURE__*/React.createElement(Component, _extends({
      ref: ref
    }, iconProps));
  } else if ( /*#__PURE__*/React.isValidElement(icon)) {
    iconWithProps = /*#__PURE__*/React.cloneElement(icon, _objectSpread(_objectSpread(_objectSpread({}, iconProps), icon.props), {}, {
      ref: ref
    }));
  }

  return /*#__PURE__*/React.createElement(Box, _extends({
    display: "inline-flex"
  }, props), iconWithProps);
}));
IconWrapper.propTypes = {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: PropTypes.string,

  /**
   * The icon component - whether an Evergreen icon or a custom icon node:
   *
   * - If `null` or `undefined` or `false`, this component will render nothing.
   * - If given a `JSX.Element`, that element will be rendered, with size/color/title props cloned into it
   * - If given a React element type, it will be rendered with the other icon props
   *   As a consumer, you should never use `<IconWrapper icon={<element />}` directly; simply render `<element />` instead.
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * Size of the icon, in pixels.
   * Icons contains 16px and 20px SVG icon paths,
   * and chooses the appropriate resolution based on this prop.
   */
  size: PropTypes.number,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: PropTypes.string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29ucy9zcmMvSWNvbldyYXBwZXIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJmb3J3YXJkUmVmIiwibWVtbyIsIlByb3BUeXBlcyIsIlJlYWN0SXMiLCJCb3giLCJJY29uV3JhcHBlciIsIkljb24iLCJyZWYiLCJjb2xvciIsImljb24iLCJzaXplIiwidGl0bGUiLCJwcm9wcyIsImljb25Qcm9wcyIsImljb25XaXRoUHJvcHMiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJDb21wb25lbnQiLCJpc1ZhbGlkRWxlbWVudCIsImNsb25lRWxlbWVudCIsInByb3BUeXBlcyIsInN0cmluZyIsIm9uZU9mVHlwZSIsImVsZW1lbnRUeXBlIiwiZWxlbWVudCIsIm51bWJlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsVUFBaEIsRUFBNEJDLElBQTVCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsVUFBcEI7QUFDQSxPQUFPQyxHQUFQLE1BQWdCLFFBQWhCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsT0FBTyxJQUFNQyxXQUFXLGdCQUFHSixJQUFJLGVBQzdCRCxVQUFVLENBQUMsU0FBU00sSUFBVCxPQUFzREMsR0FBdEQsRUFBMkQ7QUFBQSxNQUEzQ0MsS0FBMkMsUUFBM0NBLEtBQTJDO0FBQUEsTUFBcENDLElBQW9DLFFBQXBDQSxJQUFvQztBQUFBLE1BQTlCQyxJQUE4QixRQUE5QkEsSUFBOEI7QUFBQSxNQUF4QkMsS0FBd0IsUUFBeEJBLEtBQXdCO0FBQUEsTUFBZEMsS0FBYzs7QUFDcEUsTUFBSSxDQUFDSCxJQUFELElBQVMsT0FBT0EsSUFBUCxLQUFnQixRQUE3QixFQUF1QztBQUNyQyxXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFNSSxTQUFTLEdBQUc7QUFDaEJMLElBQUFBLEtBQUssRUFBTEEsS0FEZ0I7QUFFaEJFLElBQUFBLElBQUksRUFBSkEsSUFGZ0I7QUFHaEJDLElBQUFBLEtBQUssRUFBTEE7QUFIZ0IsR0FBbEI7QUFNQSxNQUFJRyxhQUFhLEdBQUcsSUFBcEI7O0FBQ0EsTUFBSVgsT0FBTyxDQUFDWSxrQkFBUixDQUEyQk4sSUFBM0IsQ0FBSixFQUFzQztBQUNwQyxRQUFNTyxTQUFTLEdBQUdQLElBQWxCO0FBQ0FLLElBQUFBLGFBQWEsZ0JBQUcsb0JBQUMsU0FBRDtBQUFXLE1BQUEsR0FBRyxFQUFFUDtBQUFoQixPQUF5Qk0sU0FBekIsRUFBaEI7QUFDRCxHQUhELE1BR08sa0JBQUlkLEtBQUssQ0FBQ2tCLGNBQU4sQ0FBcUJSLElBQXJCLENBQUosRUFBZ0M7QUFDckNLLElBQUFBLGFBQWEsZ0JBQUdmLEtBQUssQ0FBQ21CLFlBQU4sQ0FBbUJULElBQW5CLGdEQUE4QkksU0FBOUIsR0FBNENKLElBQUksQ0FBQ0csS0FBakQ7QUFBd0RMLE1BQUFBLEdBQUcsRUFBSEE7QUFBeEQsT0FBaEI7QUFDRDs7QUFFRCxzQkFDRSxvQkFBQyxHQUFEO0FBQUssSUFBQSxPQUFPLEVBQUM7QUFBYixLQUErQkssS0FBL0IsR0FDR0UsYUFESCxDQURGO0FBS0QsQ0F4QlMsQ0FEbUIsQ0FBeEI7QUE0QlBULFdBQVcsQ0FBQ2MsU0FBWixHQUF3QjtBQUN0QjtBQUNGO0FBQ0E7QUFDRVgsRUFBQUEsS0FBSyxFQUFFTixTQUFTLENBQUNrQixNQUpLOztBQU10QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VYLEVBQUFBLElBQUksRUFBRVAsU0FBUyxDQUFDbUIsU0FBVixDQUFvQixDQUFDbkIsU0FBUyxDQUFDb0IsV0FBWCxFQUF3QnBCLFNBQVMsQ0FBQ3FCLE9BQWxDLENBQXBCLENBZGdCOztBQWdCdEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNFYixFQUFBQSxJQUFJLEVBQUVSLFNBQVMsQ0FBQ3NCLE1BckJNOztBQXVCdEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0ViLEVBQUFBLEtBQUssRUFBRVQsU0FBUyxDQUFDa0I7QUE3QkssQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IFJlYWN0SXMgZnJvbSAncmVhY3QtaXMnXG5pbXBvcnQgQm94IGZyb20gJ3VpLWJveCdcblxuLyoqXG4gKiBUaGlzIGlzIGFuIGludGVybmFsIGhlbHBlciBjb21wb25lbnQgZm9yIHJlbmRlcmluZyBjdXN0b20gb3IgRXZlcmdyZWVuIGljb25zXG4gKiBCb3ggcHJvcHMgYXJlIGFwcGxpZWQgdG8gdGhlIG91dGVyIEJveCBjb250YWluZXIsIGFuZCBFdmVyZ3JlZW4gaWNvbi1zcGVjaWZpYyBwcm9wcyBhcmUgYWRkZWQgdG8gdGhlIGljb24gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IEljb25XcmFwcGVyID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uKHsgY29sb3IsIGljb24sIHNpemUsIHRpdGxlLCAuLi5wcm9wcyB9LCByZWYpIHtcbiAgICBpZiAoIWljb24gfHwgdHlwZW9mIGljb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGljb25Qcm9wcyA9IHtcbiAgICAgIGNvbG9yLFxuICAgICAgc2l6ZSxcbiAgICAgIHRpdGxlXG4gICAgfVxuXG4gICAgbGV0IGljb25XaXRoUHJvcHMgPSBudWxsXG4gICAgaWYgKFJlYWN0SXMuaXNWYWxpZEVsZW1lbnRUeXBlKGljb24pKSB7XG4gICAgICBjb25zdCBDb21wb25lbnQgPSBpY29uXG4gICAgICBpY29uV2l0aFByb3BzID0gPENvbXBvbmVudCByZWY9e3JlZn0gey4uLmljb25Qcm9wc30gLz5cbiAgICB9IGVsc2UgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pKSB7XG4gICAgICBpY29uV2l0aFByb3BzID0gUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHsgLi4uaWNvblByb3BzLCAuLi5pY29uLnByb3BzLCByZWYgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJveCBkaXNwbGF5PVwiaW5saW5lLWZsZXhcIiB7Li4ucHJvcHN9PlxuICAgICAgICB7aWNvbldpdGhQcm9wc31cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfSlcbilcblxuSWNvbldyYXBwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ29sb3Igb2YgaWNvbi4gRXF1aXZhbGVudCB0byBzZXR0aW5nIENTUyBgZmlsbGAgcHJvcGVydHkuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGljb24gY29tcG9uZW50IC0gd2hldGhlciBhbiBFdmVyZ3JlZW4gaWNvbiBvciBhIGN1c3RvbSBpY29uIG5vZGU6XG4gICAqXG4gICAqIC0gSWYgYG51bGxgIG9yIGB1bmRlZmluZWRgIG9yIGBmYWxzZWAsIHRoaXMgY29tcG9uZW50IHdpbGwgcmVuZGVyIG5vdGhpbmcuXG4gICAqIC0gSWYgZ2l2ZW4gYSBgSlNYLkVsZW1lbnRgLCB0aGF0IGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZCwgd2l0aCBzaXplL2NvbG9yL3RpdGxlIHByb3BzIGNsb25lZCBpbnRvIGl0XG4gICAqIC0gSWYgZ2l2ZW4gYSBSZWFjdCBlbGVtZW50IHR5cGUsIGl0IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCB0aGUgb3RoZXIgaWNvbiBwcm9wc1xuICAgKiAgIEFzIGEgY29uc3VtZXIsIHlvdSBzaG91bGQgbmV2ZXIgdXNlIGA8SWNvbldyYXBwZXIgaWNvbj17PGVsZW1lbnQgLz59YCBkaXJlY3RseTsgc2ltcGx5IHJlbmRlciBgPGVsZW1lbnQgLz5gIGluc3RlYWQuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZWxlbWVudFR5cGUsIFByb3BUeXBlcy5lbGVtZW50XSksXG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGljb24sIGluIHBpeGVscy5cbiAgICogSWNvbnMgY29udGFpbnMgMTZweCBhbmQgMjBweCBTVkcgaWNvbiBwYXRocyxcbiAgICogYW5kIGNob29zZXMgdGhlIGFwcHJvcHJpYXRlIHJlc29sdXRpb24gYmFzZWQgb24gdGhpcyBwcm9wLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogRGVzY3JpcHRpb24gc3RyaW5nLlxuICAgKiBCcm93c2VycyB1c3VhbGx5IHJlbmRlciB0aGlzIGFzIGEgdG9vbHRpcCBvbiBob3Zlciwgd2hlcmVhcyBzY3JlZW5cbiAgICogcmVhZGVycyB3aWxsIHVzZSBpdCBmb3IgYXVyYWwgZmVlZGJhY2suXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaXMgc2V0IHRvIHRoZSBpY29uJ3MgbmFtZSBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nXG59XG4iXX0=