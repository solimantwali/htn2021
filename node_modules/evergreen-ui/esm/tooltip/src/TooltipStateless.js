import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["appearance", "children"],
    _excluded2 = ["color"];
import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { useStyleConfig } from '../../hooks';
import { Pane } from '../../layers';
import { Paragraph } from '../../typography';
var pseudoSelectors = {};
var internalStyles = {};
var TooltipStateless = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TooltipStateless(props, ref) {
  var appearance = props.appearance,
      children = props.children,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useStyleConfig = useStyleConfig('Tooltip', {
    appearance: appearance
  }, pseudoSelectors, internalStyles),
      boxProps = _extends({}, _useStyleConfig);

  var color = boxProps.color,
      themedProps = _objectWithoutProperties(boxProps, _excluded2);

  var child;

  if (typeof children === 'string') {
    child = /*#__PURE__*/React.createElement(Paragraph, {
      color: color,
      size: 400
    }, children);
  } else {
    child = children;
  }

  return /*#__PURE__*/React.createElement(Pane, _extends({
    ref: ref
  }, themedProps, restProps), child);
}));
TooltipStateless.propTypes = {
  children: PropTypes.node,

  /**
   * The appearance of the tooltip.
   */
  appearance: PropTypes.oneOf(['default', 'card']).isRequired
};
export default TooltipStateless;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b29sdGlwL3NyYy9Ub29sdGlwU3RhdGVsZXNzLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsImZvcndhcmRSZWYiLCJQcm9wVHlwZXMiLCJ1c2VTdHlsZUNvbmZpZyIsIlBhbmUiLCJQYXJhZ3JhcGgiLCJwc2V1ZG9TZWxlY3RvcnMiLCJpbnRlcm5hbFN0eWxlcyIsIlRvb2x0aXBTdGF0ZWxlc3MiLCJwcm9wcyIsInJlZiIsImFwcGVhcmFuY2UiLCJjaGlsZHJlbiIsInJlc3RQcm9wcyIsImJveFByb3BzIiwiY29sb3IiLCJ0aGVtZWRQcm9wcyIsImNoaWxkIiwicHJvcFR5cGVzIiwibm9kZSIsIm9uZU9mIiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxVQUF0QixRQUF3QyxPQUF4QztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxjQUFULFFBQStCLGFBQS9CO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixjQUFyQjtBQUNBLFNBQVNDLFNBQVQsUUFBMEIsa0JBQTFCO0FBRUEsSUFBTUMsZUFBZSxHQUFHLEVBQXhCO0FBQ0EsSUFBTUMsY0FBYyxHQUFHLEVBQXZCO0FBRUEsSUFBTUMsZ0JBQWdCLGdCQUFHUixJQUFJLGVBQzNCQyxVQUFVLENBQUMsU0FBU08sZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDQyxHQUFqQyxFQUFzQztBQUMvQyxNQUFRQyxVQUFSLEdBQStDRixLQUEvQyxDQUFRRSxVQUFSO0FBQUEsTUFBb0JDLFFBQXBCLEdBQStDSCxLQUEvQyxDQUFvQkcsUUFBcEI7QUFBQSxNQUFpQ0MsU0FBakMsNEJBQStDSixLQUEvQzs7QUFDQSx3QkFBd0JOLGNBQWMsQ0FBQyxTQUFELEVBQVk7QUFBRVEsSUFBQUEsVUFBVSxFQUFWQTtBQUFGLEdBQVosRUFBNEJMLGVBQTVCLEVBQTZDQyxjQUE3QyxDQUF0QztBQUFBLE1BQVdPLFFBQVg7O0FBRUEsTUFBUUMsS0FBUixHQUFrQ0QsUUFBbEMsQ0FBUUMsS0FBUjtBQUFBLE1BQWtCQyxXQUFsQiw0QkFBa0NGLFFBQWxDOztBQUVBLE1BQUlHLEtBQUo7O0FBQ0EsTUFBSSxPQUFPTCxRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDSyxJQUFBQSxLQUFLLGdCQUNILG9CQUFDLFNBQUQ7QUFBVyxNQUFBLEtBQUssRUFBRUYsS0FBbEI7QUFBeUIsTUFBQSxJQUFJLEVBQUU7QUFBL0IsT0FDR0gsUUFESCxDQURGO0FBS0QsR0FORCxNQU1PO0FBQ0xLLElBQUFBLEtBQUssR0FBR0wsUUFBUjtBQUNEOztBQUVELHNCQUNFLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEdBQUcsRUFBRUY7QUFBWCxLQUFvQk0sV0FBcEIsRUFBcUNILFNBQXJDLEdBQ0dJLEtBREgsQ0FERjtBQUtELENBdEJTLENBRGlCLENBQTdCO0FBMEJBVCxnQkFBZ0IsQ0FBQ1UsU0FBakIsR0FBNkI7QUFDM0JOLEVBQUFBLFFBQVEsRUFBRVYsU0FBUyxDQUFDaUIsSUFETzs7QUFHM0I7QUFDRjtBQUNBO0FBQ0VSLEVBQUFBLFVBQVUsRUFBRVQsU0FBUyxDQUFDa0IsS0FBVixDQUFnQixDQUFDLFNBQUQsRUFBWSxNQUFaLENBQWhCLEVBQXFDQztBQU50QixDQUE3QjtBQVNBLGVBQWViLGdCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZVN0eWxlQ29uZmlnIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5pbXBvcnQgeyBQYW5lIH0gZnJvbSAnLi4vLi4vbGF5ZXJzJ1xuaW1wb3J0IHsgUGFyYWdyYXBoIH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcblxuY29uc3QgcHNldWRvU2VsZWN0b3JzID0ge31cbmNvbnN0IGludGVybmFsU3R5bGVzID0ge31cblxuY29uc3QgVG9vbHRpcFN0YXRlbGVzcyA9IG1lbW8oXG4gIGZvcndhcmRSZWYoZnVuY3Rpb24gVG9vbHRpcFN0YXRlbGVzcyhwcm9wcywgcmVmKSB7XG4gICAgY29uc3QgeyBhcHBlYXJhbmNlLCBjaGlsZHJlbiwgLi4ucmVzdFByb3BzIH0gPSBwcm9wc1xuICAgIGNvbnN0IHsgLi4uYm94UHJvcHMgfSA9IHVzZVN0eWxlQ29uZmlnKCdUb29sdGlwJywgeyBhcHBlYXJhbmNlIH0sIHBzZXVkb1NlbGVjdG9ycywgaW50ZXJuYWxTdHlsZXMpXG5cbiAgICBjb25zdCB7IGNvbG9yLCAuLi50aGVtZWRQcm9wcyB9ID0gYm94UHJvcHNcblxuICAgIGxldCBjaGlsZFxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICBjaGlsZCA9IChcbiAgICAgICAgPFBhcmFncmFwaCBjb2xvcj17Y29sb3J9IHNpemU9ezQwMH0+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L1BhcmFncmFwaD5cbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlblxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8UGFuZSByZWY9e3JlZn0gey4uLnRoZW1lZFByb3BzfSB7Li4ucmVzdFByb3BzfT5cbiAgICAgICAge2NoaWxkfVxuICAgICAgPC9QYW5lPlxuICAgIClcbiAgfSlcbilcblxuVG9vbHRpcFN0YXRlbGVzcy5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHRvb2x0aXAuXG4gICAqL1xuICBhcHBlYXJhbmNlOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2NhcmQnXSkuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwU3RhdGVsZXNzXG4iXX0=