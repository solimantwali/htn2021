import React, { useContext, memo } from 'react';
import PropTypes from 'prop-types';
import { StackingOrder } from '../../constants';
import StackingContext from './StackingContext';
var Stack = /*#__PURE__*/memo(function Stack(_ref) {
  var children = _ref.children,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? StackingOrder.STACKING_CONTEXT : _ref$value;
  var previousValue = useContext(StackingContext);
  var currentValue = Math.max(value, previousValue);
  var nextValue = currentValue + 1;
  return /*#__PURE__*/React.createElement(StackingContext.Provider, {
    value: nextValue
  }, children(currentValue));
});
Stack.propTypes = {
  /**
   * Function that takes the current z-index and returns a React Node.
   * (zIndex) => ReactNode.
   */
  children: PropTypes.func.isRequired,

  /**
   * Set the value of the stack. This will increment for children.
   */
  value: PropTypes.number
};
export default Stack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdGFjay9zcmMvU3RhY2suanMiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VDb250ZXh0IiwibWVtbyIsIlByb3BUeXBlcyIsIlN0YWNraW5nT3JkZXIiLCJTdGFja2luZ0NvbnRleHQiLCJTdGFjayIsImNoaWxkcmVuIiwidmFsdWUiLCJTVEFDS0lOR19DT05URVhUIiwicHJldmlvdXNWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsIk1hdGgiLCJtYXgiLCJuZXh0VmFsdWUiLCJwcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm51bWJlciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxJQUFnQkMsVUFBaEIsRUFBNEJDLElBQTVCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLGFBQVQsUUFBOEIsaUJBQTlCO0FBQ0EsT0FBT0MsZUFBUCxNQUE0QixtQkFBNUI7QUFFQSxJQUFNQyxLQUFLLGdCQUFHSixJQUFJLENBQUMsU0FBU0ksS0FBVCxPQUFxRTtBQUFBLE1BQXBEQyxRQUFvRCxRQUFwREEsUUFBb0Q7QUFBQSx3QkFBMUNDLEtBQTBDO0FBQUEsTUFBMUNBLEtBQTBDLDJCQUFsQ0osYUFBYSxDQUFDSyxnQkFBb0I7QUFDdEYsTUFBTUMsYUFBYSxHQUFHVCxVQUFVLENBQUNJLGVBQUQsQ0FBaEM7QUFDQSxNQUFNTSxZQUFZLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTTCxLQUFULEVBQWdCRSxhQUFoQixDQUFyQjtBQUNBLE1BQU1JLFNBQVMsR0FBR0gsWUFBWSxHQUFHLENBQWpDO0FBRUEsc0JBQU8sb0JBQUMsZUFBRCxDQUFpQixRQUFqQjtBQUEwQixJQUFBLEtBQUssRUFBRUc7QUFBakMsS0FBNkNQLFFBQVEsQ0FBQ0ksWUFBRCxDQUFyRCxDQUFQO0FBQ0QsQ0FOaUIsQ0FBbEI7QUFRQUwsS0FBSyxDQUFDUyxTQUFOLEdBQWtCO0FBQ2hCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VSLEVBQUFBLFFBQVEsRUFBRUosU0FBUyxDQUFDYSxJQUFWLENBQWVDLFVBTFQ7O0FBT2hCO0FBQ0Y7QUFDQTtBQUNFVCxFQUFBQSxLQUFLLEVBQUVMLFNBQVMsQ0FBQ2U7QUFWRCxDQUFsQjtBQWFBLGVBQWVaLEtBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgU3RhY2tpbmdPcmRlciB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcbmltcG9ydCBTdGFja2luZ0NvbnRleHQgZnJvbSAnLi9TdGFja2luZ0NvbnRleHQnXG5cbmNvbnN0IFN0YWNrID0gbWVtbyhmdW5jdGlvbiBTdGFjayh7IGNoaWxkcmVuLCB2YWx1ZSA9IFN0YWNraW5nT3JkZXIuU1RBQ0tJTkdfQ09OVEVYVCB9KSB7XG4gIGNvbnN0IHByZXZpb3VzVmFsdWUgPSB1c2VDb250ZXh0KFN0YWNraW5nQ29udGV4dClcbiAgY29uc3QgY3VycmVudFZhbHVlID0gTWF0aC5tYXgodmFsdWUsIHByZXZpb3VzVmFsdWUpXG4gIGNvbnN0IG5leHRWYWx1ZSA9IGN1cnJlbnRWYWx1ZSArIDFcblxuICByZXR1cm4gPFN0YWNraW5nQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bmV4dFZhbHVlfT57Y2hpbGRyZW4oY3VycmVudFZhbHVlKX08L1N0YWNraW5nQ29udGV4dC5Qcm92aWRlcj5cbn0pXG5cblN0YWNrLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIGN1cnJlbnQgei1pbmRleCBhbmQgcmV0dXJucyBhIFJlYWN0IE5vZGUuXG4gICAqICh6SW5kZXgpID0+IFJlYWN0Tm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoZSBzdGFjay4gVGhpcyB3aWxsIGluY3JlbWVudCBmb3IgY2hpbGRyZW4uXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlclxufVxuXG5leHBvcnQgZGVmYXVsdCBTdGFja1xuIl19