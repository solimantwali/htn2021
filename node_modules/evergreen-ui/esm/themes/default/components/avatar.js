import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function getColor(theme, _ref) {
  var color = _ref.color,
      hashValue = _ref.hashValue;

  if (color === 'automatic') {
    var keys = Object.keys(theme.fills);

    if (hashValue) {
      return theme.fills[keys[hashValue % keys.length]];
    } else {
      return theme.fills[keys[Math.floor(Math.random() * keys.length)]];
    }
  }

  return theme.fills[color];
}

var baseStyle = function baseStyle(theme, props) {
  return _objectSpread({
    borderRadius: props.shape === 'round' ? '100%' : 'radii.1'
  }, getColor(theme, props));
};

var appearances = {};
var sizes = {};
export default {
  baseStyle: baseStyle,
  appearances: appearances,
  sizes: sizes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvZGVmYXVsdC9jb21wb25lbnRzL2F2YXRhci5qcyJdLCJuYW1lcyI6WyJnZXRDb2xvciIsInRoZW1lIiwiY29sb3IiLCJoYXNoVmFsdWUiLCJrZXlzIiwiT2JqZWN0IiwiZmlsbHMiLCJsZW5ndGgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJiYXNlU3R5bGUiLCJwcm9wcyIsImJvcmRlclJhZGl1cyIsInNoYXBlIiwiYXBwZWFyYW5jZXMiLCJzaXplcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsUUFBVCxDQUFrQkMsS0FBbEIsUUFBK0M7QUFBQSxNQUFwQkMsS0FBb0IsUUFBcEJBLEtBQW9CO0FBQUEsTUFBYkMsU0FBYSxRQUFiQSxTQUFhOztBQUM3QyxNQUFJRCxLQUFLLEtBQUssV0FBZCxFQUEyQjtBQUN6QixRQUFNRSxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZSCxLQUFLLENBQUNLLEtBQWxCLENBQWI7O0FBRUEsUUFBSUgsU0FBSixFQUFlO0FBQ2IsYUFBT0YsS0FBSyxDQUFDSyxLQUFOLENBQVlGLElBQUksQ0FBQ0QsU0FBUyxHQUFHQyxJQUFJLENBQUNHLE1BQWxCLENBQWhCLENBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPTixLQUFLLENBQUNLLEtBQU4sQ0FBWUYsSUFBSSxDQUFDSSxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCTixJQUFJLENBQUNHLE1BQWhDLENBQUQsQ0FBaEIsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT04sS0FBSyxDQUFDSyxLQUFOLENBQVlKLEtBQVosQ0FBUDtBQUNEOztBQUVELElBQU1TLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNWLEtBQUQsRUFBUVcsS0FBUixFQUFrQjtBQUNsQztBQUNFQyxJQUFBQSxZQUFZLEVBQUVELEtBQUssQ0FBQ0UsS0FBTixLQUFnQixPQUFoQixHQUEwQixNQUExQixHQUFtQztBQURuRCxLQUVLZCxRQUFRLENBQUNDLEtBQUQsRUFBUVcsS0FBUixDQUZiO0FBSUQsQ0FMRDs7QUFPQSxJQUFNRyxXQUFXLEdBQUcsRUFBcEI7QUFDQSxJQUFNQyxLQUFLLEdBQUcsRUFBZDtBQUVBLGVBQWU7QUFDYkwsRUFBQUEsU0FBUyxFQUFUQSxTQURhO0FBRWJJLEVBQUFBLFdBQVcsRUFBWEEsV0FGYTtBQUdiQyxFQUFBQSxLQUFLLEVBQUxBO0FBSGEsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldENvbG9yKHRoZW1lLCB7IGNvbG9yLCBoYXNoVmFsdWUgfSkge1xuICBpZiAoY29sb3IgPT09ICdhdXRvbWF0aWMnKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoZW1lLmZpbGxzKVxuXG4gICAgaWYgKGhhc2hWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoZW1lLmZpbGxzW2tleXNbaGFzaFZhbHVlICUga2V5cy5sZW5ndGhdXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbWUuZmlsbHNba2V5c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBrZXlzLmxlbmd0aCldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGVtZS5maWxsc1tjb2xvcl1cbn1cblxuY29uc3QgYmFzZVN0eWxlID0gKHRoZW1lLCBwcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIGJvcmRlclJhZGl1czogcHJvcHMuc2hhcGUgPT09ICdyb3VuZCcgPyAnMTAwJScgOiAncmFkaWkuMScsXG4gICAgLi4uZ2V0Q29sb3IodGhlbWUsIHByb3BzKVxuICB9XG59XG5cbmNvbnN0IGFwcGVhcmFuY2VzID0ge31cbmNvbnN0IHNpemVzID0ge31cblxuZXhwb3J0IGRlZmF1bHQge1xuICBiYXNlU3R5bGUsXG4gIGFwcGVhcmFuY2VzLFxuICBzaXplc1xufVxuIl19