import palette from './palette';
import scales from './scales';
/**
 * This object are functional colors being used the default theme.
 * A required property is required by the default theme NOT by Evergreen itself.
 */

export default {
  /**
   * Available on Pane as `<Pane background="tint1" />`
   * @property {string} background.tint1 - Lightest tinted background color. Required property.
   * @property {string} background.tint2 - Slightly darker tinted background color. Required property.
   * @property {string} background.overlay - color used for the overlay
   */
  background: {
    tint1: scales.neutral.N1,
    tint2: scales.neutral.N2,
    overlay: scales.neutral.N7A,
    // Non required.
    yellowTint: palette.yellow.lightest,
    greenTint: palette.green.lightest,
    orangeTint: palette.orange.lightest,
    redTint: palette.red.lightest,
    blueTint: palette.blue.lightest,
    purpleTint: palette.purple.lightest,
    tealTint: palette.teal.lightest
  },

  /**
   * Text colors available on Text as `<Text color="muted" />`.
   * @property {string} text.muted - Required property.
   * @property {string} text.default - Required property. Default for text.
   * @property {string} text.dark - Required property. Default for headings.
   */
  text: {
    muted: scales.neutral.N8,
    "default": scales.neutral.N9,
    dark: scales.neutral.N10,
    selected: palette.blue.base,
    // Intent.
    success: palette.green.dark,
    info: palette.blue.dark,
    danger: palette.red.dark,
    warning: palette.orange.dark
  },

  /**
   * Icon colors available on Icon.
   * @property {string} icon.default - Required property.
   * @property {string} icon.muted - Required property.
   * @property {string} icon.selected - Required property.
   */
  icon: {
    "default": scales.neutral.N8,
    muted: scales.neutral.N7,
    disabled: scales.neutral.N5A,
    selected: palette.blue.base,
    // Intent.
    success: palette.green.base,
    info: palette.blue.base,
    danger: palette.red.base,
    warning: palette.orange.base
  },

  /**
   * Used for Alerts and other (future) componentes that express intent.
   * @property {string} intent.none - Required property.
   * @property {string} intent.success - Required property.
   * @property {string} intent.danger - Required property.
   * @property {string} intent.warning - Required property.
   */
  intent: {
    none: palette.blue.base,
    success: palette.green.base,
    danger: palette.red.base,
    warning: palette.orange.base
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvZGVwcmVjYXRlZC9mb3VuZGF0aW9uYWwtc3R5bGVzL2NvbG9ycy5qcyJdLCJuYW1lcyI6WyJwYWxldHRlIiwic2NhbGVzIiwiYmFja2dyb3VuZCIsInRpbnQxIiwibmV1dHJhbCIsIk4xIiwidGludDIiLCJOMiIsIm92ZXJsYXkiLCJON0EiLCJ5ZWxsb3dUaW50IiwieWVsbG93IiwibGlnaHRlc3QiLCJncmVlblRpbnQiLCJncmVlbiIsIm9yYW5nZVRpbnQiLCJvcmFuZ2UiLCJyZWRUaW50IiwicmVkIiwiYmx1ZVRpbnQiLCJibHVlIiwicHVycGxlVGludCIsInB1cnBsZSIsInRlYWxUaW50IiwidGVhbCIsInRleHQiLCJtdXRlZCIsIk44IiwiTjkiLCJkYXJrIiwiTjEwIiwic2VsZWN0ZWQiLCJiYXNlIiwic3VjY2VzcyIsImluZm8iLCJkYW5nZXIiLCJ3YXJuaW5nIiwiaWNvbiIsIk43IiwiZGlzYWJsZWQiLCJONUEiLCJpbnRlbnQiLCJub25lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFQLE1BQW9CLFdBQXBCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixVQUFuQjtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGVBQWU7QUFDYjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRUMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLEtBQUssRUFBRUYsTUFBTSxDQUFDRyxPQUFQLENBQWVDLEVBRFo7QUFFVkMsSUFBQUEsS0FBSyxFQUFFTCxNQUFNLENBQUNHLE9BQVAsQ0FBZUcsRUFGWjtBQUdWQyxJQUFBQSxPQUFPLEVBQUVQLE1BQU0sQ0FBQ0csT0FBUCxDQUFlSyxHQUhkO0FBS1Y7QUFDQUMsSUFBQUEsVUFBVSxFQUFFVixPQUFPLENBQUNXLE1BQVIsQ0FBZUMsUUFOakI7QUFPVkMsSUFBQUEsU0FBUyxFQUFFYixPQUFPLENBQUNjLEtBQVIsQ0FBY0YsUUFQZjtBQVFWRyxJQUFBQSxVQUFVLEVBQUVmLE9BQU8sQ0FBQ2dCLE1BQVIsQ0FBZUosUUFSakI7QUFTVkssSUFBQUEsT0FBTyxFQUFFakIsT0FBTyxDQUFDa0IsR0FBUixDQUFZTixRQVRYO0FBVVZPLElBQUFBLFFBQVEsRUFBRW5CLE9BQU8sQ0FBQ29CLElBQVIsQ0FBYVIsUUFWYjtBQVdWUyxJQUFBQSxVQUFVLEVBQUVyQixPQUFPLENBQUNzQixNQUFSLENBQWVWLFFBWGpCO0FBWVZXLElBQUFBLFFBQVEsRUFBRXZCLE9BQU8sQ0FBQ3dCLElBQVIsQ0FBYVo7QUFaYixHQVBDOztBQXNCYjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRWEsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLEtBQUssRUFBRXpCLE1BQU0sQ0FBQ0csT0FBUCxDQUFldUIsRUFEbEI7QUFFSixlQUFTMUIsTUFBTSxDQUFDRyxPQUFQLENBQWV3QixFQUZwQjtBQUdKQyxJQUFBQSxJQUFJLEVBQUU1QixNQUFNLENBQUNHLE9BQVAsQ0FBZTBCLEdBSGpCO0FBSUpDLElBQUFBLFFBQVEsRUFBRS9CLE9BQU8sQ0FBQ29CLElBQVIsQ0FBYVksSUFKbkI7QUFNSjtBQUNBQyxJQUFBQSxPQUFPLEVBQUVqQyxPQUFPLENBQUNjLEtBQVIsQ0FBY2UsSUFQbkI7QUFRSkssSUFBQUEsSUFBSSxFQUFFbEMsT0FBTyxDQUFDb0IsSUFBUixDQUFhUyxJQVJmO0FBU0pNLElBQUFBLE1BQU0sRUFBRW5DLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWVcsSUFUaEI7QUFVSk8sSUFBQUEsT0FBTyxFQUFFcEMsT0FBTyxDQUFDZ0IsTUFBUixDQUFlYTtBQVZwQixHQTVCTzs7QUF5Q2I7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VRLEVBQUFBLElBQUksRUFBRTtBQUNKLGVBQVNwQyxNQUFNLENBQUNHLE9BQVAsQ0FBZXVCLEVBRHBCO0FBRUpELElBQUFBLEtBQUssRUFBRXpCLE1BQU0sQ0FBQ0csT0FBUCxDQUFla0MsRUFGbEI7QUFHSkMsSUFBQUEsUUFBUSxFQUFFdEMsTUFBTSxDQUFDRyxPQUFQLENBQWVvQyxHQUhyQjtBQUlKVCxJQUFBQSxRQUFRLEVBQUUvQixPQUFPLENBQUNvQixJQUFSLENBQWFZLElBSm5CO0FBTUo7QUFDQUMsSUFBQUEsT0FBTyxFQUFFakMsT0FBTyxDQUFDYyxLQUFSLENBQWNrQixJQVBuQjtBQVFKRSxJQUFBQSxJQUFJLEVBQUVsQyxPQUFPLENBQUNvQixJQUFSLENBQWFZLElBUmY7QUFTSkcsSUFBQUEsTUFBTSxFQUFFbkMsT0FBTyxDQUFDa0IsR0FBUixDQUFZYyxJQVRoQjtBQVVKSSxJQUFBQSxPQUFPLEVBQUVwQyxPQUFPLENBQUNnQixNQUFSLENBQWVnQjtBQVZwQixHQS9DTzs7QUE0RGI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRVMsRUFBQUEsTUFBTSxFQUFFO0FBQ05DLElBQUFBLElBQUksRUFBRTFDLE9BQU8sQ0FBQ29CLElBQVIsQ0FBYVksSUFEYjtBQUVOQyxJQUFBQSxPQUFPLEVBQUVqQyxPQUFPLENBQUNjLEtBQVIsQ0FBY2tCLElBRmpCO0FBR05HLElBQUFBLE1BQU0sRUFBRW5DLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWWMsSUFIZDtBQUlOSSxJQUFBQSxPQUFPLEVBQUVwQyxPQUFPLENBQUNnQixNQUFSLENBQWVnQjtBQUpsQjtBQW5FSyxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi9wYWxldHRlJ1xuaW1wb3J0IHNjYWxlcyBmcm9tICcuL3NjYWxlcydcblxuLyoqXG4gKiBUaGlzIG9iamVjdCBhcmUgZnVuY3Rpb25hbCBjb2xvcnMgYmVpbmcgdXNlZCB0aGUgZGVmYXVsdCB0aGVtZS5cbiAqIEEgcmVxdWlyZWQgcHJvcGVydHkgaXMgcmVxdWlyZWQgYnkgdGhlIGRlZmF1bHQgdGhlbWUgTk9UIGJ5IEV2ZXJncmVlbiBpdHNlbGYuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBvbiBQYW5lIGFzIGA8UGFuZSBiYWNrZ3JvdW5kPVwidGludDFcIiAvPmBcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGJhY2tncm91bmQudGludDEgLSBMaWdodGVzdCB0aW50ZWQgYmFja2dyb3VuZCBjb2xvci4gUmVxdWlyZWQgcHJvcGVydHkuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiYWNrZ3JvdW5kLnRpbnQyIC0gU2xpZ2h0bHkgZGFya2VyIHRpbnRlZCBiYWNrZ3JvdW5kIGNvbG9yLiBSZXF1aXJlZCBwcm9wZXJ0eS5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGJhY2tncm91bmQub3ZlcmxheSAtIGNvbG9yIHVzZWQgZm9yIHRoZSBvdmVybGF5XG4gICAqL1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgdGludDE6IHNjYWxlcy5uZXV0cmFsLk4xLFxuICAgIHRpbnQyOiBzY2FsZXMubmV1dHJhbC5OMixcbiAgICBvdmVybGF5OiBzY2FsZXMubmV1dHJhbC5ON0EsXG5cbiAgICAvLyBOb24gcmVxdWlyZWQuXG4gICAgeWVsbG93VGludDogcGFsZXR0ZS55ZWxsb3cubGlnaHRlc3QsXG4gICAgZ3JlZW5UaW50OiBwYWxldHRlLmdyZWVuLmxpZ2h0ZXN0LFxuICAgIG9yYW5nZVRpbnQ6IHBhbGV0dGUub3JhbmdlLmxpZ2h0ZXN0LFxuICAgIHJlZFRpbnQ6IHBhbGV0dGUucmVkLmxpZ2h0ZXN0LFxuICAgIGJsdWVUaW50OiBwYWxldHRlLmJsdWUubGlnaHRlc3QsXG4gICAgcHVycGxlVGludDogcGFsZXR0ZS5wdXJwbGUubGlnaHRlc3QsXG4gICAgdGVhbFRpbnQ6IHBhbGV0dGUudGVhbC5saWdodGVzdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUZXh0IGNvbG9ycyBhdmFpbGFibGUgb24gVGV4dCBhcyBgPFRleHQgY29sb3I9XCJtdXRlZFwiIC8+YC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHRleHQubXV0ZWQgLSBSZXF1aXJlZCBwcm9wZXJ0eS5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHRleHQuZGVmYXVsdCAtIFJlcXVpcmVkIHByb3BlcnR5LiBEZWZhdWx0IGZvciB0ZXh0LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdGV4dC5kYXJrIC0gUmVxdWlyZWQgcHJvcGVydHkuIERlZmF1bHQgZm9yIGhlYWRpbmdzLlxuICAgKi9cbiAgdGV4dDoge1xuICAgIG11dGVkOiBzY2FsZXMubmV1dHJhbC5OOCxcbiAgICBkZWZhdWx0OiBzY2FsZXMubmV1dHJhbC5OOSxcbiAgICBkYXJrOiBzY2FsZXMubmV1dHJhbC5OMTAsXG4gICAgc2VsZWN0ZWQ6IHBhbGV0dGUuYmx1ZS5iYXNlLFxuXG4gICAgLy8gSW50ZW50LlxuICAgIHN1Y2Nlc3M6IHBhbGV0dGUuZ3JlZW4uZGFyayxcbiAgICBpbmZvOiBwYWxldHRlLmJsdWUuZGFyayxcbiAgICBkYW5nZXI6IHBhbGV0dGUucmVkLmRhcmssXG4gICAgd2FybmluZzogcGFsZXR0ZS5vcmFuZ2UuZGFya1xuICB9LFxuXG4gIC8qKlxuICAgKiBJY29uIGNvbG9ycyBhdmFpbGFibGUgb24gSWNvbi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGljb24uZGVmYXVsdCAtIFJlcXVpcmVkIHByb3BlcnR5LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gaWNvbi5tdXRlZCAtIFJlcXVpcmVkIHByb3BlcnR5LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gaWNvbi5zZWxlY3RlZCAtIFJlcXVpcmVkIHByb3BlcnR5LlxuICAgKi9cbiAgaWNvbjoge1xuICAgIGRlZmF1bHQ6IHNjYWxlcy5uZXV0cmFsLk44LFxuICAgIG11dGVkOiBzY2FsZXMubmV1dHJhbC5ONyxcbiAgICBkaXNhYmxlZDogc2NhbGVzLm5ldXRyYWwuTjVBLFxuICAgIHNlbGVjdGVkOiBwYWxldHRlLmJsdWUuYmFzZSxcblxuICAgIC8vIEludGVudC5cbiAgICBzdWNjZXNzOiBwYWxldHRlLmdyZWVuLmJhc2UsXG4gICAgaW5mbzogcGFsZXR0ZS5ibHVlLmJhc2UsXG4gICAgZGFuZ2VyOiBwYWxldHRlLnJlZC5iYXNlLFxuICAgIHdhcm5pbmc6IHBhbGV0dGUub3JhbmdlLmJhc2VcbiAgfSxcblxuICAvKipcbiAgICogVXNlZCBmb3IgQWxlcnRzIGFuZCBvdGhlciAoZnV0dXJlKSBjb21wb25lbnRlcyB0aGF0IGV4cHJlc3MgaW50ZW50LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gaW50ZW50Lm5vbmUgLSBSZXF1aXJlZCBwcm9wZXJ0eS5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGludGVudC5zdWNjZXNzIC0gUmVxdWlyZWQgcHJvcGVydHkuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbnRlbnQuZGFuZ2VyIC0gUmVxdWlyZWQgcHJvcGVydHkuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbnRlbnQud2FybmluZyAtIFJlcXVpcmVkIHByb3BlcnR5LlxuICAgKi9cbiAgaW50ZW50OiB7XG4gICAgbm9uZTogcGFsZXR0ZS5ibHVlLmJhc2UsXG4gICAgc3VjY2VzczogcGFsZXR0ZS5ncmVlbi5iYXNlLFxuICAgIGRhbmdlcjogcGFsZXR0ZS5yZWQuYmFzZSxcbiAgICB3YXJuaW5nOiBwYWxldHRlLm9yYW5nZS5iYXNlXG4gIH1cbn1cbiJdfQ==