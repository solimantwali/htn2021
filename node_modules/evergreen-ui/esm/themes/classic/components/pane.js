import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function borderProperty(theme, _ref) {
  var border = _ref.border,
      value = _ref.value;

  if (Object.prototype.hasOwnProperty.call(theme.colors.border, value)) {
    return "1px solid ".concat(theme.colors.border[value]);
  }

  if (value === true) {
    return "1px solid ".concat(theme.colors.border["default"]);
  }

  if (value === false) {
    return null;
  }

  if (Object.prototype.hasOwnProperty.call(theme.colors.border, border)) {
    return "1px solid ".concat(theme.colors.border[border]);
  }

  if (border === true) {
    return "1px solid ".concat(theme.colors.border["default"]);
  }

  return value || border;
}

var baseStyle = function baseStyle(theme, props) {
  var transitionStyles = {};

  if (theme.shadows[props.hoverElevation] || theme.shadows[props.activeElevation]) {
    Object.assign(transitionStyles, {
      transitionDuration: '150ms',
      transitionProperty: 'box-shadow, transform',
      transitionTimingFunction: 'cubic-bezier(0.0, 0.0, 0.2, 1)'
    });
  }

  var hoverStyles;

  if (theme.shadows[props.hoverElevation]) {
    hoverStyles = {
      transform: 'translateY(-2px)',
      boxShadow: "shadows.".concat(props.hoverElevation)
    };
  }

  var activeStyles;

  if (theme.shadows[props.activeElevation]) {
    activeStyles = {
      transform: 'translateY(-1px)',
      boxShadow: "shadows.".concat(props.activeElevation)
    };
  }

  return _objectSpread(_objectSpread({
    background: theme.colors[props.background] || props.background,
    boxShadow: theme.shadows[props.elevation],
    borderTop: borderProperty(theme, {
      border: props.border,
      value: props.borderTop
    }),
    borderRight: borderProperty(theme, {
      border: props.border,
      value: props.borderRight
    }),
    borderBottom: borderProperty(theme, {
      border: props.border,
      value: props.borderBottom
    }),
    borderLeft: borderProperty(theme, {
      border: props.border,
      value: props.borderLeft
    })
  }, transitionStyles), {}, {
    _hover: hoverStyles,
    _active: activeStyles
  });
};

var appearances = {};
var sizes = {};
export default {
  baseStyle: baseStyle,
  appearances: appearances,
  sizes: sizes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvY2xhc3NpYy9jb21wb25lbnRzL3BhbmUuanMiXSwibmFtZXMiOlsiYm9yZGVyUHJvcGVydHkiLCJ0aGVtZSIsImJvcmRlciIsInZhbHVlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY29sb3JzIiwiYmFzZVN0eWxlIiwicHJvcHMiLCJ0cmFuc2l0aW9uU3R5bGVzIiwic2hhZG93cyIsImhvdmVyRWxldmF0aW9uIiwiYWN0aXZlRWxldmF0aW9uIiwiYXNzaWduIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiaG92ZXJTdHlsZXMiLCJ0cmFuc2Zvcm0iLCJib3hTaGFkb3ciLCJhY3RpdmVTdHlsZXMiLCJiYWNrZ3JvdW5kIiwiZWxldmF0aW9uIiwiYm9yZGVyVG9wIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJCb3R0b20iLCJib3JkZXJMZWZ0IiwiX2hvdmVyIiwiX2FjdGl2ZSIsImFwcGVhcmFuY2VzIiwic2l6ZXMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLFFBQWtEO0FBQUEsTUFBakJDLE1BQWlCLFFBQWpCQSxNQUFpQjtBQUFBLE1BQVRDLEtBQVMsUUFBVEEsS0FBUzs7QUFDaEQsTUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNOLEtBQUssQ0FBQ08sTUFBTixDQUFhTixNQUFsRCxFQUEwREMsS0FBMUQsQ0FBSixFQUFzRTtBQUNwRSwrQkFBb0JGLEtBQUssQ0FBQ08sTUFBTixDQUFhTixNQUFiLENBQW9CQyxLQUFwQixDQUFwQjtBQUNEOztBQUVELE1BQUlBLEtBQUssS0FBSyxJQUFkLEVBQW9CO0FBQ2xCLCtCQUFvQkYsS0FBSyxDQUFDTyxNQUFOLENBQWFOLE1BQWIsV0FBcEI7QUFDRDs7QUFFRCxN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cUJFa0IsSUFBQUEsTUFBTSxFQUFFVixXQXJCVjtBQXNCRVcsSUFBQUEsT0FBTyxFQUFFUjtBQXRCWDtBQXdCRCxDQWxERDs7QUFvREEsSUFBTVMsV0FBVyxHQUFHLEVBQXBCO0FBQ0EsSUFBTUMsS0FBSyxHQUFHLEVBQWQ7QUFFQSxlQUFlO0FBQ2J2QixFQUFBQSxTQUFTLEVBQVRBLFNBRGE7QUFFYnNCLEVBQUFBLFdBQVcsRUFBWEEsV0FGYTtBQUdiQyxFQUFBQSxLQUFLLEVBQUxBO0FBSGEsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJvcmRlclByb3BlcnR5KHRoZW1lLCB7IGJvcmRlciwgdmFsdWUgfSkge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoZW1lLmNvbG9ycy5ib3JkZXIsIHZhbHVlKSkge1xuICAgIHJldHVybiBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmJvcmRlclt2YWx1ZV19YFxuICB9XG5cbiAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGAxcHggc29saWQgJHt0aGVtZS5jb2xvcnMuYm9yZGVyLmRlZmF1bHR9YFxuICB9XG5cbiAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoZW1lLmNvbG9ycy5ib3JkZXIsIGJvcmRlcikpIHtcbiAgICByZXR1cm4gYDFweCBzb2xpZCAke3RoZW1lLmNvbG9ycy5ib3JkZXJbYm9yZGVyXX1gXG4gIH1cblxuICBpZiAoYm9yZGVyID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGAxcHggc29saWQgJHt0aGVtZS5jb2xvcnMuYm9yZGVyLmRlZmF1bHR9YFxuICB9XG5cbiAgcmV0dXJuIHZhbHVlIHx8IGJvcmRlclxufVxuXG5jb25zdCBiYXNlU3R5bGUgPSAodGhlbWUsIHByb3BzKSA9PiB7XG4gIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7fVxuICBpZiAodGhlbWUuc2hhZG93c1twcm9wcy5ob3ZlckVsZXZhdGlvbl0gfHwgdGhlbWUuc2hhZG93c1twcm9wcy5hY3RpdmVFbGV2YXRpb25dKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0cmFuc2l0aW9uU3R5bGVzLCB7XG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246ICcxNTBtcycsXG4gICAgICB0cmFuc2l0aW9uUHJvcGVydHk6ICdib3gtc2hhZG93LCB0cmFuc2Zvcm0nLFxuICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiAnY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpJ1xuICAgIH0pXG4gIH1cblxuICBsZXQgaG92ZXJTdHlsZXNcbiAgaWYgKHRoZW1lLnNoYWRvd3NbcHJvcHMuaG92ZXJFbGV2YXRpb25dKSB7XG4gICAgaG92ZXJTdHlsZXMgPSB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0ycHgpJyxcbiAgICAgIGJveFNoYWRvdzogYHNoYWRvd3MuJHtwcm9wcy5ob3ZlckVsZXZhdGlvbn1gXG4gICAgfVxuICB9XG5cbiAgbGV0IGFjdGl2ZVN0eWxlc1xuICBpZiAodGhlbWUuc2hhZG93c1twcm9wcy5hY3RpdmVFbGV2YXRpb25dKSB7XG4gICAgYWN0aXZlU3R5bGVzID0ge1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMXB4KScsXG4gICAgICBib3hTaGFkb3c6IGBzaGFkb3dzLiR7cHJvcHMuYWN0aXZlRWxldmF0aW9ufWBcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJhY2tncm91bmQ6IHRoZW1lLmNvbG9yc1twcm9wcy5iYWNrZ3JvdW5kXSB8fCBwcm9wcy5iYWNrZ3JvdW5kLFxuICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1twcm9wcy5lbGV2YXRpb25dLFxuICAgIGJvcmRlclRvcDogYm9yZGVyUHJvcGVydHkodGhlbWUsIHtcbiAgICAgIGJvcmRlcjogcHJvcHMuYm9yZGVyLFxuICAgICAgdmFsdWU6IHByb3BzLmJvcmRlclRvcFxuICAgIH0pLFxuICAgIGJvcmRlclJpZ2h0OiBib3JkZXJQcm9wZXJ0eSh0aGVtZSwge1xuICAgICAgYm9yZGVyOiBwcm9wcy5ib3JkZXIsXG4gICAgICB2YWx1ZTogcHJvcHMuYm9yZGVyUmlnaHRcbiAgICB9KSxcbiAgICBib3JkZXJCb3R0b206IGJvcmRlclByb3BlcnR5KHRoZW1lLCB7XG4gICAgICBib3JkZXI6IHByb3BzLmJvcmRlcixcbiAgICAgIHZhbHVlOiBwcm9wcy5ib3JkZXJCb3R0b21cbiAgICB9KSxcbiAgICBib3JkZXJMZWZ0OiBib3JkZXJQcm9wZXJ0eSh0aGVtZSwge1xuICAgICAgYm9yZGVyOiBwcm9wcy5ib3JkZXIsXG4gICAgICB2YWx1ZTogcHJvcHMuYm9yZGVyTGVmdFxuICAgIH0pLFxuXG4gICAgLi4udHJhbnNpdGlvblN0eWxlcyxcbiAgICBfaG92ZXI6IGhvdmVyU3R5bGVzLFxuICAgIF9hY3RpdmU6IGFjdGl2ZVN0eWxlc1xuICB9XG59XG5cbmNvbnN0IGFwcGVhcmFuY2VzID0ge31cbmNvbnN0IHNpemVzID0ge31cblxuZXhwb3J0IGRlZmF1bHQge1xuICBiYXNlU3R5bGUsXG4gIGFwcGVhcmFuY2VzLFxuICBzaXplc1xufVxuIl19