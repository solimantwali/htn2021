import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var baseStyle = {};
var appearances = {};
var textSizes = {
  300: {
    fontSize: 'fontSizes.1',
    fontWeight: 'fontWeights.normal',
    lineHeight: 'lineHeights.0',
    letterSpacing: 'letterSpacings.normal'
  },
  400: {
    fontSize: 'fontSizes.2',
    fontWeight: 'fontWeights.normal',
    lineHeight: 'lineHeights.2',
    letterSpacing: 'letterSpacings.tight'
  },
  500: {
    fontSize: 'fontSizes.3',
    fontWeight: 'fontWeights.normal',
    lineHeight: 'lineHeights.2',
    letterSpacing: 'letterSpacings.tight'
  },
  600: {
    fontSize: 'fontSizes.4',
    fontWeight: 'fontWeights.normal',
    lineHeight: 'lineHeights.3',
    letterSpacing: 'letterSpacings.tighter'
  }
};

var sizes = _objectSpread(_objectSpread({}, textSizes), {}, {
  small: textSizes['300'],
  medium: textSizes['400'],
  large: textSizes['500']
});

export default {
  baseStyle: baseStyle,
  appearances: appearances,
  sizes: sizes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvY2xhc3NpYy9jb21wb25lbnRzL3RleHQuanMiXSwibmFtZXMiOlsiYmFzZVN0eWxlIiwiYXBwZWFyYW5jZXMiLCJ0ZXh0U2l6ZXMiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsInNpemVzIiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTUEsU0FBUyxHQUFHLEVBQWxCO0FBRUEsSUFBTUMsV0FBVyxHQUFHLEVBQXBCO0FBRUEsSUFBTUMsU0FBUyxHQUFHO0FBQ2hCLE9BQUs7QUFDSEMsSUFBQUEsUUFBUSxFQUFFLGFBRFA7QUFFSEMsSUFBQUEsVUFBVSxFQUFFLG9CQUZUO0FBR0hDLElBQUFBLFVBQVUsRUFBRSxlQUhUO0FBSUhDLElBQUFBLGFBQWEsRUFBRTtBQUpaLEdBRFc7QUFPaEIsT0FBSztBQUNISCxJQUFBQSxRQUFRLEVBQUUsYUFEUDtBQUVIQyxJQUFBQSxVQUFVLEVBQUUsb0JBRlQ7QUFHSEMsSUFBQUEsVUFBVSxFQUFFLGVBSFQ7QUFJSEMsSUFBQUEsYUFBYSxFQUFFO0FBSlosR0FQVztBQWFoQixPQUFLO0FBQ0hILElBQUFBLFFBQVEsRUFBRSxhQURQO0FBRUhDLElBQUFBLFVBQVUsRUFBRSxvQkFGVDtBQUdIQyxJQUFBQSxVQUFVLEVBQUUsZUFIVDtBQUlIQyxJQUFBQSxhQUFhLEVBQUU7QUFKWixHQWJXO0FBbUJoQixPQUFLO0FBQ0hILElBQUFBLFFBQVEsRUFBRSxhQURQO0FBRUhDLElBQUFBLFVBQVUsRUFBRSxvQkFGVDtBQUdIQyxJQUFBQSxVQUFVLEVBQUUsZUFIVDtBQUlIQyxJQUFBQSxhQUFhLEVBQUU7QUFKWjtBQW5CVyxDQUFsQjs7QUEyQkEsSUFBTUMsS0FBSyxtQ0FDTkwsU0FETTtBQUVUTSxFQUFBQSxLQUFLLEVBQUVOLFNBQVMsQ0FBQyxLQUFELENBRlA7QUFHVE8sRUFBQUEsTUFBTSxFQUFFUCxTQUFTLENBQUMsS0FBRCxDQUhSO0FBSVRRLEVBQUFBLEtBQUssRUFBRVIsU0FBUyxDQUFDLEtBQUQ7QUFKUCxFQUFYOztBQU9BLGVBQWU7QUFDYkYsRUFBQUEsU0FBUyxFQUFUQSxTQURhO0FBRWJDLEVBQUFBLFdBQVcsRUFBWEEsV0FGYTtBQUdiTSxFQUFBQSxLQUFLLEVBQUxBO0FBSGEsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJhc2VTdHlsZSA9IHt9XG5cbmNvbnN0IGFwcGVhcmFuY2VzID0ge31cblxuY29uc3QgdGV4dFNpemVzID0ge1xuICAzMDA6IHtcbiAgICBmb250U2l6ZTogJ2ZvbnRTaXplcy4xJyxcbiAgICBmb250V2VpZ2h0OiAnZm9udFdlaWdodHMubm9ybWFsJyxcbiAgICBsaW5lSGVpZ2h0OiAnbGluZUhlaWdodHMuMCcsXG4gICAgbGV0dGVyU3BhY2luZzogJ2xldHRlclNwYWNpbmdzLm5vcm1hbCdcbiAgfSxcbiAgNDAwOiB7XG4gICAgZm9udFNpemU6ICdmb250U2l6ZXMuMicsXG4gICAgZm9udFdlaWdodDogJ2ZvbnRXZWlnaHRzLm5vcm1hbCcsXG4gICAgbGluZUhlaWdodDogJ2xpbmVIZWlnaHRzLjInLFxuICAgIGxldHRlclNwYWNpbmc6ICdsZXR0ZXJTcGFjaW5ncy50aWdodCdcbiAgfSxcbiAgNTAwOiB7XG4gICAgZm9udFNpemU6ICdmb250U2l6ZXMuMycsXG4gICAgZm9udFdlaWdodDogJ2ZvbnRXZWlnaHRzLm5vcm1hbCcsXG4gICAgbGluZUhlaWdodDogJ2xpbmVIZWlnaHRzLjInLFxuICAgIGxldHRlclNwYWNpbmc6ICdsZXR0ZXJTcGFjaW5ncy50aWdodCdcbiAgfSxcbiAgNjAwOiB7XG4gICAgZm9udFNpemU6ICdmb250U2l6ZXMuNCcsXG4gICAgZm9udFdlaWdodDogJ2ZvbnRXZWlnaHRzLm5vcm1hbCcsXG4gICAgbGluZUhlaWdodDogJ2xpbmVIZWlnaHRzLjMnLFxuICAgIGxldHRlclNwYWNpbmc6ICdsZXR0ZXJTcGFjaW5ncy50aWdodGVyJ1xuICB9XG59XG5cbmNvbnN0IHNpemVzID0ge1xuICAuLi50ZXh0U2l6ZXMsXG4gIHNtYWxsOiB0ZXh0U2l6ZXNbJzMwMCddLFxuICBtZWRpdW06IHRleHRTaXplc1snNDAwJ10sXG4gIGxhcmdlOiB0ZXh0U2l6ZXNbJzUwMCddXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYmFzZVN0eWxlLFxuICBhcHBlYXJhbmNlcyxcbiAgc2l6ZXNcbn1cbiJdfQ==