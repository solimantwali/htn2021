import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["size", "label", "defaultValue", "value", "options", "onChange", "isRequired"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { spacing, position, layout, dimensions } from 'ui-box';
import { useId } from '../../hooks';
import { Pane } from '../../layers';
import { Text } from '../../typography';
import Radio from './Radio';

var noop = function noop() {};

var emptyArray = [];
var RadioGroup = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function RadioGroup(props, ref) {
  var _props$size = props.size,
      size = _props$size === void 0 ? 12 : _props$size,
      label = props.label,
      defaultValue = props.defaultValue,
      value = props.value,
      _props$options = props.options,
      options = _props$options === void 0 ? emptyArray : _props$options,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      _props$isRequired = props.isRequired,
      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
      rest = _objectWithoutProperties(props, _excluded);

  var name = useId('RadioGroup');
  var selected = value || defaultValue || props.options[0].value;
  return /*#__PURE__*/React.createElement(Pane, _extends({
    role: "group",
    "aria-label": label
  }, rest, {
    ref: ref
  }), label && /*#__PURE__*/React.createElement(Text, {
    color: "muted",
    fontWeight: 500
  }, label), options.map(function (item) {
    return /*#__PURE__*/React.createElement(Radio, {
      key: item.value,
      size: size,
      name: name,
      value: item.value,
      label: item.label,
      checked: selected === item.value,
      disabled: item.isDisabled,
      onChange: onChange,
      isRequired: isRequired
    });
  }));
}));
RadioGroup.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {
  /**
   * The options for the radios of the Radio Group.
   */
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.node.isRequired,
    value: PropTypes.string.isRequired,
    isDisabled: PropTypes.bool
  })).isRequired,

  /**
   * The selected item value when controlled.
   */
  value: PropTypes.string,

  /**
   * The default value of the Radio Group when uncontrolled.
   */
  defaultValue: PropTypes.string,

  /**
   * Function called when state changes.
   */
  onChange: PropTypes.func,

  /**
   * Label to display above the radio button options.
   */
  label: PropTypes.string,

  /**
   * The size of the radio circle. This also informs the text size and spacing.
   */
  size: PropTypes.oneOf([12, 16]),

  /**
   * When true, the radio get the required attribute.
   */
  isRequired: PropTypes.bool
});
export default RadioGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yYWRpby9zcmMvUmFkaW9Hcm91cC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIm1lbW8iLCJmb3J3YXJkUmVmIiwiUHJvcFR5cGVzIiwic3BhY2luZyIsInBvc2l0aW9uIiwibGF5b3V0IiwiZGltZW5zaW9ucyIsInVzZUlkIiwiUGFuZSIsIlRleHQiLCJSYWRpbyIsIm5vb3AiLCJlbXB0eUFycmF5IiwiUmFkaW9Hcm91cCIsInByb3BzIiwicmVmIiwic2l6ZSIsImxhYmVsIiwiZGVmYXVsdFZhbHVlIiwidmFsdWUiLCJvcHRpb25zIiwib25DaGFuZ2UiLCJpc1JlcXVpcmVkIiwicmVzdCIsIm5hbWUiLCJzZWxlY3RlZCIsIm1hcCIsIml0ZW0iLCJpc0Rpc2FibGVkIiwicHJvcFR5cGVzIiwiYXJyYXlPZiIsInNoYXBlIiwibm9kZSIsInN0cmluZyIsImJvb2wiLCJmdW5jIiwib25lT2YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxVQUF0QixRQUF3QyxPQUF4QztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxPQUFULEVBQWtCQyxRQUFsQixFQUE0QkMsTUFBNUIsRUFBb0NDLFVBQXBDLFFBQXNELFFBQXREO0FBQ0EsU0FBU0MsS0FBVCxRQUFzQixhQUF0QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsY0FBckI7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGtCQUFyQjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsU0FBbEI7O0FBRUEsSUFBTUMsSUFBSSxHQUFHLFNBQVBBLElBQU8sR0FBTSxDQUFFLENBQXJCOztBQUNBLElBQU1DLFVBQVUsR0FBRyxFQUFuQjtBQUVBLElBQU1DLFVBQVUsZ0JBQUdiLElBQUksZUFDckJDLFVBQVUsQ0FBQyxTQUFTWSxVQUFULENBQW9CQyxLQUFwQixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDekMsb0JBU0lELEtBVEosQ0FDRUUsSUFE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O0FBQ0Y7QUFDQTtBQUNFZCxFQUFBQSxVQUFVLEVBQUVwQixTQUFTLENBQUNnQztBQWhEeEI7QUFtREEsZUFBZXJCLFVBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgc3BhY2luZywgcG9zaXRpb24sIGxheW91dCwgZGltZW5zaW9ucyB9IGZyb20gJ3VpLWJveCdcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5pbXBvcnQgeyBQYW5lIH0gZnJvbSAnLi4vLi4vbGF5ZXJzJ1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3R5cG9ncmFwaHknXG5pbXBvcnQgUmFkaW8gZnJvbSAnLi9SYWRpbydcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5jb25zdCBlbXB0eUFycmF5ID0gW11cblxuY29uc3QgUmFkaW9Hcm91cCA9IG1lbW8oXG4gIGZvcndhcmRSZWYoZnVuY3Rpb24gUmFkaW9Hcm91cChwcm9wcywgcmVmKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZSA9IDEyLFxuICAgICAgbGFiZWwsXG4gICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIG9wdGlvbnMgPSBlbXB0eUFycmF5LFxuICAgICAgb25DaGFuZ2UgPSBub29wLFxuICAgICAgaXNSZXF1aXJlZCA9IGZhbHNlLFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSBwcm9wc1xuXG4gICAgY29uc3QgbmFtZSA9IHVzZUlkKCdSYWRpb0dyb3VwJylcbiAgICBjb25zdCBzZWxlY3RlZCA9IHZhbHVlIHx8IGRlZmF1bHRWYWx1ZSB8fCBwcm9wcy5vcHRpb25zWzBdLnZhbHVlXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhbmUgcm9sZT1cImdyb3VwXCIgYXJpYS1sYWJlbD17bGFiZWx9IHsuLi5yZXN0fSByZWY9e3JlZn0+XG4gICAgICAgIHtsYWJlbCAmJiAoXG4gICAgICAgICAgPFRleHQgY29sb3I9XCJtdXRlZFwiIGZvbnRXZWlnaHQ9ezUwMH0+XG4gICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApfVxuICAgICAgICB7b3B0aW9ucy5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgPFJhZGlvXG4gICAgICAgICAgICBrZXk9e2l0ZW0udmFsdWV9XG4gICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICAgIHZhbHVlPXtpdGVtLnZhbHVlfVxuICAgICAgICAgICAgbGFiZWw9e2l0ZW0ubGFiZWx9XG4gICAgICAgICAgICBjaGVja2VkPXtzZWxlY3RlZCA9PT0gaXRlbS52YWx1ZX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtpdGVtLmlzRGlzYWJsZWR9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICBpc1JlcXVpcmVkPXtpc1JlcXVpcmVkfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9QYW5lPlxuICAgIClcbiAgfSlcbilcblxuUmFkaW9Hcm91cC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDb21wb3NlcyBzb21lIEJveCBBUElzLlxuICAgKi9cbiAgLi4uc3BhY2luZy5wcm9wVHlwZXMsXG4gIC4uLnBvc2l0aW9uLnByb3BUeXBlcyxcbiAgLi4ubGF5b3V0LnByb3BUeXBlcyxcbiAgLi4uZGltZW5zaW9ucy5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb25zIGZvciB0aGUgcmFkaW9zIG9mIHRoZSBSYWRpbyBHcm91cC5cbiAgICovXG4gIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBpc0Rpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxuICAgIH0pXG4gICkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHNlbGVjdGVkIGl0ZW0gdmFsdWUgd2hlbiBjb250cm9sbGVkLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBSYWRpbyBHcm91cCB3aGVuIHVuY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogRnVuY3Rpb24gY2FsbGVkIHdoZW4gc3RhdGUgY2hhbmdlcy5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogTGFiZWwgdG8gZGlzcGxheSBhYm92ZSB0aGUgcmFkaW8gYnV0dG9uIG9wdGlvbnMuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHJhZGlvIGNpcmNsZS4gVGhpcyBhbHNvIGluZm9ybXMgdGhlIHRleHQgc2l6ZSBhbmQgc3BhY2luZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbMTIsIDE2XSksXG5cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHJhZGlvIGdldCB0aGUgcmVxdWlyZWQgYXR0cmlidXRlLlxuICAgKi9cbiAgaXNSZXF1aXJlZDogUHJvcFR5cGVzLmJvb2xcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFkaW9Hcm91cFxuIl19