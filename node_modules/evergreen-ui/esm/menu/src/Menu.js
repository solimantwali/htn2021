import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React, { memo, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { Pane } from '../../layers';
import MenuDivider from './MenuDivider';
import MenuGroup from './MenuGroup';
import MenuItem from './MenuItem';
import MenuOption from './MenuOption';
import MenuOptionsGroup from './MenuOptionsGroup';
var Menu = /*#__PURE__*/memo(function Menu(props) {
  var menuRef = useRef(null);
  var firstItem = useRef();
  var lastItem = useRef();
  var menuItems = useRef();
  useEffect(function () {
    var currentMenuRef = menuRef.current;
    menuItems.current = currentMenuRef ? _toConsumableArray(currentMenuRef.querySelectorAll('[role="menuitemradio"]:not([disabled]), [role="menuitem"]:not([disabled])')) : [];

    if (menuItems.current.length === 0) {
      throw new Error('The menu has no menu items');
    }

    firstItem.current = menuItems.current[0];
    lastItem.current = menuItems.current[menuItems.current.length - 1]; // Go to next/previous item if it exists
    // or loop around

    var focusNext = function focusNext(currentItem, startItem) {
      // Determine which item is the startItem (first or last)
      var goingDown = startItem === firstItem.current; // Helper function for getting next legitimate element

      var move = function move(elem) {
        var indexOfItem = menuItems.current.indexOf(elem);

        if (goingDown) {
          if (indexOfItem < menuItems.current.length - 1) {
            return menuItems.current[indexOfItem + 1];
          }

          return startItem;
        }

        if (indexOfItem - 1 > -1) {
          return menuItems.current[indexOfItem - 1];
        }

        return startItem;
      }; // Make first move


      var nextItem = move(currentItem); // Focus the first one that's not disabled

      nextItem.focus();
    };

    function onKeyPressListener(e) {
      var target = e.target;
      var menuItem = menuItems.current && menuItems.current.find(function (item) {
        return item === target;
      });

      if (!menuItem) {
        return;
      }

      if (e.key === 'ArrowDown') {
        e.preventDefault();
        focusNext(menuItem, firstItem.current);
      }

      if (e.key === 'ArrowUp') {
        e.preventDefault();
        focusNext(menuItem, lastItem.current);
      }

      if (e.key === 'Home') {
        e.preventDefault();
        firstItem.current.focus();
      }

      if (e.key === 'End') {
        e.preventDefault();
        lastItem.current.focus();
      }
    }

    currentMenuRef.addEventListener('keydown', onKeyPressListener);
    return function () {
      currentMenuRef.removeEventListener('keydown', onKeyPressListener);
    };
  }, [menuRef]);
  var children = props.children;
  return /*#__PURE__*/React.createElement(Pane, {
    is: "nav",
    ref: menuRef,
    role: "menu",
    outline: "none"
  }, children);
});
Menu.Item = MenuItem;
Menu.Divider = MenuDivider;
Menu.Group = MenuGroup;
Menu.Divider = MenuDivider;
Menu.Group = MenuGroup;
Menu.Option = MenuOption;
Menu.OptionsGroup = MenuOptionsGroup;
Menu.propTypes = {
  /**
   * The children of the component.
   */
  children: PropTypes.node
};
export default Menu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tZW51L3NyYy9NZW51LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsInVzZUVmZmVjdCIsInVzZVJlZiIsIlByb3BUeXBlcyIsIlBhbmUiLCJNZW51RGl2aWRlciIsIk1lbnVHcm91cCIsIk1lbnVJdGVtIiwiTWVudU9wdGlvbiIsIk1lbnVPcHRpb25zR3JvdXAiLCJNZW51IiwicHJvcHMiLCJtZW51UmVmIiwiZmlyc3RJdGVtIiwibGFzdEl0ZW0iLCJtZW51SXRlbXMiLCJjdXJyZW50TWVudVJlZiIsImN1cnJlbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiRXJyb3IiLCJmb2N1c05leHQiLCJjdXJyZW50SXRlbSIsInN0YXJ0SXRlbSIsImdvaW5nRG93biIsIm1vdmUiLCJlbGVtIiwiaW5kZXhPZkl0ZW0iLCJpbmRleE9mIiwibmV4dEl0ZW0iLCJmb2N1cyIsIm9uS2V5UHJlc3NMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJtZW51SXRlbSIsImZpbmQiLCJpdGVtIiwia2V5IiwicHJldmVudERlZmF1bHQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNoaWxkcmVuIiwiSXRlbSIsIkRpdmlkZXIiLCJHcm91cCIsIk9wdGlvbiIsIk9wdGlvbnNHcm91cCIsInByb3BUeXBlcyIsIm5vZGUiXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxJQUFoQixFQUFzQkMsU0FBdEIsRUFBaUNDLE1BQWpDLFFBQStDLE9BQS9DO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsY0FBckI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGVBQXhCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0QjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsWUFBckI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLGNBQXZCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsb0JBQTdC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QUFkO0FBQ0FFLElBQUksQ0FBQ29DLFlBQUwsR0FBb0JyQyxnQkFBcEI7QUFFQUMsSUFBSSxDQUFDcUMsU0FBTCxHQUFpQjtBQUNmO0FBQ0Y7QUFDQTtBQUNFTixFQUFBQSxRQUFRLEVBQUV0QyxTQUFTLENBQUM2QztBQUpMLENBQWpCO0FBT0EsZUFBZXRDLElBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgTWVudURpdmlkZXIgZnJvbSAnLi9NZW51RGl2aWRlcidcbmltcG9ydCBNZW51R3JvdXAgZnJvbSAnLi9NZW51R3JvdXAnXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnLi9NZW51SXRlbSdcbmltcG9ydCBNZW51T3B0aW9uIGZyb20gJy4vTWVudU9wdGlvbidcbmltcG9ydCBNZW51T3B0aW9uc0dyb3VwIGZyb20gJy4vTWVudU9wdGlvbnNHcm91cCdcblxuY29uc3QgTWVudSA9IG1lbW8oZnVuY3Rpb24gTWVudShwcm9wcykge1xuICBjb25zdCBtZW51UmVmID0gdXNlUmVmKG51bGwpXG4gIGNvbnN0IGZpcnN0SXRlbSA9IHVzZVJlZigpXG4gIGNvbnN0IGxhc3RJdGVtID0gdXNlUmVmKClcblxuICBjb25zdCBtZW51SXRlbXMgPSB1c2VSZWYoKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudE1lbnVSZWYgPSBtZW51UmVmLmN1cnJlbnRcblxuICAgIG1lbnVJdGVtcy5jdXJyZW50ID0gY3VycmVudE1lbnVSZWZcbiAgICAgID8gW1xuICAgICAgICAgIC4uLmN1cnJlbnRNZW51UmVmLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAnW3JvbGU9XCJtZW51aXRlbXJhZGlvXCJdOm5vdChbZGlzYWJsZWRdKSwgW3JvbGU9XCJtZW51aXRlbVwiXTpub3QoW2Rpc2FibGVkXSknXG4gICAgICAgICAgKVxuICAgICAgICBdXG4gICAgICA6IFtdXG5cbiAgICBpZiAobWVudUl0ZW1zLmN1cnJlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtZW51IGhhcyBubyBtZW51IGl0ZW1zJylcbiAgICB9XG5cbiAgICBmaXJzdEl0ZW0uY3VycmVudCA9IG1lbnVJdGVtcy5jdXJyZW50WzBdXG4gICAgbGFzdEl0ZW0uY3VycmVudCA9IG1lbnVJdGVtcy5jdXJyZW50W21lbnVJdGVtcy5jdXJyZW50Lmxlbmd0aCAtIDFdXG5cbiAgICAvLyBHbyB0byBuZXh0L3ByZXZpb3VzIGl0ZW0gaWYgaXQgZXhpc3RzXG4gICAgLy8gb3IgbG9vcCBhcm91bmRcbiAgICBjb25zdCBmb2N1c05leHQgPSAoY3VycmVudEl0ZW0sIHN0YXJ0SXRlbSkgPT4ge1xuICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGl0ZW0gaXMgdGhlIHN0YXJ0SXRlbSAoZmlyc3Qgb3IgbGFzdClcbiAgICAgIGNvbnN0IGdvaW5nRG93biA9IHN0YXJ0SXRlbSA9PT0gZmlyc3RJdGVtLmN1cnJlbnRcblxuICAgICAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIG5leHQgbGVnaXRpbWF0ZSBlbGVtZW50XG4gICAgICBjb25zdCBtb3ZlID0gZWxlbSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4T2ZJdGVtID0gbWVudUl0ZW1zLmN1cnJlbnQuaW5kZXhPZihlbGVtKVxuXG4gICAgICAgIGlmIChnb2luZ0Rvd24pIHtcbiAgICAgICAgICBpZiAoaW5kZXhPZkl0ZW0gPCBtZW51SXRlbXMuY3VycmVudC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVudUl0ZW1zLmN1cnJlbnRbaW5kZXhPZkl0ZW0gKyAxXVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdGFydEl0ZW1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleE9mSXRlbSAtIDEgPiAtMSkge1xuICAgICAgICAgIHJldHVybiBtZW51SXRlbXMuY3VycmVudFtpbmRleE9mSXRlbSAtIDFdXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhcnRJdGVtXG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2UgZmlyc3QgbW92ZVxuICAgICAgY29uc3QgbmV4dEl0ZW0gPSBtb3ZlKGN1cnJlbnRJdGVtKVxuXG4gICAgICAvLyBGb2N1cyB0aGUgZmlyc3Qgb25lIHRoYXQncyBub3QgZGlzYWJsZWRcbiAgICAgIG5leHRJdGVtLmZvY3VzKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbktleVByZXNzTGlzdGVuZXIoZSkge1xuICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGVcbiAgICAgIGNvbnN0IG1lbnVJdGVtID0gbWVudUl0ZW1zLmN1cnJlbnQgJiYgbWVudUl0ZW1zLmN1cnJlbnQuZmluZChpdGVtID0+IGl0ZW0gPT09IHRhcmdldClcblxuICAgICAgaWYgKCFtZW51SXRlbSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgZm9jdXNOZXh0KG1lbnVJdGVtLCBmaXJzdEl0ZW0uY3VycmVudClcbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGZvY3VzTmV4dChtZW51SXRlbSwgbGFzdEl0ZW0uY3VycmVudClcbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5ID09PSAnSG9tZScpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGZpcnN0SXRlbS5jdXJyZW50LmZvY3VzKClcbiAgICAgIH1cblxuICAgICAgaWYgKGUua2V5ID09PSAnRW5kJykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgbGFzdEl0ZW0uY3VycmVudC5mb2N1cygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY3VycmVudE1lbnVSZWYuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5UHJlc3NMaXN0ZW5lcilcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjdXJyZW50TWVudVJlZi5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlQcmVzc0xpc3RlbmVyKVxuICAgIH1cbiAgfSwgW21lbnVSZWZdKVxuXG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPFBhbmUgaXM9XCJuYXZcIiByZWY9e21lbnVSZWZ9IHJvbGU9XCJtZW51XCIgb3V0bGluZT1cIm5vbmVcIj5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1BhbmU+XG4gIClcbn0pXG5cbk1lbnUuSXRlbSA9IE1lbnVJdGVtXG5NZW51LkRpdmlkZXIgPSBNZW51RGl2aWRlclxuTWVudS5Hcm91cCA9IE1lbnVHcm91cFxuTWVudS5EaXZpZGVyID0gTWVudURpdmlkZXJcbk1lbnUuR3JvdXAgPSBNZW51R3JvdXBcbk1lbnUuT3B0aW9uID0gTWVudU9wdGlvblxuTWVudS5PcHRpb25zR3JvdXAgPSBNZW51T3B0aW9uc0dyb3VwXG5cbk1lbnUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVudVxuIl19