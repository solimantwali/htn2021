import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { Pane } from '../../layers';
import { Heading } from '../../typography';
import MenuOption from './MenuOption';
var MenuOptionsGroup = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function MenuOptionsGroup(props, ref) {
  var onChange = props.onChange,
      options = props.options,
      selected = props.selected,
      title = props.title;
  return /*#__PURE__*/React.createElement(Pane, {
    ref: ref,
    paddingY: 8
  }, title && /*#__PURE__*/React.createElement(Heading, {
    size: 100,
    marginLeft: 44,
    marginRight: 16,
    marginY: 8
  }, title), /*#__PURE__*/React.createElement(Pane, null, options.map(function (option) {
    return /*#__PURE__*/React.createElement(MenuOption, {
      key: option.value,
      isSelected: option.value === selected,
      onSelect: function onSelect() {
        return onChange(option.value);
      }
    }, option.label);
  })));
}));
MenuOptionsGroup.propTypes = {
  /**
   * Title of the menu group.
   */
  title: PropTypes.node,

  /**
   * The current value of the option group.
   */
  selected: PropTypes.any,

  /**
   * Function called when selection changes.
   */
  onChange: PropTypes.func,

  /**
   * List of options rendered in the group.
   */
  options: PropTypes.array
};
export default MenuOptionsGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tZW51L3NyYy9NZW51T3B0aW9uc0dyb3VwLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsImZvcndhcmRSZWYiLCJQcm9wVHlwZXMiLCJQYW5lIiwiSGVhZGluZyIsIk1lbnVPcHRpb24iLCJNZW51T3B0aW9uc0dyb3VwIiwicHJvcHMiLCJyZWYiLCJvbkNoYW5nZSIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsInRpdGxlIiwibWFwIiwib3B0aW9uIiwidmFsdWUiLCJsYWJlbCIsInByb3BUeXBlcyIsIm5vZGUiLCJhbnkiLCJmdW5jIiwiYXJyYXkiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxVQUF0QixRQUF3QyxPQUF4QztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGNBQXJCO0FBQ0EsU0FBU0MsT0FBVCxRQUF3QixrQkFBeEI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLGNBQXZCO0FBRUEsSUFBTUMsZ0JBQWdCLGdCQUFHTixJQUFJLGVBQzNCQyxVQUFVLENBQUMsU0FBU0ssZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDQyxHQUFqQyxFQUFzQztBQUMvQyxNQUFRQyxRQUFSLEdBQStDRixLQUEvQyxDQUFRRSxRQUFSO0FBQUEsTUFBa0JDLE9BQWxCLEdBQStDSCxLQUEvQyxDQUFrQkcsT0FBbEI7QUFBQSxNQUEyQkMsUUFBM0IsR0FBK0NKLEtBQS9DLENBQTJCSSxRQUEzQjtBQUFBLE1BQXFDQyxLQUFyQyxHQUErQ0wsS0FBL0MsQ0FBcUNLLEtBQXJDO0FBRUEsc0JBQ0Usb0JBQUMsSUFBRDtBQUFNLElBQUEsR0FBRyxFQUFFSixHQUFYO0FBQWdCLElBQUEsUUFBUSxFQUFFO0FBQTFCLEtBQ0dJLEtBQUssaUJBQ0osb0JBQUMsT0FBRDtBQUFTLElBQUEsSUFBSSxFQUFFLEdBQWY7QUFBb0IsSUFBQSxVQUFVLEVBQUUsRUFBaEM7QUFBb0MsSUFBQSxXQUFXLEVBQUUsRUFBakQ7QUFBcUQsSUFBQSxPQUFPLEVBQUU7QUFBOUQsS0FDR0EsS0FESCxDQUZKLGVBTUUsb0JBQUMsSUFBRCxRQUNHRixPQUFPLENBQUNHLEdBQVIsQ0FBWSxVQUFBQyxNQUFNLEVBQUk7QUFDckIsd0JBQ0Usb0JBQUMsVUFBRDtBQUNFLE1BQUEsR0FBRyxFQUFFQSxNQUFNLENBQUNDLEtBRGQ7QUFFRSxNQUFBLFVBQVUsRUFBRUQsTUFBTSxDQUFDQyxLQUFQLEtBQWlCSixRQUYvQjtBQUdFLE1BQUEsUUFBUSxFQUFFO0FBQUEsZUFBTUYsUUFBUSxDQUFDSyxNQUFNLENBQUNDLEtBQVIsQ0FBZDtBQUFBO0FBSFosT0FLR0QsTUFBTSxDQUFDRSxLQUxWLENBREY7QUFTRCxHQVZBLENBREgsQ0FORixDQURGO0FBc0JELENBekJTLENBRGlCLENBQTdCO0FBNkJBVixnQkFBZ0IsQ0FBQ1csU0FBakIsR0FBNkI7QUFDM0I7QUFDRjtBQUNBO0FBQ0VMLEVBQUFBLEtBQUssRUFBRVYsU0FBUyxDQUFDZ0IsSUFKVTs7QUFNM0I7QUFDRjtBQUNBO0FBQ0VQLEVBQUFBLFFBQVEsRUFBRVQsU0FBUyxDQUFDaUIsR0FUTzs7QUFXM0I7QUFDRjtBQUNBO0FBQ0VWLEVBQUFBLFFBQVEsRUFBRVAsU0FBUyxDQUFDa0IsSUFkTzs7QUFnQjNCO0FBQ0Y7QUFDQTtBQUNFVixFQUFBQSxPQUFPLEVBQUVSLFNBQVMsQ0FBQ21CO0FBbkJRLENBQTdCO0FBc0JBLGVBQWVmLGdCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgeyBIZWFkaW5nIH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCBNZW51T3B0aW9uIGZyb20gJy4vTWVudU9wdGlvbidcblxuY29uc3QgTWVudU9wdGlvbnNHcm91cCA9IG1lbW8oXG4gIGZvcndhcmRSZWYoZnVuY3Rpb24gTWVudU9wdGlvbnNHcm91cChwcm9wcywgcmVmKSB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgb3B0aW9ucywgc2VsZWN0ZWQsIHRpdGxlIH0gPSBwcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lIHJlZj17cmVmfSBwYWRkaW5nWT17OH0+XG4gICAgICAgIHt0aXRsZSAmJiAoXG4gICAgICAgICAgPEhlYWRpbmcgc2l6ZT17MTAwfSBtYXJnaW5MZWZ0PXs0NH0gbWFyZ2luUmlnaHQ9ezE2fSBtYXJnaW5ZPXs4fT5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L0hlYWRpbmc+XG4gICAgICAgICl9XG4gICAgICAgIDxQYW5lPlxuICAgICAgICAgIHtvcHRpb25zLm1hcChvcHRpb24gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPE1lbnVPcHRpb25cbiAgICAgICAgICAgICAgICBrZXk9e29wdGlvbi52YWx1ZX1cbiAgICAgICAgICAgICAgICBpc1NlbGVjdGVkPXtvcHRpb24udmFsdWUgPT09IHNlbGVjdGVkfVxuICAgICAgICAgICAgICAgIG9uU2VsZWN0PXsoKSA9PiBvbkNoYW5nZShvcHRpb24udmFsdWUpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge29wdGlvbi5sYWJlbH1cbiAgICAgICAgICAgICAgPC9NZW51T3B0aW9uPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pfVxuICAgICAgICA8L1BhbmU+XG4gICAgICA8L1BhbmU+XG4gICAgKVxuICB9KVxuKVxuXG5NZW51T3B0aW9uc0dyb3VwLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRpdGxlIG9mIHRoZSBtZW51IGdyb3VwLlxuICAgKi9cbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgb3B0aW9uIGdyb3VwLlxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHNlbGVjdGlvbiBjaGFuZ2VzLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG9wdGlvbnMgcmVuZGVyZWQgaW4gdGhlIGdyb3VwLlxuICAgKi9cbiAgb3B0aW9uczogUHJvcFR5cGVzLmFycmF5XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lbnVPcHRpb25zR3JvdXBcbiJdfQ==