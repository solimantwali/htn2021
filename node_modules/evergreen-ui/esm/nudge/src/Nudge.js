import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _POSITION_KEYS;

import React, { memo } from 'react';
import { css } from 'glamor';
import PropTypes from 'prop-types';
import Positions from '../../constants/src/Position';
import { Pane } from '../../layers';
import { majorScale } from '../../scales';
import { useTheme } from '../../theme';
import { Tooltip } from '../../tooltip';
var pulseAnimation = css.keyframes('pulseAnimation', {
  '0%': {
    transform: 'scale(1)'
  },
  '50%': {
    transform: 'scale(1.9)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
var animationTiming = 'cubic-bezier(0, 0, 0.58, 1)';
var animationDuration = '1.8s';
var pulsarAnimationClassName = css({
  animation: "".concat(pulseAnimation, " ").concat(animationDuration, " ").concat(animationTiming, " both infinite")
}).toString();
var POSITION_KEYS = (_POSITION_KEYS = {}, _defineProperty(_POSITION_KEYS, Positions.TOP_LEFT, ['top', 'left']), _defineProperty(_POSITION_KEYS, Positions.TOP_RIGHT, ['top', 'right']), _defineProperty(_POSITION_KEYS, Positions.BOTTOM_LEFT, ['bottom', 'left']), _defineProperty(_POSITION_KEYS, Positions.BOTTOM_RIGHT, ['bottom', 'right']), _POSITION_KEYS);

var getPositionProps = function getPositionProps(_ref) {
  var position = _ref.position,
      size = _ref.size;
  var keys = POSITION_KEYS[position];
  var props = {};
  keys.forEach(function (key) {
    var isYAxisKey = key === 'top' || key === 'bottom';

    if (isYAxisKey) {
      props[key] = -(size / 2);
    } else {
      props[key] = -size;
    }
  });
  return props;
};

export var Pulsar = /*#__PURE__*/memo(function (_ref2) {
  var _ref2$position = _ref2.position,
      position = _ref2$position === void 0 ? Positions.TOP_RIGHT : _ref2$position,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? majorScale(1) : _ref2$size;

  var _useTheme = useTheme(),
      colors = _useTheme.colors;

  var positionProps = getPositionProps({
    position: position,
    size: size
  });
  var outerPadding = size * 0.25;
  return /*#__PURE__*/React.createElement(Pane, _extends({
    position: "absolute",
    borderRadius: "50%",
    backgroundColor: colors.blue100,
    boxSizing: "content-box",
    opacity: 0.7,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: outerPadding,
    className: pulsarAnimationClassName
  }, positionProps), /*#__PURE__*/React.createElement(Pane, {
    width: size,
    height: size,
    backgroundColor: colors.blue200,
    borderRadius: "50%",
    opacity: 0.7
  }));
});
Pulsar.propTypes = {
  /**
   * The position of the pulsar
   */
  position: PropTypes.oneOf([Positions.TOP_LEFT, Positions.TOP_RIGHT, Positions.BOTTOM_LEFT, Positions.BOTTOM_RIGHT]),

  /**
   * The width/height of the dot
   */
  size: PropTypes.number
};
export var Nudge = function Nudge(_ref3) {
  var children = _ref3.children,
      _ref3$isShown = _ref3.isShown,
      isShown = _ref3$isShown === void 0 ? false : _ref3$isShown,
      _ref3$position = _ref3.position,
      position = _ref3$position === void 0 ? Positions.TOP_RIGHT : _ref3$position,
      size = _ref3.size,
      tooltipContent = _ref3.tooltipContent;
  return /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltipContent,
    position: position,
    isShown: isShown ? undefined : false
  }, /*#__PURE__*/React.createElement(Pane, {
    position: "relative"
  }, isShown && /*#__PURE__*/React.createElement(Pulsar, {
    position: position,
    size: size
  }), children));
};
Nudge.displayName = "Nudge";
Nudge.propTypes = {
  /**
   * The position for the Puslar and the Tooltip
   */
  position: PropTypes.oneOf([Positions.TOP_LEFT, Positions.TOP_RIGHT, Positions.BOTTOM_LEFT, Positions.BOTTOM_RIGHT]),

  /**
   * Size of the Pulsar
   */
  size: Pulsar.propTypes.size,

  /**
   * Wether or not the Pulsar/Tooltip is shown
   */
  isShown: PropTypes.bool,

  /**
   * Content for the tooltip
   */
  tooltipContent: Tooltip.propTypes.content,

  /**
   * Content for the pulsar/tooltip to be anchored too
   */
  children: PropTypes.node
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,