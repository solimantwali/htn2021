import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["defaultValue", "disabled", "height", "name", "onChange", "options", "size", "value"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef, useState, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import { spacing, position, layout, dimensions } from 'ui-box';
import { Button } from '../../buttons';
import { Group } from '../../group';
import { useId } from '../../hooks';
import safeInvoke from '../../lib/safe-invoke';
import warning from '../../lib/warning';

function isControlled(value) {
  return typeof value !== 'undefined' && value !== null;
}

var SegmentedControl = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function SegmentedControl(props, ref) {
  var defaultValue = props.defaultValue,
      disabled = props.disabled,
      height = props.height,
      name = props.name,
      onChange = props.onChange,
      options = props.options,
      size = props.size,
      value = props.value,
      rest = _objectWithoutProperties(props, _excluded);

  var groupName = useId('SegmentedControl');

  if (process.env.NODE_ENV !== 'production') {
    warning(true, '<SegmentedControl> is deprecated and will be removed in the next major verison of Evergreen. Prefer Tabs for navigational elements, or form components / button groups for other use cases.');
  }

  var getDefaultValue = function getDefaultValue() {
    if (isControlled(value)) {
      return value;
    }

    return typeof defaultValue !== 'undefined' && defaultValue !== null ? defaultValue : options[0].value;
  };

  var _useState = useState(getDefaultValue()),
      _useState2 = _slicedToArray(_useState, 2),
      activeValue = _useState2[0],
      setActiveValue = _useState2[1];

  useEffect(function () {
    if (isControlled(value)) {
      setActiveValue(value);
    }
  }, [value]);
  var handleChange = useCallback(function (event) {
    event.preventDefault();
    var newValue = event.target.value; // Save a render cycle when it's a controlled input

    if (!isControlled(value)) {
      setActiveValue(newValue);
    }

    safeInvoke(onChange, newValue);
  }, [value, onChange]);
  return /*#__PURE__*/React.createElement(Group, _extends({
    ref: ref,
    display: "flex"
  }, rest), options.map(function (option, index) {
    return /*#__PURE__*/React.createElement(Button, {
      key: option.value,
      id: groupName + index,
      name: name || groupName,
      value: String(option.value),
      disabled: disabled,
      size: size,
      height: height,
      isActive: activeValue === String(option.value),
      onClick: handleChange,
      flex: "1"
    }, option.label);
  }));
}));
SegmentedControl.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {
  /**
   * The options for the radios of the Segmented Control.
   */
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.node.isRequired,
    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]).isRequired
  })).isRequired,

  /**
   * The current value of the Segmented Control when controlled.
   */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),

  /**
   * The default value of the Segmented Control when uncontrolled.
   */
  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),

  /**
   * Function called when the value changes.
   */
  onChange: PropTypes.func,

  /**
   * The name of the radio group.
   */
  name: PropTypes.string,

  /**
   * The size of the Segmented Control.
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * When true, the Segmented Control is disabled.
   */
  disabled: PropTypes.bool
});
export default SegmentedControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,