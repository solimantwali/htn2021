import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "className", "size"],
    _excluded2 = ["className"];
import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { useStyleConfig } from '../../hooks';
var pseudoSelectors = {
  _child: '& > *',
  _firstChild: '& > :first-child:not(:last-child)',
  _middleChild: '& > :not(:first-child):not(:last-child)',
  _lastChild: '& > :last-child:not(:first-child)'
};
var internalStyles = {
  display: 'inline-flex'
};
/**
 * Accessible `Group` component to identify a set of inputs/elements. Implements the WAI-ARIA Group Role
 * @see {@link https://www.w3.org/TR/wai-aria-1.1/#group}
 */

var Group = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Group(props, ref) {
  var children = props.children,
      className = props.className,
      size = props.size,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useStyleConfig = useStyleConfig('Group', {
    size: size
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  var enhancedChildren = React.Children.map(children, function (child) {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return child;
    }

    return /*#__PURE__*/React.cloneElement(child, {
      // Prefer more granularly defined props if present
      size: child.props.size || size
    });
  });
  return /*#__PURE__*/React.createElement(Box, _extends({
    className: cx(className, themedClassName),
    role: "group",
    ref: ref
  }, styleProps, restProps), enhancedChildren);
}));
Group.propTypes = {
  children: PropTypes.node.isRequired,

  /**
   * Class name passed to the component.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string,

  /**
   * The size passed down to children (for consistency)
   */
  size: PropTypes.oneOf(['small', 'medium', 'large'])
};
export default Group;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncm91cC9zcmMvR3JvdXAuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImN4IiwiUHJvcFR5cGVzIiwiQm94IiwidXNlU3R5bGVDb25maWciLCJwc2V1ZG9TZWxlY3RvcnMiLCJfY2hpbGQiLCJfZmlyc3RDaGlsZCIsIl9taWRkbGVDaGlsZCIsIl9sYXN0Q2hpbGQiLCJpbnRlcm5hbFN0eWxlcyIsImRpc3BsYXkiLCJHcm91cCIsInByb3BzIiwicmVmIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJzaXplIiwicmVzdFByb3BzIiwidGhlbWVkQ2xhc3NOYW1lIiwic3R5bGVQcm9wcyIsImVuaGFuY2VkQ2hpbGRyZW4iLCJDaGlsZHJlbiIsIm1hcCIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJwcm9wVHlwZXMiLCJub2RlIiwiaXNSZXF1aXJlZCIsInN0cmluZyIsIm9uZU9mIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsSUFBaEIsRUFBc0JDLFVBQXRCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsRUFBUCxNQUFlLFlBQWY7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixRQUFoQjtBQUNBLFNBQVNDLGNBQVQsUUFBK0IsYUFBL0I7QUFFQSxJQUFNQyxlQUFlLEdBQUc7QUFDdEJDLEVBQUFBLE1BQU0sRUFBRSxPQURjO0FBRXRCQyxFQUFBQSxXQUFXLEVBQUUsbUNBRlM7QUFHdEJDLEVBQUFBLFlBQVksRUFBRSx5Q0FIUTtBQUl0QkMsRUFBQUEsVUFBVSxFQUFFO0FBSlUsQ0FBeEI7QUFPQSxJQUFNQyxjQUFjLEdBQUc7QUFDckJDLEVBQUFBLE9BQU8sRUFBRTtBQURZLENBQXZCO0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBTUMsS0FBSyxnQkFBR2IsSUFBSSxlQUNoQkMsVUFBVSxDQUFDLFNBQVNZLEtBQVQsQ0FBZUMsS0FBZixFQUFzQkMsR0FBdEIsRUFBMkI7QUFDcEMsTUFBUUMsUUFBUixHQUFvREYsS0FBcEQsQ0FBUUUsUUFBUjtBQUFBLE1BQWtCQyxTQUFsQixHQUFvREgsS0FBcEQsQ0FBa0JHLFNBQWxCO0FBQUEsTUFBNkJDLElBQTdCLEdBQW9ESixLQUFwRCxDQUE2QkksSUFBN0I7QUFBQSxNQUFzQ0MsU0FBdEMsNEJBQW9ETCxLQUFwRDs7QUFFQSx3QkFBc0RULGNBQWMsQ0FDbEUsT0FEa0UsRUFFbEU7QUFBRWEsSUFBQUEsSUFBSSxFQUFKQTtBQUFGLEdBRmtFLEVBR2xFWixlQUhrRSxFQUlsRUssY0FKa0UsQ0FBcEU7QUFBQSxNQUFtQlMsZUFBbkIsbUJBQVFILFNBQVI7QUFBQSxNQUF1Q0ksVUFBdkM7O0FBT0EsTUFBTUMsZ0JBQWdCLEdBQUd2QixLQUFLLENBQUN3QixRQUFOLENBQWVDLEdBQWYsQ0FBbUJSLFFBQW5CLEVBQTZCLFVBQUFTLEtBQUssRUFBSTtBQUM3RCxRQUFJLGVBQUMxQixLQUFLLENBQUMyQixjQUFOLENBQXFCRCxLQUFyQixDQUFMLEVBQWtDO0FBQ2hDLGFBQU9BLEtBQVA7QUFDRDs7QUFFRCx3QkFBTzFCLEtBQUssQ0FBQzRCLFlBQU4sQ0FBbUJGLEtBQW5CLEVBQTBCO0FBQy9CO0FBQ0FQLE1BQUFBLElBQUksRUFBRU8sS0FBSyxDQUFDWCxLQUFOLENBQVlJLElBQVosSUFBb0JBO0FBRkssS0FBMUIsQ0FBUDtBQUlELEdBVHdCLENBQXpCO0FBV0Esc0JBQ0Usb0JBQUMsR0FBRDtBQUFLLElBQUEsU0FBUyxFQUFFaEIsRUFBRSxDQUFDZSxTQUFELEVBQVlHLGVBQVosQ0FBbEI7QUFBZ0QsSUFBQSxJQUFJLEVBQUMsT0FBckQ7QUFBNkQsSUFBQSxHQUFHLEVBQUVMO0FBQWxFLEtBQTJFTSxVQUEzRSxFQUEyRkYsU0FBM0YsR0FDR0csZ0JBREgsQ0FERjtBQUtELENBMUJTLENBRE0sQ0FBbEI7QUE4QkFULEtBQUssQ0FBQ2UsU0FBTixHQUFrQjtBQUNoQlosRUFBQUEsUUFBUSxFQUFFYixTQUFTLENBQUMwQixJQUFWLENBQWVDLFVBRFQ7O0FBR2hCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0ViLEVBQUFBLFNBQVMsRUFBRWQsU0FBUyxDQUFDNEIsTUFQTDs7QUFTaEI7QUFDRjtBQUNBO0FBQ0ViLEVBQUFBLElBQUksRUFBRWYsU0FBUyxDQUFDNkIsS0FBVixDQUFnQixDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLE9BQXBCLENBQWhCO0FBWlUsQ0FBbEI7QUFlQSxlQUFlbkIsS0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBtZW1vLCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3ggZnJvbSAndWktYm94J1xuaW1wb3J0IHsgdXNlU3R5bGVDb25maWcgfSBmcm9tICcuLi8uLi9ob29rcydcblxuY29uc3QgcHNldWRvU2VsZWN0b3JzID0ge1xuICBfY2hpbGQ6ICcmID4gKicsXG4gIF9maXJzdENoaWxkOiAnJiA+IDpmaXJzdC1jaGlsZDpub3QoOmxhc3QtY2hpbGQpJyxcbiAgX21pZGRsZUNoaWxkOiAnJiA+IDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpJyxcbiAgX2xhc3RDaGlsZDogJyYgPiA6bGFzdC1jaGlsZDpub3QoOmZpcnN0LWNoaWxkKSdcbn1cblxuY29uc3QgaW50ZXJuYWxTdHlsZXMgPSB7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCdcbn1cblxuLyoqXG4gKiBBY2Nlc3NpYmxlIGBHcm91cGAgY29tcG9uZW50IHRvIGlkZW50aWZ5IGEgc2V0IG9mIGlucHV0cy9lbGVtZW50cy4gSW1wbGVtZW50cyB0aGUgV0FJLUFSSUEgR3JvdXAgUm9sZVxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZ3JvdXB9XG4gKi9cbmNvbnN0IEdyb3VwID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBHcm91cChwcm9wcywgcmVmKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBzaXplLCAuLi5yZXN0UHJvcHMgfSA9IHByb3BzXG5cbiAgICBjb25zdCB7IGNsYXNzTmFtZTogdGhlbWVkQ2xhc3NOYW1lLCAuLi5zdHlsZVByb3BzIH0gPSB1c2VTdHlsZUNvbmZpZyhcbiAgICAgICdHcm91cCcsXG4gICAgICB7IHNpemUgfSxcbiAgICAgIHBzZXVkb1NlbGVjdG9ycyxcbiAgICAgIGludGVybmFsU3R5bGVzXG4gICAgKVxuXG4gICAgY29uc3QgZW5oYW5jZWRDaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgLy8gUHJlZmVyIG1vcmUgZ3JhbnVsYXJseSBkZWZpbmVkIHByb3BzIGlmIHByZXNlbnRcbiAgICAgICAgc2l6ZTogY2hpbGQucHJvcHMuc2l6ZSB8fCBzaXplXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJveCBjbGFzc05hbWU9e2N4KGNsYXNzTmFtZSwgdGhlbWVkQ2xhc3NOYW1lKX0gcm9sZT1cImdyb3VwXCIgcmVmPXtyZWZ9IHsuLi5zdHlsZVByb3BzfSB7Li4ucmVzdFByb3BzfT5cbiAgICAgICAge2VuaGFuY2VkQ2hpbGRyZW59XG4gICAgICA8L0JveD5cbiAgICApXG4gIH0pXG4pXG5cbkdyb3VwLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgcGFzc2VkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIE9ubHkgdXNlIGlmIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgcGFzc2VkIGRvd24gdG8gY2hpbGRyZW4gKGZvciBjb25zaXN0ZW5jeSlcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKVxufVxuXG5leHBvcnQgZGVmYXVsdCBHcm91cFxuIl19