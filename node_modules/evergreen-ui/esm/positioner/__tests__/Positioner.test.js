import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { Position } from '../../constants';
import getFittedPosition from '../src/getPosition';

var dimensions = function dimensions(overrides) {
  return _objectSpread({
    height: 100,
    width: 100
  }, overrides);
};

var targetRect = function targetRect(overrides) {
  return _objectSpread({
    x: 250,
    y: 150,
    width: 50,
    height: 30,
    top: 150,
    bottom: 150 - 30,
    left: 250,
    right: 200
  }, overrides);
};

var targetOffset = 6;

var viewport = function viewport(overrides) {
  return _objectSpread({
    height: 250,
    width: 850
  }, overrides);
};

describe('<Positioner />', function () {
  it('All positions work', function () {
    var generatedPositions = Object.values(Position).map(function (position) {
      return getFittedPosition({
        position: position,
        dimensions: dimensions(),
        targetRect: targetRect(),
        targetOffset: targetOffset,
        viewport: viewport()
      });
    });
    expect(generatedPositions).toMatchSnapshot();
  });
  it('Position.LEFT repositions to the right', function () {
    expect(getFittedPosition({
      position: Position.LEFT,
      dimensions: dimensions({
        width: 350
      }),
      targetRect: targetRect(),
      targetOffset: targetOffset,
      viewport: viewport()
    }));
  });
  it('Position.RIGHT repositions to the left', function () {
    expect(getFittedPosition({
      position: Position.RIGHT,
      dimensions: dimensions({
        width: 250
      }),
      targetRect: targetRect({
        left: 800,
        x: 800,
        right: 850
      }),
      targetOffset: targetOffset,
      viewport: viewport()
    })).toMatchSnapshot();
  });
  it('Position.LEFT and Position.RIGHT will use the side with the most space', function () {
    expect(getFittedPosition({
      position: Position.LEFT,
      dimensions: dimensions({
        width: 250
      }),
      targetRect: targetRect({
        left: 50,
        x: 50,
        right: 100
      }),
      targetOffset: targetOffset,
      viewport: viewport({
        width: 300
      })
    })).toMatchSnapshot();
  });
  it('Position.TOP repositions to the bottom', function () {
    expect(getFittedPosition({
      position: Position.TOP,
      dimensions: dimensions({
        height: 250
      }),
      targetRect: targetRect({
        top: 20,
        y: 20
      }),
      targetOffset: targetOffset,
      viewport: viewport()
    })).toMatchSnapshot();
  });
  it('Position.BOTTOM repositions to the top', function () {
    expect(getFittedPosition({
      position: Position.BOTTOM,
      dimensions: dimensions({
        height: 250
      }),
      targetRect: targetRect({
        top: 290,
        y: 290,
        bottom: 295,
        height: 5
      }),
      targetOffset: targetOffset,
      viewport: viewport({
        height: 300
      })
    })).toMatchSnapshot();
  });
  it('It pushes the rect to the right if overflowing on the left side', function () {
    expect(getFittedPosition({
      position: Position.BOTTOM,
      dimensions: dimensions({
        width: 250,
        height: 110
      }),
      targetRect: targetRect({
        left: 10,
        x: 10,
        top: 10,
        y: 10,
        bottom: 20
      }),
      targetOffset: targetOffset,
      viewport: viewport()
    })).toMatchSnapshot();
  });
  it('It pushes the rect to the top if overflowing on the bottom side', function () {
    expect(getFittedPosition({
      position: Position.TOP,
      dimensions: dimensions({
        width: 50,
        height: 100
      }),
      targetRect: targetRect({
        left: 100,
        x: 100,
        top: 550,
        y: 550
      }),
      targetOffset: targetOffset,
      viewport: viewport({
        height: 500
      })
    })).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,