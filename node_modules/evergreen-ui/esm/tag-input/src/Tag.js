import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "isRemovable", "onRemove"];

/**
 * @overview TagInput accepts multiple values that can be individually removed
 */
import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { Badge } from '../../badges';
import { CrossIcon } from '../../icons';
import { minorScale } from '../../scales';
var Tag = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Tag(props, ref) {
  var children = props.children,
      isRemovable = props.isRemovable,
      onRemove = props.onRemove,
      restProps = _objectWithoutProperties(props, _excluded);

  var badgeStyles = {
    alignItems: 'center',
    display: 'inline-flex',
    fontWeight: 400,
    borderRadius: 4,
    paddingX: 8,
    paddingY: 6,
    marginTop: 0,
    marginBottom: 0,
    textTransform: 'none'
  };

  if (isRemovable) {
    badgeStyles.paddingRight = minorScale(1);
  }

  return /*#__PURE__*/React.createElement(Badge, _extends({
    ref: ref,
    isInteractive: true
  }, badgeStyles, restProps), children, isRemovable && /*#__PURE__*/React.createElement(CrossIcon, {
    marginLeft: minorScale(1),
    onClick: onRemove,
    size: minorScale(3)
  }));
}));
Tag.propTypes = {
  /** The tag content */
  children: PropTypes.node,

  /**
   * Callback invoked when the removal icon is clicked.
   * (event) => void
   */
  onRemove: PropTypes.func,

  /** Whether or not the tag can be removed. */
  isRemovable: PropTypes.bool
};
export default Tag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWctaW5wdXQvc3JjL1RhZy5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIm1lbW8iLCJmb3J3YXJkUmVmIiwiUHJvcFR5cGVzIiwiQmFkZ2UiLCJDcm9zc0ljb24iLCJtaW5vclNjYWxlIiwiVGFnIiwicHJvcHMiLCJyZWYiLCJjaGlsZHJlbiIsImlzUmVtb3ZhYmxlIiwib25SZW1vdmUiLCJyZXN0UHJvcHMiLCJiYWRnZVN0eWxlcyIsImFsaWduSXRlbXMiLCJkaXNwbGF5IiwiZm9udFdlaWdodCIsImJvcmRlclJhZGl1cyIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJ0ZXh0VHJhbnNmb3JtIiwicGFkZGluZ1JpZ2h0IiwicHJvcFR5cGVzIiwibm9kZSIsImZ1bmMiLCJib29sIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsT0FBT0EsS0FBUCxJQUFnQkMsSUFBaEIsRUFBc0JDLFVBQXRCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLEtBQVQsUUFBc0IsY0FBdEI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGFBQTFCO0FBQ0EsU0FBU0MsVUFBVCxRQUEyQixjQUEzQjtBQUVBLElBQU1DLEdBQUcsZ0JBQUdOLElBQUksZUFDZEMsVUFBVSxDQUFDLFNBQVNLLEdBQVQsQ0FBYUMsS0FBYixFQUFvQkMsR0FBcEIsRUFBeUI7QUFDbEMsTUFBUUMsUUFBUixHQUEwREYsS0FBMUQsQ0FBUUUsUUFBUjtBQUFBLE1BQWtCQyxXQUFsQixHQUEwREgsS0FBMUQsQ0FBa0JHLFdBQWxCO0FBQUEsTUFBK0JDLFFBQS9CLEdBQTBESixLQUExRCxDQUErQkksUUFBL0I7QUFBQSxNQUE0Q0MsU0FBNUMsNEJBQTBETCxLQUExRDs7QUFFQSxNQUFNTSxXQUFXLEdBQUc7QUFDbEJDLElBQUFBLFVBQVUsRUFBRSxRQURNO0FBRWxCQyxJQUFBQSxPQUFPLEVBQUUsYUFGUztBQUdsQkMsSUFBQUEsVUFBVSxFQUFFLEdBSE07QUFJbEJDLElBQUFBLFlBQVksRUFBRSxDQUpJO0FBS2xCQyxJQUFBQSxRQUFRLEVBQUUsQ0FMUTtBQU1sQkMsSUFBQUEsUUFBUSxFQUFFLENBTlE7QUFPbEJDLElBQUFBLFNBQVMsRUFBRSxDQVBPO0FBUWxCQyxJQUFBQSxZQUFZLEVBQUUsQ0FSSTtBQVNsQkMsSUFBQUEsYUFBYSxFQUFFO0FBVEcsR0FBcEI7O0FBWUEsTUFBSVosV0FBSixFQUFpQjtBQUNmRyxJQUFBQSxXQUFXLENBQUNVLFlBQVosR0FBMkJsQixVQUFVLENBQUMsQ0FBRCxDQUFyQztBQUNEOztBQUVELHNCQUNFLG9CQUFDLEtBQUQ7QUFBTyxJQUFBLEdBQUcsRUFBRUcsR0FBWjtBQUFpQixJQUFBLGFBQWE7QUFBOUIsS0FBbUNLLFdBQW5DLEVBQW9ERCxTQUFwRCxHQUNHSCxRQURILEVBRUdDLFdBQVcsaUJBQUksb0JBQUMsU0FBRDtBQUFXLElBQUEsVUFBVSxFQUFFTCxVQUFVLENBQUMsQ0FBRCxDQUFqQztBQUFzQyxJQUFBLE9BQU8sRUFBRU0sUUFBL0M7QUFBeUQsSUFBQSxJQUFJLEVBQUVOLFVBQVUsQ0FBQyxDQUFEO0FBQXpFLElBRmxCLENBREY7QUFNRCxDQXpCUyxDQURJLENBQWhCO0FBNkJBQyxHQUFHLENBQUNrQixTQUFKLEdBQWdCO0FBQ2Q7QUFDQWYsRUFBQUEsUUFBUSxFQUFFUCxTQUFTLENBQUN1QixJQUZOOztBQUlkO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VkLEVBQUFBLFFBQVEsRUFBRVQsU0FBUyxDQUFDd0IsSUFSTjs7QUFTZDtBQUNBaEIsRUFBQUEsV0FBVyxFQUFFUixTQUFTLENBQUN5QjtBQVZULENBQWhCO0FBYUEsZUFBZXJCLEdBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBvdmVydmlldyBUYWdJbnB1dCBhY2NlcHRzIG11bHRpcGxlIHZhbHVlcyB0aGF0IGNhbiBiZSBpbmRpdmlkdWFsbHkgcmVtb3ZlZFxuICovXG5pbXBvcnQgUmVhY3QsIHsgbWVtbywgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgQmFkZ2UgfSBmcm9tICcuLi8uLi9iYWRnZXMnXG5pbXBvcnQgeyBDcm9zc0ljb24gfSBmcm9tICcuLi8uLi9pY29ucydcbmltcG9ydCB7IG1pbm9yU2NhbGUgfSBmcm9tICcuLi8uLi9zY2FsZXMnXG5cbmNvbnN0IFRhZyA9IG1lbW8oXG4gIGZvcndhcmRSZWYoZnVuY3Rpb24gVGFnKHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBpc1JlbW92YWJsZSwgb25SZW1vdmUsIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHNcblxuICAgIGNvbnN0IGJhZGdlU3R5bGVzID0ge1xuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgcGFkZGluZ1g6IDgsXG4gICAgICBwYWRkaW5nWTogNixcbiAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgIG1hcmdpbkJvdHRvbTogMCxcbiAgICAgIHRleHRUcmFuc2Zvcm06ICdub25lJ1xuICAgIH1cblxuICAgIGlmIChpc1JlbW92YWJsZSkge1xuICAgICAgYmFkZ2VTdHlsZXMucGFkZGluZ1JpZ2h0ID0gbWlub3JTY2FsZSgxKVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8QmFkZ2UgcmVmPXtyZWZ9IGlzSW50ZXJhY3RpdmUgey4uLmJhZGdlU3R5bGVzfSB7Li4ucmVzdFByb3BzfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICB7aXNSZW1vdmFibGUgJiYgPENyb3NzSWNvbiBtYXJnaW5MZWZ0PXttaW5vclNjYWxlKDEpfSBvbkNsaWNrPXtvblJlbW92ZX0gc2l6ZT17bWlub3JTY2FsZSgzKX0gLz59XG4gICAgICA8L0JhZGdlPlxuICAgIClcbiAgfSlcbilcblxuVGFnLnByb3BUeXBlcyA9IHtcbiAgLyoqIFRoZSB0YWcgY29udGVudCAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGludm9rZWQgd2hlbiB0aGUgcmVtb3ZhbCBpY29uIGlzIGNsaWNrZWQuXG4gICAqIChldmVudCkgPT4gdm9pZFxuICAgKi9cbiAgb25SZW1vdmU6IFByb3BUeXBlcy5mdW5jLFxuICAvKiogV2hldGhlciBvciBub3QgdGhlIHRhZyBjYW4gYmUgcmVtb3ZlZC4gKi9cbiAgaXNSZW1vdmFibGU6IFByb3BUeXBlcy5ib29sXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhZ1xuIl19