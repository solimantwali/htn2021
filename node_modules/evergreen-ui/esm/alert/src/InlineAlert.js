import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "className", "hasIcon", "intent", "size"],
    _excluded2 = ["className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { spacing, dimensions, position, layout } from 'ui-box';
import { useStyleConfig } from '../../hooks';
import { Pane } from '../../layers';
import { Text } from '../../typography';
import { getIconForIntent } from './getIconForIntent';
var pseudoSelectors = {};
var internalStyles = {
  display: 'flex',
  alignItems: 'center'
};
var InlineAlert = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function InlineAlert(props, ref) {
  var children = props.children,
      className = props.className,
      _props$hasIcon = props.hasIcon,
      hasIcon = _props$hasIcon === void 0 ? true : _props$hasIcon,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'info' : _props$intent,
      _props$size = props.size,
      size = _props$size === void 0 ? 400 : _props$size,
      restProps = _objectWithoutProperties(props, _excluded);

  var intentToken = intent === 'none' ? 'info' : intent;

  var _useStyleConfig = useStyleConfig('InlineAlert', {
    intent: intentToken
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  return /*#__PURE__*/React.createElement(Pane, _extends({
    ref: ref,
    className: cx(className, themedClassName)
  }, styleProps, restProps), hasIcon && /*#__PURE__*/React.createElement(Pane, {
    display: "flex",
    marginRight: 16
  }, getIconForIntent(intent, {
    size: 16
  })), /*#__PURE__*/React.createElement(Text, {
    size: size,
    lineHeight: 1,
    fontWeight: 500,
    color: "inherit"
  }, children));
}));
InlineAlert.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {
  /**
   * The content of the alert.
   */
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /**
   * The intent of the alert. This should always be set explicitly.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),

  /**
   * When true, show a icon on the left matching the type.
   * There is no point not showing this.
   */
  hasIcon: PropTypes.bool,

  /**
   * The size of the Text.
   */
  size: PropTypes.number
});
export default InlineAlert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbGVydC9zcmMvSW5saW5lQWxlcnQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImN4IiwiUHJvcFR5cGVzIiwic3BhY2luZyIsImRpbWVuc2lvbnMiLCJwb3NpdGlvbiIsImxheW91dCIsInVzZVN0eWxlQ29uZmlnIiwiUGFuZSIsIlRleHQiLCJnZXRJY29uRm9ySW50ZW50IiwicHNldWRvU2VsZWN0b3JzIiwiaW50ZXJuYWxTdHlsZXMiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsIklubGluZUFsZXJ0IiwicHJvcHMiLCJyZWYiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsImhhc0ljb24iLCJpbnRlbnQiLCJzaXplIiwicmVzdFByb3BzIiwiaW50ZW50VG9rZW4iLCJ0aGVtZWRDbGFzc05hbWUiLCJzdHlsZVByb3BzIiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibm9kZSIsIm9uZU9mIiwiYm9vbCIsIm51bWJlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxVQUF0QixRQUF3QyxPQUF4QztBQUNBLE9BQU9DLEVBQVAsTUFBZSxZQUFmO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLE9BQVQsRUFBa0JDLFVBQWxCLEVBQThCQyxRQUE5QixFQUF3Q0MsTUFBeEMsUUFBc0QsUUFBdEQ7QUFDQSxTQUFTQyxjQUFULFFBQStCLGFBQS9CO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixjQUFyQjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsa0JBQXJCO0FBQ0EsU0FBU0MsZ0JBQVQsUUFBaUMsb0JBQWpDO0FBRUEsSUFBTUMsZUFBZSxHQUFHLEVBQXhCO0FBRUEsSUFBTUMsY0FBYyxHQUFHO0FBQ3JCQyxFQUFBQSxPQUFPLEVBQUUsTUFEWTtBQUVyQkMsRUFBQUEsVUFBVSxFQUFFO0FBRlMsQ0FBdkI7QUFLQSxJQUFNQyxXQUFXLGdCQUFHaEIsSUFBSSxlQUN0QkMsVUFBVSxDQUFDLFNBQVNlLFdBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCQyxHQUE1QixFQUFpQztBQUMxQyxNQUFRQyxRQUFSLEdBQTJGRixLQUEzRixDQUFRRSxRQUFSO0FBQUEsTUFBa0JDLFNBQWxCLEdBQTJGSCxLQUEzRixDQUFrQkcsU0FBbEI7QUFBQSx1QkFBMkZILEtBQTNGLENBQTZCSSxPQUE3QjtBQUFBLE1BQTZCQSxPQUE3QiwrQkFBdUMsSUFBdkM7QUFBQSxzQkFBMkZKLEtBQTNGLENBQTZDSyxNQUE3QztBQUFBLE1BQTZDQSxNQUE3Qyw4QkFBc0QsTUFBdEQ7QUFBQSxvQkFBMkZMLEtBQTNGLENBQThETSxJQUE5RDtBQUFBLE1BQThEQSxJQUE5RCw0QkFBcUUsR0FBckU7QUFBQSxNQUE2RUMsU0FBN0UsNEJBQTJGUCxLQUEzRjs7QUFFQSxNQUFNUSxXQUFXLEdBQUdILE1BQU0sS0FBSyxNQUFYLEdBQW9CLE1BQXBCLEdBQTZCQSxNQUFqRDs7QUFDQSx3QkFBc0RkLGNBQWMsQ0FDbEUsYUFEa0UsRUFFbEU7QUFBRWMsSUFBQUEsTUFBTSxFQUFFRztBQUFWLEdBRmtFLEVBR2xFYixlQUhrRSxFQUlsRUMsY0FKa0UsQ0FBcEU7QUFBQSxNQUFtQmEsZUFBbkIsbUJBQVFOLFNBQVI7QUFBQSxNQUF1Q08sVUFBdkM7O0FBT0Esc0JBQ0Usb0JBQUMsSUFBRDtBQUFNLElBQUEsR0FBRyxFQUFFVCxHQUFYO0FBQWdCLElBQUEsU0FBUyxFQUFFaEIsRUFBRSxDQUFDa0IsU0FBRCxFQUFZTSxlQUFaO0FBQTdCLEtBQStEQyxVQUEvRCxFQUErRUgsU0FBL0UsR0FDR0gsT0FBTyxpQkFDTixvQkFBQyxJQUFEO0FBQU0sSUFBQSxPQUFPLEVBQUMsTUFBZDtBQUFxQixJQUFBLFdBQVcsRUFBRTtBQUFsQyxLQUNHVixnQkFBZ0IsQ0FBQ1csTUFBRCxFQUFTO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQVQsQ0FEbkIsQ0FGSixlQU1FLG9CQUFDLElBQUQ7QUFBTSxJQUFBLElBQUksRUFBRUEsSUFBWjtBQUFrQixJQUFBLFVBQVUsRUFBRSxDQUE5QjtBQUFpQyxJQUFBLFVBQVUsRUFBRSxHQUE3QztBQUFrRCxJQUFBLEtBQUssRUFBQztBQUF4RCxLQUNHSixRQURILENBTkYsQ0FERjtBQVlELENBdkJTLENBRFksQ0FBeEI7QUEyQkFILFdBQVcsQ0FBQ1ksU0FBWiw2RUFJS3hCLE9BQU8sQ0FBQ3dCLFNBSmIsR0FLS3RCLFFBQVEsQ0FBQ3NCLFNBTGQsR0FNS3JCLE1BQU0sQ0FBQ3FCLFNBTlosR0FPS3ZCLFVBQVUsQ0FBQ3VCLFNBUGhCO0FBU0U7QUFDRjtBQUNBO0FBQ0VULEVBQUFBLFFBQVEsRUFBRWhCLFNBQVMsQ0FBQzBCLFNBQVYsQ0FBb0IsQ0FBQzFCLFNBQVMsQ0FBQzJCLE1BQVgsRUFBbUIzQixTQUFTLENBQUM0QixJQUE3QixDQUFwQixDQVpaOztBQWNFO0FBQ0Y7QUFDQTtBQUNFVCxFQUFBQSxNQUFNLEVBQUVuQixTQUFTLENBQUM2QixLQUFWLENBQWdCLENBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0IsU0FBcEIsRUFBK0IsUUFBL0IsQ0FBaEIsQ0FqQlY7O0FBbUJFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VYLEVBQUFBLE9BQU8sRUFBRWxCLFNBQVMsQ0FBQzhCLElBdkJyQjs7QUF5QkU7QUFDRjtBQUNBO0FBQ0VWLEVBQUFBLElBQUksRUFBRXBCLFNBQVMsQ0FBQytCO0FBNUJsQjtBQStCQSxlQUFlbEIsV0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBtZW1vLCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHNwYWNpbmcsIGRpbWVuc2lvbnMsIHBvc2l0aW9uLCBsYXlvdXQgfSBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyB1c2VTdHlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IHsgUGFuZSB9IGZyb20gJy4uLy4uL2xheWVycydcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90eXBvZ3JhcGh5J1xuaW1wb3J0IHsgZ2V0SWNvbkZvckludGVudCB9IGZyb20gJy4vZ2V0SWNvbkZvckludGVudCdcblxuY29uc3QgcHNldWRvU2VsZWN0b3JzID0ge31cblxuY29uc3QgaW50ZXJuYWxTdHlsZXMgPSB7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcidcbn1cblxuY29uc3QgSW5saW5lQWxlcnQgPSBtZW1vKFxuICBmb3J3YXJkUmVmKGZ1bmN0aW9uIElubGluZUFsZXJ0KHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBjbGFzc05hbWUsIGhhc0ljb24gPSB0cnVlLCBpbnRlbnQgPSAnaW5mbycsIHNpemUgPSA0MDAsIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHNcblxuICAgIGNvbnN0IGludGVudFRva2VuID0gaW50ZW50ID09PSAnbm9uZScgPyAnaW5mbycgOiBpbnRlbnRcbiAgICBjb25zdCB7IGNsYXNzTmFtZTogdGhlbWVkQ2xhc3NOYW1lLCAuLi5zdHlsZVByb3BzIH0gPSB1c2VTdHlsZUNvbmZpZyhcbiAgICAgICdJbmxpbmVBbGVydCcsXG4gICAgICB7IGludGVudDogaW50ZW50VG9rZW4gfSxcbiAgICAgIHBzZXVkb1NlbGVjdG9ycyxcbiAgICAgIGludGVybmFsU3R5bGVzXG4gICAgKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lIHJlZj17cmVmfSBjbGFzc05hbWU9e2N4KGNsYXNzTmFtZSwgdGhlbWVkQ2xhc3NOYW1lKX0gey4uLnN0eWxlUHJvcHN9IHsuLi5yZXN0UHJvcHN9PlxuICAgICAgICB7aGFzSWNvbiAmJiAoXG4gICAgICAgICAgPFBhbmUgZGlzcGxheT1cImZsZXhcIiBtYXJnaW5SaWdodD17MTZ9PlxuICAgICAgICAgICAge2dldEljb25Gb3JJbnRlbnQoaW50ZW50LCB7IHNpemU6IDE2IH0pfVxuICAgICAgICAgIDwvUGFuZT5cbiAgICAgICAgKX1cbiAgICAgICAgPFRleHQgc2l6ZT17c2l6ZX0gbGluZUhlaWdodD17MX0gZm9udFdlaWdodD17NTAwfSBjb2xvcj1cImluaGVyaXRcIj5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvUGFuZT5cbiAgICApXG4gIH0pXG4pXG5cbklubGluZUFsZXJ0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbXBvc2VzIHNvbWUgQm94IEFQSXMuXG4gICAqL1xuICAuLi5zcGFjaW5nLnByb3BUeXBlcyxcbiAgLi4ucG9zaXRpb24ucHJvcFR5cGVzLFxuICAuLi5sYXlvdXQucHJvcFR5cGVzLFxuICAuLi5kaW1lbnNpb25zLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGFsZXJ0LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ub2RlXSksXG5cbiAgLyoqXG4gICAqIFRoZSBpbnRlbnQgb2YgdGhlIGFsZXJ0LiBUaGlzIHNob3VsZCBhbHdheXMgYmUgc2V0IGV4cGxpY2l0bHkuXG4gICAqL1xuICBpbnRlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ25vbmUnLCAnc3VjY2VzcycsICd3YXJuaW5nJywgJ2RhbmdlciddKSxcblxuICAvKipcbiAgICogV2hlbiB0cnVlLCBzaG93IGEgaWNvbiBvbiB0aGUgbGVmdCBtYXRjaGluZyB0aGUgdHlwZS5cbiAgICogVGhlcmUgaXMgbm8gcG9pbnQgbm90IHNob3dpbmcgdGhpcy5cbiAgICovXG4gIGhhc0ljb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgVGV4dC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5udW1iZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5saW5lQWxlcnRcbiJdfQ==