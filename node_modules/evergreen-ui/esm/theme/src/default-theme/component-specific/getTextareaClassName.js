import { Themer } from '../../../../themer';
import palette from '../foundational-styles/palette';
import scales from '../foundational-styles/scales';
import memoizeClassName from '../utils/memoizeClassName';
var Appearances = {};
Appearances["default"] = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N5A, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(scales.neutral.N4A, ", inset 0 0 0 1px ").concat(scales.blue.B7, ", 0 0 0 3px ").concat(scales.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
Appearances.neutral = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
Appearances.editableCell = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B7)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance
 * @return {Object} the appearance object.
 */

var getTextareaAppearance = function getTextareaAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return Appearances.neutral;

    case 'editable-cell':
      return Appearances.editableCell;

    default:
      return Appearances["default"];
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getTextareaAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0VGV4dGFyZWFDbGFzc05hbWUuanMiXSwibmFtZXMiOlsiVGhlbWVyIiwicGFsZXR0ZSIsInNjYWxlcyIsIm1lbW9pemVDbGFzc05hbWUiLCJBcHBlYXJhbmNlcyIsImNyZWF0ZUlucHV0QXBwZWFyYW5jZSIsImJhc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3hTaGFkb3ciLCJuZXV0cmFsIiwiTjVBIiwiTjRBIiwiaW52YWxpZCIsInJlZCIsInBsYWNlaG9sZGVyIiwiY29sb3IiLCJONkEiLCJmb2N1cyIsIm91dGxpbmUiLCJibHVlIiwiQjciLCJCNEEiLCJkaXNhYmxlZCIsIk4yIiwiTjJBIiwiQjZBIiwiZWRpdGFibGVDZWxsIiwiZ2V0VGV4dGFyZWFBcHBlYXJhbmNlIiwiYXBwZWFyYW5jZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsTUFBVCxRQUF1QixvQkFBdkI7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLGdDQUFwQjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsK0JBQW5CO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsMkJBQTdCO0FBRUEsSUFBTUMsV0FBVyxHQUFHLEVBQXBCO0FBRUFBLFdBQVcsV0FBWCxHQUFzQkosTUFBTSxDQUFDSyxxQkFBUCxDQUE2QjtBQUNqREMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLGVBQWUsRUFBRSxPQURiO0FBRUpDLElBQUFBLFNBQVMsNEJBQXFCTixNQUFNLENBQUNPLE9BQVAsQ0FBZUMsR0FBcEMsK0JBQTREUixNQUFNLENBQUNPLE9BQVAsQ0FBZUUsR0FBM0U7QUFGTCxHQUQyQztBQUtqREMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BKLElBQUFBLFNBQVMsNEJBQXFCUCxPQUFPLENBQUNZLEdBQVIsQ0FBWVAsSUFBakMsK0JBQTBESixNQUFNLENBQUNPLE9BQVAsQ0FBZUUsR0FBekU7QUFERixHQUx3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LGFBQU90QixXQUFXLFdBQWxCO0FBTko7QUFRRCxDQVREO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsZUFBZUQsZ0JBQWdCLENBQUN3QixxQkFBRCxDQUEvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRoZW1lciB9IGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lcidcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvcGFsZXR0ZSdcbmltcG9ydCBzY2FsZXMgZnJvbSAnLi4vZm91bmRhdGlvbmFsLXN0eWxlcy9zY2FsZXMnXG5pbXBvcnQgbWVtb2l6ZUNsYXNzTmFtZSBmcm9tICcuLi91dGlscy9tZW1vaXplQ2xhc3NOYW1lJ1xuXG5jb25zdCBBcHBlYXJhbmNlcyA9IHt9XG5cbkFwcGVhcmFuY2VzLmRlZmF1bHQgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONUF9LCBpbnNldCAwIDFweCAycHggJHtzY2FsZXMubmV1dHJhbC5ONEF9YFxuICB9LFxuICBpbnZhbGlkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7cGFsZXR0ZS5yZWQuYmFzZX0sIGluc2V0IDAgMXB4IDJweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gXG4gIH0sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMnB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfSwgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLmJsdWUuQjd9LCAwIDAgMCAzcHggJHtzY2FsZXMuYmx1ZS5CNEF9YFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuQXBwZWFyYW5jZXMubmV1dHJhbCA9IFRoZW1lci5jcmVhdGVJbnB1dEFwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMkFcbiAgfSxcbiAgaW52YWxpZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3BhbGV0dGUucmVkLmJhc2V9YFxuICB9LFxuICBwbGFjZWhvbGRlcjoge1xuICAgIGNvbG9yOiBzY2FsZXMubmV1dHJhbC5ONkFcbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJveFNoYWRvdzogYDAgMCAwIDJweCAke3NjYWxlcy5ibHVlLkI2QX1gXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG5BcHBlYXJhbmNlcy5lZGl0YWJsZUNlbGwgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJBXG4gIH0sXG4gIGludmFsaWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtwYWxldHRlLnJlZC5iYXNlfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6IGAwIDAgMCAycHggJHtzY2FsZXMuYmx1ZS5CN31gXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG4vKipcbiAqIEdldCB0aGUgYXBwZWFyYW5jZSBvZiBhIGBUZXh0SW5wdXRgLlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcGVhcmFuY2VcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIGFwcGVhcmFuY2Ugb2JqZWN0LlxuICovXG5jb25zdCBnZXRUZXh0YXJlYUFwcGVhcmFuY2UgPSBhcHBlYXJhbmNlID0+IHtcbiAgc3dpdGNoIChhcHBlYXJhbmNlKSB7XG4gICAgY2FzZSAnbmV1dHJhbCc6XG4gICAgICByZXR1cm4gQXBwZWFyYW5jZXMubmV1dHJhbFxuICAgIGNhc2UgJ2VkaXRhYmxlLWNlbGwnOlxuICAgICAgcmV0dXJuIEFwcGVhcmFuY2VzLmVkaXRhYmxlQ2VsbFxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gQXBwZWFyYW5jZXMuZGVmYXVsdFxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBjbGFzc05hbWUgb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBhcHBlYXJhbmNlIGNsYXNzIG5hbWUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVDbGFzc05hbWUoZ2V0VGV4dGFyZWFBcHBlYXJhbmNlKVxuIl19