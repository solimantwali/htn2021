import { Themer } from '../../../../themer';
import palette from '../foundational-styles/palette';
import scales from '../foundational-styles/scales';
import memoizeClassName from '../utils/memoizeClassName';
var InputAppearances = {};
InputAppearances["default"] = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N5A, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(scales.neutral.N4A, ", inset 0 0 0 1px ").concat(scales.blue.B7, ", 0 0 0 3px ").concat(scales.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.neutral = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.none = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white'
  },
  invalid: {},
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none'
  },
  disabled: {
    backgroundColor: scales.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {Object} the appearance object.
 */

var getTextInputAppearance = function getTextInputAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return InputAppearances.neutral;

    case 'none':
      return InputAppearances.none;

    default:
      return InputAppearances["default"];
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getTextInputAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0VGV4dElucHV0Q2xhc3NOYW1lLmpzIl0sIm5hbWVzIjpbIlRoZW1lciIsInBhbGV0dGUiLCJzY2FsZXMiLCJtZW1vaXplQ2xhc3NOYW1lIiwiSW5wdXRBcHBlYXJhbmNlcyIsImNyZWF0ZUlucHV0QXBwZWFyYW5jZSIsImJhc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3hTaGFkb3ciLCJuZXV0cmFsIiwiTjVBIiwiTjRBIiwiaW52YWxpZCIsInJlZCIsInBsYWNlaG9sZGVyIiwiY29sb3IiLCJONkEiLCJmb2N1cyIsIm91dGxpbmUiLCJibHVlIiwiQjciLCJCNEEiLCJkaXNhYmxlZCIsIk4yIiwiTjJBIiwiQjZBIiwibm9uZSIsImdldFRleHRJbnB1dEFwcGVhcmFuY2UiLCJhcHBlYXJhbmNlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxNQUFULFFBQXVCLG9CQUF2QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsZ0NBQXBCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQiwrQkFBbkI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QiwyQkFBN0I7QUFFQSxJQUFNQyxnQkFBZ0IsR0FBRyxFQUF6QjtBQUVBQSxnQkFBZ0IsV0FBaEIsR0FBMkJKLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkI7QUFDdERDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUUsT0FEYjtBQUVKQyxJQUFBQSxTQUFTLDRCQUFxQk4sTUFBTSxDQUFDTyxPQUFQLENBQWVDLEdBQXBDLCtCQUE0RFIsTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBQTNFO0FBRkwsR0FEZ0Q7QUFLdERDLEVBQUFBLE9BQU8sRUFBRTtBQUNQSixJQUFBQSxTQUFTLDRCQUFxQlAsT0FBTyxDQUFDWSxHQUFSLENBQVlQLElBQWpDLCtCQUEwREosTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBQXpFO0FBREYsR0FMNkM7QUFRdERHLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxLQUFLLEVBQUViLE1BQU0sQ0FBQ08sT0FBUCxDQUFlTztBQURYLEdBUnlDO0FBV3REQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFLE1BREo7QUFFTFYsSUFBQUEsU0FBUywwQkFBbUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFsQywrQkFBMERULE1BQU0sQ0FBQ2lCLElBQVAsQ0FBWUMsRUFBdEUseUJBQXVGbEIsTUFBTSxDQUFDaUIsSUFBUCxDQUFZRSxHQUFuRztBQUZKLEdBWCtDO0FBZXREQyxFQUFBQSxRQUFRLEVBQUU7QUFDUmQsSUFBQUEsU0FBUyw0QkFBcUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFwQyxDQUREO0FBRVJKLElBQUFBLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVjO0FBRnhCO0FBZjRDLENBQTdCLENBQTNCO0FBcUJBbkIsZ0JBQWdCLENBQUNLLE9BQWpCLEdBQTJCVCxNQUFNLENBQUNLLHFCQUFQLENBQTZCO0FBQ3REQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsZUFBZSxFQUFFTCxNQUFNLENBQUNPLE9BQVAsQ0FBZWU7QUFENUIsR0FEZ0Q7QUFJdERaLEVBQUFBLE9BQU8sRUFBRTtBQUNQSixJQUFBQSxTQUFTLDRCQUFxQlAsT0FBTyxDQUFDWSxHQUFSLENBQVlQLElBQWpDO0FBREYsR0FKNkM7QUFPdERRLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxLQUFLLEVBQUViLE1BQU0sQ0FBQ08sT0FBUCxDQUFlTztBQURYLEdBUHlDO0FBVXREQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFLE1BREo7QUFFTFgsSUFBQUEsZUFBZSxFQUFFLE9BRlo7QUFHTEMsSUFBQUEsU0FBUyxzQkFBZU4sTUFBTSxDQUFDaUIsSUFBUCxDQUFZTSxHQUEzQjtBQUhKLEdBVitDO0FBZXRESCxFQUFBQSxRQUFRLEVBQUU7QUFDUmQsSUFBQUEsU0FBUyw0QkFBcUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFwQyxDQUREO0FBRVJKLElBQUFBLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVjO0FBRnhCO0FBZjRDLENBQTdCLENBQTNCO0FBcUJBbkIsZ0JBQWdCLENBQUNzQixJQUFqQixHQUF3QjFCLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkI7QUFDbkRDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUU7QUFEYixHQUQ2QztBQUluREssRUFBQUEsT0FBTyxFQUFFLEVBSjBDO0FBS25ERSxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsS0FBSyxFQUFFYixNQUFNLENBQUNPLE9BQVAsQ0FBZU87QUFEWCxHQUxzQztBQVFuREMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLE9BQU8sRUFBRTtBQURKLEdBUjRDO0FBV25ESSxFQUFBQSxRQUFRLEVBQUU7QUFDUmYsSUFBQUEsZUFBZSxFQUFFTCxNQUFNLENBQUNPLE9BQVAsQ0FBZWM7QUFEeEI7QUFYeUMsQ0FBN0IsQ0FBeEI7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFNSSxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLENBQUFDLFVBQVUsRUFBSTtBQUMzQyxVQUFRQSxVQUFSO0FBQ0UsU0FBSyxTQUFMO0FBQ0UsYUFBT3hCLGdCQUFnQixDQUFDSyxPQUF4Qjs7QUFDRixTQUFLLE1BQUw7QUFDRSxhQUFPTCxnQkFBZ0IsQ0FBQ3NCLElBQXhCOztBQUNGO0FBQ0UsYUFBT3RCLGdCQUFnQixXQUF2QjtBQU5KO0FBUUQsQ0FURDtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLGVBQWVELGdCQUFnQixDQUFDd0Isc0JBQUQsQ0FBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaGVtZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZXInXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3BhbGV0dGUnXG5pbXBvcnQgc2NhbGVzIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvc2NhbGVzJ1xuaW1wb3J0IG1lbW9pemVDbGFzc05hbWUgZnJvbSAnLi4vdXRpbHMvbWVtb2l6ZUNsYXNzTmFtZSdcblxuY29uc3QgSW5wdXRBcHBlYXJhbmNlcyA9IHt9XG5cbklucHV0QXBwZWFyYW5jZXMuZGVmYXVsdCA9IFRoZW1lci5jcmVhdGVJbnB1dEFwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk41QX0sIGluc2V0IDAgMXB4IDJweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gXG4gIH0sXG4gIGludmFsaWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtwYWxldHRlLnJlZC5iYXNlfSwgaW5zZXQgMCAxcHggMnB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAycHggJHtzY2FsZXMubmV1dHJhbC5ONEF9LCBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMuYmx1ZS5CN30sIDAgMCAwIDNweCAke3NjYWxlcy5ibHVlLkI0QX1gXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG5JbnB1dEFwcGVhcmFuY2VzLm5ldXRyYWwgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJBXG4gIH0sXG4gIGludmFsaWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtwYWxldHRlLnJlZC5iYXNlfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6IGAwIDAgMCAycHggJHtzY2FsZXMuYmx1ZS5CNkF9YFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuSW5wdXRBcHBlYXJhbmNlcy5ub25lID0gVGhlbWVyLmNyZWF0ZUlucHV0QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZSdcbiAgfSxcbiAgaW52YWxpZDoge30sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJ1xuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuLyoqXG4gKiBHZXQgdGhlIGFwcGVhcmFuY2Ugb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlIC0gdGhlIGFwcGVhcmFuY2UgbmFtZVxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgYXBwZWFyYW5jZSBvYmplY3QuXG4gKi9cbmNvbnN0IGdldFRleHRJbnB1dEFwcGVhcmFuY2UgPSBhcHBlYXJhbmNlID0+IHtcbiAgc3dpdGNoIChhcHBlYXJhbmNlKSB7XG4gICAgY2FzZSAnbmV1dHJhbCc6XG4gICAgICByZXR1cm4gSW5wdXRBcHBlYXJhbmNlcy5uZXV0cmFsXG4gICAgY2FzZSAnbm9uZSc6XG4gICAgICByZXR1cm4gSW5wdXRBcHBlYXJhbmNlcy5ub25lXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBJbnB1dEFwcGVhcmFuY2VzLmRlZmF1bHRcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgY2xhc3NOYW1lIG9mIGEgYFRleHRJbnB1dGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwZWFyYW5jZSAtIHRoZSBhcHBlYXJhbmNlIG5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGFwcGVhcmFuY2UgY2xhc3MgbmFtZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNsYXNzTmFtZShnZXRUZXh0SW5wdXRBcHBlYXJhbmNlKVxuIl19