import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["hint", "label", "labelFor", "children", "isRequired", "labelProps", "description", "validationMessage"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import Box, { dimensions, spacing, position, layout } from 'ui-box';
import FormFieldDescription from './FormFieldDescription';
import FormFieldHint from './FormFieldHint';
import FormFieldLabel from './FormFieldLabel';
import FormFieldValidationMessage from './FormFieldValidationMessage';
var FormField = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function FormField(props, ref) {
  var hint = props.hint,
      label = props.label,
      labelFor = props.labelFor,
      children = props.children,
      isRequired = props.isRequired,
      _props$labelProps = props.labelProps,
      labelProps = _props$labelProps === void 0 ? {
    size: 400
  } : _props$labelProps,
      description = props.description,
      validationMessage = props.validationMessage,
      rest = _objectWithoutProperties(props, _excluded);

  return /*#__PURE__*/React.createElement(Box, _extends({}, rest, {
    ref: ref
  }), /*#__PURE__*/React.createElement(Box, {
    display: "flex",
    flexDirection: "column",
    marginBottom: 8
  }, /*#__PURE__*/React.createElement(FormFieldLabel, _extends({
    htmlFor: labelFor,
    isAstrixShown: isRequired
  }, labelProps), label), typeof description === 'string' ? /*#__PURE__*/React.createElement(FormFieldDescription, null, description) : description), children, typeof validationMessage === 'string' ? /*#__PURE__*/React.createElement(FormFieldValidationMessage, {
    marginTop: 8
  }, validationMessage) : validationMessage, typeof hint === 'string' ? /*#__PURE__*/React.createElement(FormFieldHint, {
    marginTop: 6
  }, hint) : hint);
}));
FormField.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread({
  /**
   * The label used above the input element.
   */
  label: PropTypes.node.isRequired,

  /**
   * Passed on the label as a htmlFor prop.
   */
  labelFor: PropTypes.string,

  /**
   * Whether or not show an asterix after the label.
   */
  isRequired: PropTypes.bool,

  /**
   * An optional description of the field under the label, above the input element.
   */
  description: PropTypes.node,

  /**
   * An optional hint under the input element.
   */
  hint: PropTypes.node,

  /**
   * If a validation message is passed it is shown under the input element
   * and above the hint. This is unaffected by `isInvalid`.
   */
  validationMessage: PropTypes.node
}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes);
export default FormField;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtLWZpZWxkL3NyYy9Gb3JtRmllbGQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsIlByb3BUeXBlcyIsIkJveCIsImRpbWVuc2lvbnMiLCJzcGFjaW5nIiwicG9zaXRpb24iLCJsYXlvdXQiLCJGb3JtRmllbGREZXNjcmlwdGlvbiIsIkZvcm1GaWVsZEhpbnQiLCJGb3JtRmllbGRMYWJlbCIsIkZvcm1GaWVsZFZhbGlkYXRpb25NZXNzYWdlIiwiRm9ybUZpZWxkIiwicHJvcHMiLCJyZWYiLCJoaW50IiwibGFiZWwiLCJsYWJlbEZvciIsImNoaWxkcmVuIiwiaXNSZXF1aXJlZCIsImxhYmVsUHJvcHMiLCJzaXplIiwiZGVzY3JpcHRpb24iLCJ2YWxpZGF0aW9uTWVzc2FnZSIsInJlc3QiLCJwcm9wVHlwZXMiLCJub2RlIiwic3RyaW5nIiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsSUFBaEIsRUFBc0JDLFVBQXRCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEdBQVAsSUFBY0MsVUFBZCxFQUEwQkMsT0FBMUIsRUFBbUNDLFFBQW5DLEVBQTZDQyxNQUE3QyxRQUEyRCxRQUEzRDtBQUNBLE9BQU9DLG9CQUFQLE1BQWlDLHdCQUFqQztBQUNBLE9BQU9DLGFBQVAsTUFBMEIsaUJBQTFCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQixrQkFBM0I7QUFDQSxPQUFPQywwQkFBUCxNQUF1Qyw4QkFBdkM7QUFFQSxJQUFNQyxTQUFTLGdCQUFHWixJQUFJLGVBQ3BCQyxVQUFVLENBQUMsU0FBU1csU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLEdBQTFCLEVBQStCO0FBQ3hDLE1BQ0VDLElBREYsR0FVSUYsS0FWSixDQUNFRSxJQURGO0FBQUEsTUFFRUMsS0FGRixHQVVJSCxLQVZKLENBRUVHLEtBRkY7QUFBQSxNQUdFQyxRQUhGLEdBVUlKLEtBVkosQ0FHRUksUUFIRjtBQUFBLE1BSUVDLFFBSkYsR0FVSUwsS0FWSixDQUlFSyxRQUpGO0FBQUEsTUFLRUMsVUFMRixHQVVJTixLQVZKLENBS0VNLFVBTEY7QUFBQSwwQkFVSU4sS0FWSixDQU1FTyxVQU5GO0FBQUEsTUFNRUEsVUFORixrQ0FNZTtBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQU5mO0FBQUEsTUFPRUMsV0FQRixHQVVJVCxLQVZKLENBT0VTLFdBUEY7QUFBQSxNQVFFQyxpQkFSRixHQVVJVixLQVZKLENBUUVVLGlCQVJGO0FBQUEsTUFTS0MsSUFUTCw0QkFVSVgsS0FWSjs7QUFZQSxzQkFDRSxvQkFBQyxHQUFELGVBQVNXLElBQVQ7QUFBZSxJQUFBLEdBQUcsRUFBRVY7QUFBcEIsbUJBQ0Usb0JBQUMsR0FBRDtBQUFLLElBQUEsT0FBTyxFQUFDLE1BQWI7QUFBb0IsSUFBQSxhQUFhLEVBQUMsUUFBbEM7QUFBMkMsSUFBQSxZQUFZLEVBQUU7QUFBekQsa0JBQ0Usb0JBQUMsY0FBRDtBQUFnQixJQUFBLE9BQU8sRUFBRUcsUUFBekI7QUFBbUMsSUFBQSxhQUFhLEVBQUVFO0FBQWxELEtBQWtFQyxVQUFsRSxHQUNHSixLQURILENBREYsRUFJRyxPQUFPTSxXQUFQLEtBQXVCLFFBQXZCLGdCQUFrQyxvQkFBQyxvQkFBRCxRQUF1QkEsV0FBdkIsQ0FBbEMsR0FBK0ZBLFdBSmxHLENBREYsRUFPR0osUUFQSCxFQVFHLE9BQU9LLGlCQUFQLEtBQTZCLFFBQTdCLGdCQUNDLG9CQUFDLDBCQUFEO0FBQTRCLElBQUEsU0FBUyxFQUFFO0FBQXZDLEtBQTJDQSxpQkFBM0MsQ0FERCxHQUdDQSxpQkFYSixFQWFHLE9BQU9SLElBQVAsS0FBZ0IsUUFBaEIsZ0JBQTJCLG9CQUFDLGFBQUQ7QUFBZSxJQUFBLFNBQVMsRUFBRTtBQUExQixLQUE4QkEsSUFBOUIsQ0FBM0IsR0FBaUZBLElBYnBGLENBREY7QUFpQkQsQ0E5QlMsQ0FEVSxDQUF0QjtBQWtDQUgsU0FBUyxDQUFDYSxTQUFWO0FBQ0U7QUFDRjtBQUNBO0FBQ0VULEVBQUFBLEtBQUssRUFBRWQsU0FBUyxDQUFDd0IsSUFBVixDQUFlUCxVQUp4Qjs7QUFNRTtBQUNGO0FBQ0E7QUFDRUYsRUFBQUEsUUFBUSxFQUFFZixTQUFTLENBQUN5QixNQVR0Qjs7QUFXRTtBQUNGO0FBQ0E7QUFDRVIsRUFBQUEsVUFBVSxFQUFFakIsU0FBUyxDQUFDMEIsSUFkeEI7O0FBZ0JFO0FBQ0Y7QUFDQTtBQUNFTixFQUFBQSxXQUFXLEVBQUVwQixTQUFTLENBQUN3QixJQW5CekI7O0FBcUJFO0FBQ0Y7QUFDQTtBQUNFWCxFQUFBQSxJQUFJLEVBQUViLFNBQVMsQ0FBQ3dCLElBeEJsQjs7QUEwQkU7QUFDRjtBQUNBO0FBQ0E7QUFDRUgsRUFBQUEsaUJBQWlCLEVBQUVyQixTQUFTLENBQUN3QjtBQTlCL0IsR0FtQ0t0QixVQUFVLENBQUNxQixTQW5DaEIsR0F3Q0twQixPQUFPLENBQUNvQixTQXhDYixHQTZDS25CLFFBQVEsQ0FBQ21CLFNBN0NkLEdBa0RLbEIsTUFBTSxDQUFDa0IsU0FsRFo7QUFxREEsZUFBZWIsU0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBtZW1vLCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgQm94LCB7IGRpbWVuc2lvbnMsIHNwYWNpbmcsIHBvc2l0aW9uLCBsYXlvdXQgfSBmcm9tICd1aS1ib3gnXG5pbXBvcnQgRm9ybUZpZWxkRGVzY3JpcHRpb24gZnJvbSAnLi9Gb3JtRmllbGREZXNjcmlwdGlvbidcbmltcG9ydCBGb3JtRmllbGRIaW50IGZyb20gJy4vRm9ybUZpZWxkSGludCdcbmltcG9ydCBGb3JtRmllbGRMYWJlbCBmcm9tICcuL0Zvcm1GaWVsZExhYmVsJ1xuaW1wb3J0IEZvcm1GaWVsZFZhbGlkYXRpb25NZXNzYWdlIGZyb20gJy4vRm9ybUZpZWxkVmFsaWRhdGlvbk1lc3NhZ2UnXG5cbmNvbnN0IEZvcm1GaWVsZCA9IG1lbW8oXG4gIGZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUZpZWxkKHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7XG4gICAgICBoaW50LFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbEZvcixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaXNSZXF1aXJlZCxcbiAgICAgIGxhYmVsUHJvcHMgPSB7IHNpemU6IDQwMCB9LFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICB2YWxpZGF0aW9uTWVzc2FnZSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gcHJvcHNcblxuICAgIHJldHVybiAoXG4gICAgICA8Qm94IHsuLi5yZXN0fSByZWY9e3JlZn0+XG4gICAgICAgIDxCb3ggZGlzcGxheT1cImZsZXhcIiBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgbWFyZ2luQm90dG9tPXs4fT5cbiAgICAgICAgICA8Rm9ybUZpZWxkTGFiZWwgaHRtbEZvcj17bGFiZWxGb3J9IGlzQXN0cml4U2hvd249e2lzUmVxdWlyZWR9IHsuLi5sYWJlbFByb3BzfT5cbiAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICA8L0Zvcm1GaWVsZExhYmVsPlxuICAgICAgICAgIHt0eXBlb2YgZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnID8gPEZvcm1GaWVsZERlc2NyaXB0aW9uPntkZXNjcmlwdGlvbn08L0Zvcm1GaWVsZERlc2NyaXB0aW9uPiA6IGRlc2NyaXB0aW9ufVxuICAgICAgICA8L0JveD5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICB7dHlwZW9mIHZhbGlkYXRpb25NZXNzYWdlID09PSAnc3RyaW5nJyA/IChcbiAgICAgICAgICA8Rm9ybUZpZWxkVmFsaWRhdGlvbk1lc3NhZ2UgbWFyZ2luVG9wPXs4fT57dmFsaWRhdGlvbk1lc3NhZ2V9PC9Gb3JtRmllbGRWYWxpZGF0aW9uTWVzc2FnZT5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZVxuICAgICAgICApfVxuICAgICAgICB7dHlwZW9mIGhpbnQgPT09ICdzdHJpbmcnID8gPEZvcm1GaWVsZEhpbnQgbWFyZ2luVG9wPXs2fT57aGludH08L0Zvcm1GaWVsZEhpbnQ+IDogaGludH1cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfSlcbilcblxuRm9ybUZpZWxkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCB1c2VkIGFib3ZlIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFBhc3NlZCBvbiB0aGUgbGFiZWwgYXMgYSBodG1sRm9yIHByb3AuXG4gICAqL1xuICBsYWJlbEZvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3Qgc2hvdyBhbiBhc3Rlcml4IGFmdGVyIHRoZSBsYWJlbC5cbiAgICovXG4gIGlzUmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBkZXNjcmlwdGlvbiBvZiB0aGUgZmllbGQgdW5kZXIgdGhlIGxhYmVsLCBhYm92ZSB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICovXG4gIGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgaGludCB1bmRlciB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICovXG4gIGhpbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBhIHZhbGlkYXRpb24gbWVzc2FnZSBpcyBwYXNzZWQgaXQgaXMgc2hvd24gdW5kZXIgdGhlIGlucHV0IGVsZW1lbnRcbiAgICogYW5kIGFib3ZlIHRoZSBoaW50LiBUaGlzIGlzIHVuYWZmZWN0ZWQgYnkgYGlzSW52YWxpZGAuXG4gICAqL1xuICB2YWxpZGF0aW9uTWVzc2FnZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIENvbXBvc2VzIHRoZSBkaW1lbnNpb25zIHNwZWMgZnJvbSB0aGUgQm94IHByaW1pdGl2ZS5cbiAgICovXG4gIC4uLmRpbWVuc2lvbnMucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBDb21wb3NlcyB0aGUgc3BhY2luZyBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5zcGFjaW5nLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIHBvc2l0aW9uIHNwZWMgZnJvbSB0aGUgQm94IHByaW1pdGl2ZS5cbiAgICovXG4gIC4uLnBvc2l0aW9uLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIGxheW91dCBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5sYXlvdXQucHJvcFR5cGVzXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1GaWVsZFxuIl19