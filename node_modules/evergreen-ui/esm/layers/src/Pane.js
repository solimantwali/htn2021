import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["activeElevation", "background", "border", "borderBottom", "borderLeft", "borderRight", "borderTop", "className", "elevation", "hoverElevation"],
    _excluded2 = ["className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { useStyleConfig } from '../../hooks';
var pseudoSelectors = {
  _hover: '&:hover',
  _active: '&:active'
};
var internalStyles = {};
var Pane = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Pane(props, ref) {
  var activeElevation = props.activeElevation,
      background = props.background,
      border = props.border,
      borderBottom = props.borderBottom,
      borderLeft = props.borderLeft,
      borderRight = props.borderRight,
      borderTop = props.borderTop,
      className = props.className,
      elevation = props.elevation,
      hoverElevation = props.hoverElevation,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useStyleConfig = useStyleConfig('Pane', {
    elevation: elevation,
    hoverElevation: hoverElevation,
    activeElevation: activeElevation,
    background: background,
    border: border,
    borderTop: borderTop,
    borderRight: borderRight,
    borderBottom: borderBottom,
    borderLeft: borderLeft
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  return /*#__PURE__*/React.createElement(Box, _extends({
    ref: ref,
    className: cx(className, themedClassName)
  }, styleProps, restProps));
}));
var StringAndBoolPropType = PropTypes.oneOfType([PropTypes.string, PropTypes.bool]);
Pane.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {
  /**
   * Background property.
   * `tint1`, `tint2` etc. from `theme.colors` are available.
   */
  background: PropTypes.string,

  /**
   * Elevation of the Pane.
   * Values: 0, 1, 2, 3, 4.
   */
  elevation: PropTypes.oneOf([0, 1, 2, 3, 4]),

  /**
   * Elevation of the Pane on hover. Might get deprecated.
   * Values: 0, 1, 2, 3, 4.
   */
  hoverElevation: PropTypes.oneOf([0, 1, 2, 3, 4]),

  /**
   * Elevation of the Pane on click. Might get deprecated.
   * Values: 0, 1, 2, 3, 4.
   */
  activeElevation: PropTypes.oneOf([0, 1, 2, 3, 4]),

  /**
   * Can be a explicit border value or a boolean.
   * Values: true, muted, default.
   */
  border: StringAndBoolPropType,

  /**
   * Can be a explicit border value or a boolean.
   * Values: true, extraMuted, muted, default.
   */
  borderTop: StringAndBoolPropType,

  /**
   * Can be a explicit border value or a boolean.
   * Values: true, extraMuted, muted, default.
   */
  borderRight: StringAndBoolPropType,

  /**
   * Can be a explicit border value or a boolean.
   * Values: true, extraMuted, muted, default.
   */
  borderBottom: StringAndBoolPropType,

  /**
   * Can be a explicit border value or a boolean.
   * Values: true, extraMuted, muted, default.
   */
  borderLeft: StringAndBoolPropType
});
export default Pane;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYXllcnMvc3JjL1BhbmUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImN4IiwiUHJvcFR5cGVzIiwiQm94IiwidXNlU3R5bGVDb25maWciLCJwc2V1ZG9TZWxlY3RvcnMiLCJfaG92ZXIiLCJfYWN0aXZlIiwiaW50ZXJuYWxTdHlsZXMiLCJQYW5lIiwicHJvcHMiLCJyZWYiLCJhY3RpdmVFbGV2YXRpb24iLCJiYWNrZ3JvdW5kIiwiYm9yZGVyIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyTGVmdCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyVG9wIiwiY2xhc3NOYW1lIiwiZWxldmF0aW9uIiwiaG92ZXJFbGV2YXRpb24iLCJyZXN0UHJvcHMiLCJ0aGVtZWRDbGFzc05hbWUiLCJzdHlsZVByb3BzIiwiU3RyaW5nQW5kQm9vbFByb3BUeXBlIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiYm9vbCIsInByb3BUeXBlcyIsIm9uZU9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsSUFBaEIsRUFBc0JDLFVBQXRCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsRUFBUCxNQUFlLFlBQWY7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixRQUFoQjtBQUNBLFNBQVNDLGNBQVQsUUFBK0IsYUFBL0I7QUFFQSxJQUFNQyxlQUFlLEdBQUc7QUFDdEJDLEVBQUFBLE1BQU0sRUFBRSxTQURjO0FBRXRCQyxFQUFBQSxPQUFPLEVBQUU7QUFGYSxDQUF4QjtBQUtBLElBQU1DLGNBQWMsR0FBRyxFQUF2QjtBQUVBLElBQU1DLElBQUksZ0JBQUdWLElBQUksZUFDZkMsVUFBVSxDQUFDLFNBQVNTLElBQVQsQ0FBY0MsS0FBZCxFQUFxQkMsR0FBckIsRUFBMEI7QUFDbkMsTUFDRUMsZUFERixHQWVJRixLQWZKLENBQ0VFLGVBREY7QUFBQSxNQUlFQyxVQUpGLEdB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WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgQm94IGZyb20gJ3VpLWJveCdcbmltcG9ydCB7IHVzZVN0eWxlQ29uZmlnIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5cbmNvbnN0IHBzZXVkb1NlbGVjdG9ycyA9IHtcbiAgX2hvdmVyOiAnJjpob3ZlcicsXG4gIF9hY3RpdmU6ICcmOmFjdGl2ZSdcbn1cblxuY29uc3QgaW50ZXJuYWxTdHlsZXMgPSB7fVxuXG5jb25zdCBQYW5lID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBQYW5lKHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmVFbGV2YXRpb24sXG5cbiAgICAgIC8vIFB1bGxlZCBvdXQgb2YgcHJvcHMgYmVjYXVzZSB3ZSdsbCBnZXQgdGhlbSBmcm9tIHRoZSBzdHlsZSBob29rXG4gICAgICBiYWNrZ3JvdW5kLFxuICAgICAgYm9yZGVyLFxuICAgICAgYm9yZGVyQm90dG9tLFxuICAgICAgYm9yZGVyTGVmdCxcbiAgICAgIGJvcmRlclJpZ2h0LFxuICAgICAgYm9yZGVyVG9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZWxldmF0aW9uLFxuICAgICAgaG92ZXJFbGV2YXRpb24sXG5cbiAgICAgIC4uLnJlc3RQcm9wc1xuICAgIH0gPSBwcm9wc1xuXG4gICAgY29uc3QgeyBjbGFzc05hbWU6IHRoZW1lZENsYXNzTmFtZSwgLi4uc3R5bGVQcm9wcyB9ID0gdXNlU3R5bGVDb25maWcoXG4gICAgICAnUGFuZScsXG4gICAgICB7XG4gICAgICAgIGVsZXZhdGlvbixcbiAgICAgICAgaG92ZXJFbGV2YXRpb24sXG4gICAgICAgIGFjdGl2ZUVsZXZhdGlvbixcbiAgICAgICAgYmFja2dyb3VuZCxcbiAgICAgICAgYm9yZGVyLFxuICAgICAgICBib3JkZXJUb3AsXG4gICAgICAgIGJvcmRlclJpZ2h0LFxuICAgICAgICBib3JkZXJCb3R0b20sXG4gICAgICAgIGJvcmRlckxlZnRcbiAgICAgIH0sXG4gICAgICBwc2V1ZG9TZWxlY3RvcnMsXG4gICAgICBpbnRlcm5hbFN0eWxlc1xuICAgIClcblxuICAgIHJldHVybiA8Qm94IHJlZj17cmVmfSBjbGFzc05hbWU9e2N4KGNsYXNzTmFtZSwgdGhlbWVkQ2xhc3NOYW1lKX0gey4uLnN0eWxlUHJvcHN9IHsuLi5yZXN0UHJvcHN9IC8+XG4gIH0pXG4pXG5cbmNvbnN0IFN0cmluZ0FuZEJvb2xQcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSlcblxuUGFuZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDb21wb3NlcyB0aGUgQm94IGNvbXBvbmVudCBhcyB0aGUgYmFzZS5cbiAgICovXG4gIC4uLkJveC5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIEJhY2tncm91bmQgcHJvcGVydHkuXG4gICAqIGB0aW50MWAsIGB0aW50MmAgZXRjLiBmcm9tIGB0aGVtZS5jb2xvcnNgIGFyZSBhdmFpbGFibGUuXG4gICAqL1xuICBiYWNrZ3JvdW5kOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBFbGV2YXRpb24gb2YgdGhlIFBhbmUuXG4gICAqIFZhbHVlczogMCwgMSwgMiwgMywgNC5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFswLCAxLCAyLCAzLCA0XSksXG5cbiAgLyoqXG4gICAqIEVsZXZhdGlvbiBvZiB0aGUgUGFuZSBvbiBob3Zlci4gTWlnaHQgZ2V0IGRlcHJlY2F0ZWQuXG4gICAqIFZhbHVlczogMCwgMSwgMiwgMywgNC5cbiAgICovXG4gIGhvdmVyRWxldmF0aW9uOiBQcm9wVHlwZXMub25lT2YoWzAsIDEsIDIsIDMsIDRdKSxcblxuICAvKipcbiAgICogRWxldmF0aW9uIG9mIHRoZSBQYW5lIG9uIGNsaWNrLiBNaWdodCBnZXQgZGVwcmVjYXRlZC5cbiAgICogVmFsdWVzOiAwLCAxLCAyLCAzLCA0LlxuICAgKi9cbiAgYWN0aXZlRWxldmF0aW9uOiBQcm9wVHlwZXMub25lT2YoWzAsIDEsIDIsIDMsIDRdKSxcblxuICAvKipcbiAgICogQ2FuIGJlIGEgZXhwbGljaXQgYm9yZGVyIHZhbHVlIG9yIGEgYm9vbGVhbi5cbiAgICogVmFsdWVzOiB0cnVlLCBtdXRlZCwgZGVmYXVsdC5cbiAgICovXG4gIGJvcmRlcjogU3RyaW5nQW5kQm9vbFByb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBDYW4gYmUgYSBleHBsaWNpdCBib3JkZXIgdmFsdWUgb3IgYSBib29sZWFuLlxuICAgKiBWYWx1ZXM6IHRydWUsIGV4dHJhTXV0ZWQsIG11dGVkLCBkZWZhdWx0LlxuICAgKi9cbiAgYm9yZGVyVG9wOiBTdHJpbmdBbmRCb29sUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIENhbiBiZSBhIGV4cGxpY2l0IGJvcmRlciB2YWx1ZSBvciBhIGJvb2xlYW4uXG4gICAqIFZhbHVlczogdHJ1ZSwgZXh0cmFNdXRlZCwgbXV0ZWQsIGRlZmF1bHQuXG4gICAqL1xuICBib3JkZXJSaWdodDogU3RyaW5nQW5kQm9vbFByb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBDYW4gYmUgYSBleHBsaWNpdCBib3JkZXIgdmFsdWUgb3IgYSBib29sZWFuLlxuICAgKiBWYWx1ZXM6IHRydWUsIGV4dHJhTXV0ZWQsIG11dGVkLCBkZWZhdWx0LlxuICAgKi9cbiAgYm9yZGVyQm90dG9tOiBTdHJpbmdBbmRCb29sUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIENhbiBiZSBhIGV4cGxpY2l0IGJvcmRlciB2YWx1ZSBvciBhIGJvb2xlYW4uXG4gICAqIFZhbHVlczogdHJ1ZSwgZXh0cmFNdXRlZCwgbXV0ZWQsIGRlZmF1bHQuXG4gICAqL1xuICBib3JkZXJMZWZ0OiBTdHJpbmdBbmRCb29sUHJvcFR5cGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFuZVxuIl19