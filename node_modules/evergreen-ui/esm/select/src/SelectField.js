import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["appearance", "description", "disabled", "hint", "id", "inputHeight", "inputWidth", "isInvalid", "label", "required", "validationMessage"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { splitBoxProps } from 'ui-box';
import { FormField } from '../../form-field';
import { useId } from '../../hooks';
import Select from './Select';
var SelectField = /*#__PURE__*/memo(function SelectField(props) {
  var id = useId('SelectField', props.id);

  var appearance = props.appearance,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      unusedId = props.id,
      _props$inputHeight = props.inputHeight,
      inputHeight = _props$inputHeight === void 0 ? 32 : _props$inputHeight,
      _props$inputWidth = props.inputWidth,
      inputWidth = _props$inputWidth === void 0 ? '100%' : _props$inputWidth,
      isInvalid = props.isInvalid,
      label = props.label,
      required = props.required,
      validationMessage = props.validationMessage,
      rest = _objectWithoutProperties(props, _excluded);
  /**
   * Split the wrapper props from the input props.
   */


  var _splitBoxProps = splitBoxProps(rest),
      matchedProps = _splitBoxProps.matchedProps,
      remainingProps = _splitBoxProps.remainingProps;

  return /*#__PURE__*/React.createElement(FormField, _extends({
    marginBottom: 24,
    label: label,
    isRequired: required,
    hint: hint,
    description: description,
    validationMessage: validationMessage,
    labelFor: id
  }, matchedProps), /*#__PURE__*/React.createElement(Select, _extends({
    id: id,
    width: inputWidth,
    height: inputHeight,
    disabled: disabled,
    required: required,
    isInvalid: isInvalid,
    appearance: appearance
  }, remainingProps)));
});
SelectField.propTypes = _objectSpread(_objectSpread(_objectSpread({}, Select.propTypes), FormField.propTypes), {}, {
  /**
   * The label used above the input element.
   */
  label: PropTypes.node.isRequired,

  /**
   * Passed on the label as a htmlFor prop.
   */
  labelFor: PropTypes.string,

  /**
   * Whether or not to show an asterix after the label.
   */
  required: PropTypes.bool,

  /**
   * An optional description of the field under the label, above the input element.
   */
  description: PropTypes.node,

  /**
   * An optional hint under the input element.
   */
  hint: PropTypes.node,

  /**
   * If a validation message is passed it is shown under the input element
   * and above the hint. This is unaffected by `isInvalid`.
   */
  validationMessage: PropTypes.node,

  /**
   * The height of the input element.
   */
  inputHeight: PropTypes.number,

  /**
   * The width of the input width.
   */
  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
});
export default SelectField;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWxlY3Qvc3JjL1NlbGVjdEZpZWxkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsIlByb3BUeXBlcyIsInNwbGl0Qm94UHJvcHMiLCJGb3JtRmllbGQiLCJ1c2VJZCIsIlNlbGVjdCIsIlNlbGVjdEZpZWxkIiwicHJvcHMiLCJpZCIsImFwcGVhcmFuY2UiLCJkZXNjcmlwdGlvbiIsImRpc2FibGVkIiwiaGludCIsInVudXNlZElkIiwiaW5wdXRIZWlnaHQiLCJpbnB1dFdpZHRoIiwiaXNJbnZhbGlkIiwibGFiZWwiLCJyZXF1aXJlZCIsInZhbGlkYXRpb25NZXNzYWdlIiwicmVzdCIsIm1hdGNoZWRQcm9wcyIsInJlbWFpbmluZ1Byb3BzIiwicHJvcFR5cGVzIiwibm9kZSIsImlzUmVxdWlyZWQiLCJsYWJlbEZvciIsInN0cmluZyIsImJvb2wiLCJudW1iZXIiLCJvbmVPZlR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLFFBQTRCLE9BQTVCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLGFBQVQsUUFBOEIsUUFBOUI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGtCQUExQjtBQUNBLFNBQVNDLEtBQVQsUUFBc0IsYUFBdEI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLFVBQW5CO0FBRUEsSUFBTUMsV0FBVyxnQkFBR04sSUFBSSxDQUFDLFNBQVNNLFdBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCO0FBQ25ELE1BQU1DLEVBQUUsR0FBR0osS0FBSyxDQUFDLGFBQUQsRUFBZ0JHLEtBQUssQ0FBQ0MsRUFBdEIsQ0FBaEI7O0FBRUEsTUFFRUMsVUFGRixHQXFCSUYsS0FyQkosQ0FFRUUsVUFGRjtBQUFBLE1BS0VDLFdBTEYsR0FxQklILEtBckJKLENBS0VHLFdBTEY7QUFBQSxNQU1FQyxRQU5GLEdBcUJJSixLQXJCSixDQU1FSSxRQU5GO0FBQUEsTUFPRUMsSUFQRixHQXFCSUwsS0FyQkosQ0FPRUssSUFQRjtBQUFBLE1BUU1DLFFBUk4sR0FxQklOLEtBckJKLENBUUVDLEVBUkY7QUFBQSwyQkFxQklELEtBckJKLENBV0VPLFdBWEY7QUFBQSxNQVdFQSxXQVhGLG1DQVdnQixFQVhoQjtBQUFBLDBCQXFCSVAsS0FyQkosQ0FhRVEsVUFiRjtBQUFBLE1BYUVBLFVBYkYsa0NBYWUsTUFiZjtBQUFBLE1BY0VDLFNBZEYsR0FxQklULEtBckJKLENBY0VTLFNBZEY7QUFBQSxNQWVFQyxLQWZGLEdBcUJJVixLQXJCSixDQWVFVSxLQWZGO0FBQUEsTUFnQkVDLFFBaEJGLEdBcUJJWCxLQXJCSixDQWdCRVcsUUFoQkY7QUFBQSxNQWlCRUMsaUJBakJGLEdBcUJJWixLQXJCSixDQWlCRVksaUJBakJGO0FBQUEsTUFvQktDLElBcEJMLDRCQXFCSWIsS0FyQko7QUF1QkE7QUFDRjtBQUNBOzs7QUFDRSx1QkFBeUNMLGFBQWEsQ0FBQ2tCLElBQUQsQ0FBdEQ7QUFBQSxNQUFRQyxZQUFSLGtCQUFRQSxZQUFSO0FBQUEsTUFBc0JDLGNBQXRCLGtCQUFzQkEsY0FBdEI7O0FBRUEsc0JBQ0Usb0JBQUMsU0FBRDtBQUNFLElBQUEsWUFBWSxFQUFFLEVBRGhCO0FBRUUsSUFBQSxLQUFLLEVBQUVMLEtBRlQ7QUFHRSxJQUFBLFVBQVUsRUFBRUMsUUFIZDtBQUlFLElBQUEsSUFBSSxFQUFFTixJQUpSO0FBS0UsSUFBQSxXQUFXLEVBQUVGLFdBTGY7QUFNRSxJQUFBLGlCQUFpQixFQUFFUyxpQkFOckI7QUFPRSxJQUFBLFFBQVEsRUFBRVg7QUFQWixLQVFNYSxZQVJOLGdCQVVFLG9CQUFDLE1BQUQ7QUFDRSxJQUFBLEVBQUUsRUFBRWIsRUFETjtBQUVFLElBQUEsS0FBSyxFQUFFTyxVQUZUO0FBR0UsSUFBQSxNQUFNLEVBQUVELFdBSFY7QUFJRSxJQUFBLFFBQVEsRUFBRUgsUUFKWjtBQUtFLElBQUEsUUFBUSxFQUFFTyxRQUxaO0FBTUUsSUFBQSxTQUFTLEVBQUVGLFNBTmI7QUFPRSxJQUFBLFVBQVUsRUFBRVA7QUFQZCxLQVFNYSxjQVJOLEVBVkYsQ0FERjtBQXVCRCxDQXREdUIsQ0FBeEI7QUF3REFoQixXQUFXLENBQUNpQixTQUFaLGlEQUlLbEIsTUFBTSxDQUFDa0IsU0FKWixHQUtLcEIsU0FBUyxDQUFDb0IsU0FMZjtBQU9FO0FBQ0Y7QUFDQTtBQUNFTixFQUFBQSxLQUFLLEVBQUVoQixTQUFTLENBQUN1QixJQUFWLENBQWVDLFVBVnhCOztBQVlFO0FBQ0Y7QUFDQTtBQUNFQyxFQUFBQSxRQUFRLEVBQUV6QixTQUFTLENBQUMwQixNQWZ0Qjs7QUFpQkU7QUFDRjtBQUNBO0FBQ0VULEVBQUFBLFFBQVEsRUFBRWpCLFNBQVMsQ0FBQzJCLElBcEJ0Qjs7QUFzQkU7QUFDRjtBQUNBO0FBQ0VsQixFQUFBQSxXQUFXLEVBQUVULFNBQVMsQ0FBQ3VCLElBekJ6Qjs7QUEyQkU7QUFDRjtBQUNBO0FBQ0VaLEVBQUFBLElBQUksRUFBRVgsU0FBUyxDQUFDdUIsSUE5QmxCOztBQWdDRTtBQUNGO0FBQ0E7QUFDQTtBQUNFTCxFQUFBQSxpQkFBaUIsRUFBRWxCLFNBQVMsQ0FBQ3VCLElBcEMvQjs7QUFzQ0U7QUFDRjtBQUNBO0FBQ0VWLEVBQUFBLFdBQVcsRUFBRWIsU0FBUyxDQUFDNEIsTUF6Q3pCOztBQTJDRTtBQUNGO0FBQ0E7QUFDRWQsRUFBQUEsVUFBVSxFQUFFZCxTQUFTLENBQUM2QixTQUFWLENBQW9CLENBQUM3QixTQUFTLENBQUM0QixNQUFYLEVBQW1CNUIsU0FBUyxDQUFDMEIsTUFBN0IsQ0FBcEI7QUE5Q2Q7QUFpREEsZUFBZXJCLFdBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgc3BsaXRCb3hQcm9wcyB9IGZyb20gJ3VpLWJveCdcbmltcG9ydCB7IEZvcm1GaWVsZCB9IGZyb20gJy4uLy4uL2Zvcm0tZmllbGQnXG5pbXBvcnQgeyB1c2VJZCB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuL1NlbGVjdCdcblxuY29uc3QgU2VsZWN0RmllbGQgPSBtZW1vKGZ1bmN0aW9uIFNlbGVjdEZpZWxkKHByb3BzKSB7XG4gIGNvbnN0IGlkID0gdXNlSWQoJ1NlbGVjdEZpZWxkJywgcHJvcHMuaWQpXG5cbiAgY29uc3Qge1xuICAgIC8vIFdlIGFyZSB1c2luZyB0aGUgaWQgZnJvbSB0aGUgc3RhdGVcbiAgICBhcHBlYXJhbmNlLFxuXG4gICAgLy8gRm9ybUZpZWxkIHByb3BzXG4gICAgZGVzY3JpcHRpb24sXG4gICAgZGlzYWJsZWQsXG4gICAgaGludCxcbiAgICBpZDogdW51c2VkSWQsXG5cbiAgICAvLyBUZXh0SW5wdXQgcHJvcHNcbiAgICBpbnB1dEhlaWdodCA9IDMyLFxuICAgIC8qKiBUaGUgaW5wdXQgd2lkdGggc2hvdWxkIGJlIGFzIHdpZGUgYXMgdGhlIGZvcm0gZmllbGQuICovXG4gICAgaW5wdXRXaWR0aCA9ICcxMDAlJyxcbiAgICBpc0ludmFsaWQsXG4gICAgbGFiZWwsXG4gICAgcmVxdWlyZWQsXG4gICAgdmFsaWRhdGlvbk1lc3NhZ2UsXG5cbiAgICAvLyBSZXN0IHByb3BzIGFyZSBzcHJlYWQgb24gdGhlIEZvcm1GaWVsZFxuICAgIC4uLnJlc3RcbiAgfSA9IHByb3BzXG5cbiAgLyoqXG4gICAqIFNwbGl0IHRoZSB3cmFwcGVyIHByb3BzIGZyb20gdGhlIGlucHV0IHByb3BzLlxuICAgKi9cbiAgY29uc3QgeyBtYXRjaGVkUHJvcHMsIHJlbWFpbmluZ1Byb3BzIH0gPSBzcGxpdEJveFByb3BzKHJlc3QpXG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybUZpZWxkXG4gICAgICBtYXJnaW5Cb3R0b209ezI0fVxuICAgICAgbGFiZWw9e2xhYmVsfVxuICAgICAgaXNSZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICBoaW50PXtoaW50fVxuICAgICAgZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufVxuICAgICAgdmFsaWRhdGlvbk1lc3NhZ2U9e3ZhbGlkYXRpb25NZXNzYWdlfVxuICAgICAgbGFiZWxGb3I9e2lkfVxuICAgICAgey4uLm1hdGNoZWRQcm9wc31cbiAgICA+XG4gICAgICA8U2VsZWN0XG4gICAgICAgIGlkPXtpZH1cbiAgICAgICAgd2lkdGg9e2lucHV0V2lkdGh9XG4gICAgICAgIGhlaWdodD17aW5wdXRIZWlnaHR9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkfVxuICAgICAgICBpc0ludmFsaWQ9e2lzSW52YWxpZH1cbiAgICAgICAgYXBwZWFyYW5jZT17YXBwZWFyYW5jZX1cbiAgICAgICAgey4uLnJlbWFpbmluZ1Byb3BzfVxuICAgICAgLz5cbiAgICA8L0Zvcm1GaWVsZD5cbiAgKVxufSlcblxuU2VsZWN0RmllbGQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIFNlbGVjdCBjb21wb25lbnQgYXMgdGhlIGJhc2UuXG4gICAqL1xuICAuLi5TZWxlY3QucHJvcFR5cGVzLFxuICAuLi5Gb3JtRmllbGQucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgdXNlZCBhYm92ZSB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBQYXNzZWQgb24gdGhlIGxhYmVsIGFzIGEgaHRtbEZvciBwcm9wLlxuICAgKi9cbiAgbGFiZWxGb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRvIHNob3cgYW4gYXN0ZXJpeCBhZnRlciB0aGUgbGFiZWwuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGRlc2NyaXB0aW9uIG9mIHRoZSBmaWVsZCB1bmRlciB0aGUgbGFiZWwsIGFib3ZlIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKi9cbiAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBoaW50IHVuZGVyIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKi9cbiAgaGludDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGEgdmFsaWRhdGlvbiBtZXNzYWdlIGlzIHBhc3NlZCBpdCBpcyBzaG93biB1bmRlciB0aGUgaW5wdXQgZWxlbWVudFxuICAgKiBhbmQgYWJvdmUgdGhlIGhpbnQuIFRoaXMgaXMgdW5hZmZlY3RlZCBieSBgaXNJbnZhbGlkYC5cbiAgICovXG4gIHZhbGlkYXRpb25NZXNzYWdlOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICovXG4gIGlucHV0SGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGlucHV0IHdpZHRoLlxuICAgKi9cbiAgaW5wdXRXaWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdEZpZWxkXG4iXX0=