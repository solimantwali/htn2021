import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "className", "icon", "iconColor", "size"],
    _excluded2 = ["className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { useStyleConfig } from '../../hooks';
import removeUndefined from '../../lib/remove-undefined';
var emptyObject = {};
var internalStyles = {
  margin: 0,
  marginLeft: '1.1em',
  padding: 0,
  listStyle: 'disc'
};
var UnorderedList = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function UnorderedList(props, ref) {
  var children = props.children,
      className = props.className,
      icon = props.icon,
      iconColor = props.iconColor,
      _props$size = props.size,
      size = _props$size === void 0 ? 400 : _props$size,
      rest = _objectWithoutProperties(props, _excluded);

  var _useStyleConfig = useStyleConfig('List', {
    size: size
  }, emptyObject, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  var enrichedChildren = React.Children.map(children, function (child) {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return child;
    }

    return /*#__PURE__*/React.cloneElement(child, removeUndefined(_objectSpread({
      icon: icon,
      size: size,
      iconColor: iconColor
    }, child.props)));
  });
  return /*#__PURE__*/React.createElement(Box, _extends({
    is: "ul",
    className: cx(className, themedClassName)
  }, styleProps, rest, {
    ref: ref
  }), enrichedChildren);
}));
UnorderedList.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {
  /**
   * Size of the text used in a list item.
   * Can be: 300, 400, 500, 600.
   */
  size: PropTypes.oneOf([300, 400, 500, 600]),

  /**
   * When passed, adds a icon before each list item in the list
   * You can override this on a individual list item.
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * The color of the icon in each list item in the list.
   */
  iconColor: PropTypes.string
});
export default UnorderedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L3NyYy9Vbm9yZGVyZWRMaXN0LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsImZvcndhcmRSZWYiLCJjeCIsIlByb3BUeXBlcyIsIkJveCIsInVzZVN0eWxlQ29uZmlnIiwicmVtb3ZlVW5kZWZpbmVkIiwiZW1wdHlPYmplY3QiLCJpbnRlcm5hbFN0eWxlcyIsIm1hcmdpbiIsIm1hcmdpbkxlZnQiLCJwYWRkaW5nIiwibGlzdFN0eWxlIiwiVW5vcmRlcmVkTGlzdCIsInByb3BzIiwicmVmIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJpY29uIiwiaWNvbkNvbG9yIiwic2l6ZSIsInJlc3QiLCJ0aGVtZWRDbGFzc05hbWUiLCJzdHlsZVByb3BzIiwiZW5yaWNoZWRDaGlsZHJlbiIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJpc1ZhbGlkRWxlbWVudCIsImNsb25lRWxlbWVudCIsInByb3BUeXBlcyIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZWxlbWVudFR5cGUiLCJlbGVtZW50Iiwic3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsSUFBaEIsRUFBc0JDLFVBQXRCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsRUFBUCxNQUFlLFlBQWY7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixRQUFoQjtBQUNBLFNBQVNDLGNBQVQsUUFBK0IsYUFBL0I7QUFDQSxPQUFPQyxlQUFQLE1BQTRCLDRCQUE1QjtBQUVBLElBQU1DLFdBQVcsR0FBRyxFQUFwQjtBQUVBLElBQU1DLGNBQWMsR0FBRztBQUNyQkMsRUFBQUEsTUFBTSxFQUFFLENBRGE7QUFFckJDLEVBQUFBLFVBQVUsRUFBRSxPQUZTO0FBR3JCQyxFQUFBQSxPQUFPLEVBQUUsQ0FIWTtBQUlyQkMsRUFBQUEsU0FBUyxFQUFFO0FBSlUsQ0FBdkI7QUFPQSxJQUFNQyxhQUFhLGdCQUFHYixJQUFJLGVBQ3hCQyxVQUFVLENBQUMsU0FBU1ksYUFBVCxDQUF1QkMsS0FBdkIsRUFBOEJDLEdBQTlCLEVBQW1DO0FBQzVDLE1BQVFDLFFBQVIsR0FBc0VGLEtBQXRFLENBQVFFLFFBQVI7QUFBQSxNQUFrQkMsU0FBbEIsR0FBc0VILEtBQXRFLENBQWtCRyxTQUFsQjtBQUFBLE1BQTZCQyxJQUE3QixHQUFzRUosS0FBdEUsQ0FBNkJJLElBQTdCO0FBQUEsTUFBbUNDLFNBQW5DLEdBQXNFTCxLQUF0RSxDQUFtQ0ssU0FBbkM7QUFBQSxvQkFBc0VMLEtBQXRFLENBQThDTSxJQUE5QztBQUFBLE1BQThDQSxJQUE5Qyw0QkFBcUQsR0FBckQ7QUFBQSxNQUE2REMsSUFBN0QsNEJBQXNFUCxLQUF0RTs7QUFFQSx3QkFBc0RULGNBQWMsQ0FBQyxNQUFELEVBQVM7QUFBRWUsSUFBQUEsSUFBSSxFQUFKQTtBQUFGLEdBQVQsRUFBbUJiLFdBQW5CLEVBQWdDQyxjQUFoQyxDQUFwRTtBQUFBLE1BQW1CYyxlQUFuQixtQkFBUUwsU0FBUjtBQUFBLE1BQXVDTSxVQUF2Qzs7QUFFQSxNQUFNQyxnQkFBZ0IsR0FBR3pCLEtBQUssQ0FBQzBCLFFBQU4sQ0FBZUMsR0FBZixDQUFtQlYsUUFBbkIsRUFBNkIsVUFBQVcsS0FBSyxFQUFJO0FBQzdELFFBQUksZUFBQzVCLEtBQUssQ0FBQzZCLGNBQU4sQ0FBcUJELEtBQXJCLENBQUwsRUFBa0M7QUFDaEMsYUFBT0EsS0FBUDtBQUNEOztBQUVELHdCQUFPNUIsS0FBSyxDQUFDOEIsWUFBTixDQUNMRixLQURLLEVBRUxyQixlQUFlO0FBQ2JZLE1BQUFBLElBQUksRUFBSkEsSUFEYTtBQUViRSxNQUFBQSxJQUFJLEVBQUpBLElBRmE7QUFHYkQsTUFBQUEsU0FBUyxFQUFUQTtBQUhhLE9BS1ZRLEtBQUssQ0FBQ2IsS0FMSSxFQUZWLENBQVA7QUFVRCxHQWZ3QixDQUF6QjtBQWlCQSxzQkFDRSxvQkFBQyxHQUFEO0FBQUssSUFBQSxFQUFFLEVBQUMsSUFBUjtBQUFhLElBQUEsU0FBUyxFQUFFWixFQUFFLENBQUNlLFNBQUQsRUFBWUssZUFBWjtBQUExQixLQUE0REMsVUFBNUQsRUFBNEVGLElBQTVFO0FBQWtGLElBQUEsR0FBRyxFQUFFTjtBQUF2RixNQUNHUyxnQkFESCxDQURGO0FBS0QsQ0EzQlMsQ0FEYyxDQUExQjtBQStCQVgsYUFBYSxDQUFDaUIsU0FBZCxtQ0FDSzFCLEdBQUcsQ0FBQzBCLFNBRFQ7QUFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNFVixFQUFBQSxJQUFJLEVBQUVqQixTQUFTLENBQUM0QixLQUFWLENBQWdCLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLENBQWhCLENBUFI7O0FBU0U7QUFDRjtBQUNBO0FBQ0E7QUFDRWIsRUFBQUEsSUFBSSxFQUFFZixTQUFTLENBQUM2QixTQUFWLENBQW9CLENBQUM3QixTQUFTLENBQUM4QixXQUFYLEVBQXdCOUIsU0FBUyxDQUFDK0IsT0FBbEMsQ0FBcEIsQ0FiUjs7QUFlRTtBQUNGO0FBQ0E7QUFDRWYsRUFBQUEsU0FBUyxFQUFFaEIsU0FBUyxDQUFDZ0M7QUFsQnZCO0FBcUJBLGVBQWV0QixhQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyB1c2VTdHlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IHJlbW92ZVVuZGVmaW5lZCBmcm9tICcuLi8uLi9saWIvcmVtb3ZlLXVuZGVmaW5lZCdcblxuY29uc3QgZW1wdHlPYmplY3QgPSB7fVxuXG5jb25zdCBpbnRlcm5hbFN0eWxlcyA9IHtcbiAgbWFyZ2luOiAwLFxuICBtYXJnaW5MZWZ0OiAnMS4xZW0nLFxuICBwYWRkaW5nOiAwLFxuICBsaXN0U3R5bGU6ICdkaXNjJ1xufVxuXG5jb25zdCBVbm9yZGVyZWRMaXN0ID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBVbm9yZGVyZWRMaXN0KHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBjbGFzc05hbWUsIGljb24sIGljb25Db2xvciwgc2l6ZSA9IDQwMCwgLi4ucmVzdCB9ID0gcHJvcHNcblxuICAgIGNvbnN0IHsgY2xhc3NOYW1lOiB0aGVtZWRDbGFzc05hbWUsIC4uLnN0eWxlUHJvcHMgfSA9IHVzZVN0eWxlQ29uZmlnKCdMaXN0JywgeyBzaXplIH0sIGVtcHR5T2JqZWN0LCBpbnRlcm5hbFN0eWxlcylcblxuICAgIGNvbnN0IGVucmljaGVkQ2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgcmVtb3ZlVW5kZWZpbmVkKHtcbiAgICAgICAgICBpY29uLFxuICAgICAgICAgIHNpemUsXG4gICAgICAgICAgaWNvbkNvbG9yLFxuICAgICAgICAgIC8vIFByZWZlciBtb3JlIGdyYW51bGFybHkgZGVmaW5lZCBwcm9wcyBpZiBwcmVzZW50XG4gICAgICAgICAgLi4uY2hpbGQucHJvcHNcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9KVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggaXM9XCJ1bFwiIGNsYXNzTmFtZT17Y3goY2xhc3NOYW1lLCB0aGVtZWRDbGFzc05hbWUpfSB7Li4uc3R5bGVQcm9wc30gey4uLnJlc3R9IHJlZj17cmVmfT5cbiAgICAgICAge2VucmljaGVkQ2hpbGRyZW59XG4gICAgICA8L0JveD5cbiAgICApXG4gIH0pXG4pXG5cblVub3JkZXJlZExpc3QucHJvcFR5cGVzID0ge1xuICAuLi5Cb3gucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSB0ZXh0IHVzZWQgaW4gYSBsaXN0IGl0ZW0uXG4gICAqIENhbiBiZTogMzAwLCA0MDAsIDUwMCwgNjAwLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFszMDAsIDQwMCwgNTAwLCA2MDBdKSxcblxuICAvKipcbiAgICogV2hlbiBwYXNzZWQsIGFkZHMgYSBpY29uIGJlZm9yZSBlYWNoIGxpc3QgaXRlbSBpbiB0aGUgbGlzdFxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgb24gYSBpbmRpdmlkdWFsIGxpc3QgaXRlbS5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5lbGVtZW50VHlwZSwgUHJvcFR5cGVzLmVsZW1lbnRdKSxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBpY29uIGluIGVhY2ggbGlzdCBpdGVtIGluIHRoZSBsaXN0LlxuICAgKi9cbiAgaWNvbkNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IFVub3JkZXJlZExpc3RcbiJdfQ==