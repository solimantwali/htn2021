import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["className", "color", "fontFamily", "size"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { forwardRef, memo } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { useStyleConfig } from '../../hooks';
import { useTheme } from '../../theme';
var emptyObject = {};
var Text = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Text(props, ref) {
  var className = props.className,
      _props$color = props.color,
      colorProp = _props$color === void 0 ? 'default' : _props$color,
      _props$fontFamily = props.fontFamily,
      fontFamily = _props$fontFamily === void 0 ? 'ui' : _props$fontFamily,
      _props$size = props.size,
      size = _props$size === void 0 ? 400 : _props$size,
      restProps = _objectWithoutProperties(props, _excluded);

  var theme = useTheme();
  var colors = theme.colors,
      fontFamilies = theme.fontFamilies;
  var color = colorProp === 'none' || colorProp === 'default' ? 'default' : colorProp;
  var themedFontFamily = fontFamilies[fontFamily] || fontFamily;
  var themedColor = colors[color] || colors.text && colors.text[color] || color;
  var textStyle = useStyleConfig('Text', {
    size: size
  }, emptyObject, emptyObject);
  return /*#__PURE__*/React.createElement(Box, _extends({
    is: "span",
    ref: ref
  }, textStyle, {
    fontFamily: themedFontFamily,
    color: themedColor,
    className: className
  }, restProps));
}));
Text.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {
  /**
   * Size of the text style.
   * Can be: 300, 400, 500, 600.
   */
  size: PropTypes.oneOf([300, 400, 500, 600]),

  /**
   * Font family.
   * Can be: `ui`, `display` or `mono` or a custom font family.
   */
  fontFamily: PropTypes.string
});
export default Text;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L3NyYy9UZXh0LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiZm9yd2FyZFJlZiIsIm1lbW8iLCJQcm9wVHlwZXMiLCJCb3giLCJ1c2VTdHlsZUNvbmZpZyIsInVzZVRoZW1lIiwiZW1wdHlPYmplY3QiLCJUZXh0IiwicHJvcHMiLCJyZWYiLCJjbGFzc05hbWUiLCJjb2xvciIsImNvbG9yUHJvcCIsImZvbnRGYW1pbHkiLCJzaXplIiwicmVzdFByb3BzIiwidGhlbWUiLCJjb2xvcnMiLCJmb250RmFtaWxpZXMiLCJ0aGVtZWRGb250RmFtaWx5IiwidGhlbWVkQ29sb3IiLCJ0ZXh0IiwidGV4dFN0eWxlIiwicHJvcFR5cGVzIiwib25lT2YiLCJzdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLFVBQWhCLEVBQTRCQyxJQUE1QixRQUF3QyxPQUF4QztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLE1BQWdCLFFBQWhCO0FBQ0EsU0FBU0MsY0FBVCxRQUErQixhQUEvQjtBQUNBLFNBQVNDLFFBQVQsUUFBeUIsYUFBekI7QUFFQSxJQUFNQyxXQUFXLEdBQUcsRUFBcEI7QUFFQSxJQUFNQyxJQUFJLGdCQUFHTixJQUFJLGVBQ2ZELFVBQVUsQ0FBQyxTQUFTTyxJQUFULENBQWNDLEtBQWQsRUFBcUJDLEdBQXJCLEVBQTBCO0FBQ25DLE1BQVFDLFNBQVIsR0FBaUdGLEtBQWpHLENBQVFFLFNBQVI7QUFBQSxxQkFBaUdGLEtBQWpHLENBQW1CRyxLQUFuQjtBQUFBLE1BQTBCQyxTQUExQiw2QkFBc0MsU0FBdEM7QUFBQSwwQkFBaUdKLEtBQWpHLENBQWlESyxVQUFqRDtBQUFBLE1BQWlEQSxVQUFqRCxrQ0FBOEQsSUFBOUQ7QUFBQSxvQkFBaUdMLEtBQWpHLENBQW9FTSxJQUFwRTtBQUFBLE1BQW9FQSxJQUFwRSw0QkFBMkUsR0FBM0U7QUFBQSxNQUFtRkMsU0FBbkYsNEJBQWlHUCxLQUFqRzs7QUFFQSxNQUFNUSxLQUFLLEdBQUdYLFFBQVEsRUFBdEI7QUFDQSxNQUFRWSxNQUFSLEdBQWlDRCxLQUFqQyxDQUFRQyxNQUFSO0FBQUEsTUFBZ0JDLFlBQWhCLEdBQWlDRixLQUFqQyxDQUFnQkUsWUFBaEI7QUFFQSxNQUFNUCxLQUFLLEdBQUdDLFNBQVMsS0FBSyxNQUFkLElBQXdCQSxTQUFTLEtBQUssU0FBdEMsR0FBa0QsU0FBbEQsR0FBOERBLFNBQTVFO0FBRUEsTUFBTU8sZ0JBQWdCLEdBQUdELFlBQVksQ0FBQ0wsVUFBRCxDQUFaLElBQTRCQSxVQUFyRDtBQUNBLE1BQU1PLFdBQVcsR0FBR0gsTUFBTSxDQUFDTixLQUFELENBQU4sSUFBa0JNLE1BQU0sQ0FBQ0ksSUFBUCxJQUFlSixNQUFNLENBQUNJLElBQVAsQ0FBWVYsS0FBWixDQUFqQyxJQUF3REEsS0FBNUU7QUFFQSxNQUFNVyxTQUFTLEdBQUdsQixjQUFjLENBQUMsTUFBRCxFQUFTO0FBQUVVLElBQUFBLElBQUksRUFBSkE7QUFBRixHQUFULEVBQW1CUixXQUFuQixFQUFnQ0EsV0FBaEMsQ0FBaEM7QUFFQSxzQkFDRSxvQkFBQyxHQUFEO0FBQ0UsSUFBQSxFQUFFLEVBQUMsTUFETDtBQUVFLElBQUEsR0FBRyxFQUFFRztBQUZQLEtBR01hLFNBSE47QUFJRSxJQUFBLFVBQVUsRUFBRUgsZ0JBSmQ7QUFLRSxJQUFBLEtBQUssRUFBRUMsV0FMVDtBQU1FLElBQUEsU0FBUyxFQUFFVjtBQU5iLEtBT01LLFNBUE4sRUFERjtBQVdELENBeEJTLENBREssQ0FBakI7QUE0QkFSLElBQUksQ0FBQ2dCLFNBQUwsbUNBSUtwQixHQUFHLENBQUNvQixTQUpUO0FBTUU7QUFDRjtBQUNBO0FBQ0E7QUFDRVQsRUFBQUEsSUFBSSxFQUFFWixTQUFTLENBQUNzQixLQUFWLENBQWdCLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLENBQWhCLENBVlI7O0FBWUU7QUFDRjtBQUNBO0FBQ0E7QUFDRVgsRUFBQUEsVUFBVSxFQUFFWCxTQUFTLENBQUN1QjtBQWhCeEI7QUFtQkEsZUFBZWxCLElBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyB1c2VTdHlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcblxuY29uc3QgZW1wdHlPYmplY3QgPSB7fVxuXG5jb25zdCBUZXh0ID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0KHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7IGNsYXNzTmFtZSwgY29sb3I6IGNvbG9yUHJvcCA9ICdkZWZhdWx0JywgZm9udEZhbWlseSA9ICd1aScsIHNpemUgPSA0MDAsIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHNcblxuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKVxuICAgIGNvbnN0IHsgY29sb3JzLCBmb250RmFtaWxpZXMgfSA9IHRoZW1lXG5cbiAgICBjb25zdCBjb2xvciA9IGNvbG9yUHJvcCA9PT0gJ25vbmUnIHx8IGNvbG9yUHJvcCA9PT0gJ2RlZmF1bHQnID8gJ2RlZmF1bHQnIDogY29sb3JQcm9wXG5cbiAgICBjb25zdCB0aGVtZWRGb250RmFtaWx5ID0gZm9udEZhbWlsaWVzW2ZvbnRGYW1pbHldIHx8IGZvbnRGYW1pbHlcbiAgICBjb25zdCB0aGVtZWRDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgKGNvbG9ycy50ZXh0ICYmIGNvbG9ycy50ZXh0W2NvbG9yXSkgfHwgY29sb3JcblxuICAgIGNvbnN0IHRleHRTdHlsZSA9IHVzZVN0eWxlQ29uZmlnKCdUZXh0JywgeyBzaXplIH0sIGVtcHR5T2JqZWN0LCBlbXB0eU9iamVjdClcblxuICAgIHJldHVybiAoXG4gICAgICA8Qm94XG4gICAgICAgIGlzPVwic3BhblwiXG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICB7Li4udGV4dFN0eWxlfVxuICAgICAgICBmb250RmFtaWx5PXt0aGVtZWRGb250RmFtaWx5fVxuICAgICAgICBjb2xvcj17dGhlbWVkQ29sb3J9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICB7Li4ucmVzdFByb3BzfVxuICAgICAgLz5cbiAgICApXG4gIH0pXG4pXG5cblRleHQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIEJveCBjb21wb25lbnQgYXMgdGhlIGJhc2UuXG4gICAqL1xuICAuLi5Cb3gucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSB0ZXh0IHN0eWxlLlxuICAgKiBDYW4gYmU6IDMwMCwgNDAwLCA1MDAsIDYwMC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbMzAwLCA0MDAsIDUwMCwgNjAwXSksXG5cbiAgLyoqXG4gICAqIEZvbnQgZmFtaWx5LlxuICAgKiBDYW4gYmU6IGB1aWAsIGBkaXNwbGF5YCBvciBgbW9ub2Agb3IgYSBjdXN0b20gZm9udCBmYW1pbHkuXG4gICAqL1xuICBmb250RmFtaWx5OiBQcm9wVHlwZXMuc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRcbiJdfQ==