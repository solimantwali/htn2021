import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["className", "color"],
    _excluded2 = ["className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { forwardRef, memo } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { useStyleConfig } from '../../hooks';
import Text from './Text';
var internalStyles = {
  textDecoration: 'underline'
};
var pseudoSelectors = {
  _hover: '&:hover',
  _active: '&:active',
  _focus: '&:focus'
};
var Link = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Link(props, ref) {
  var className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'default' : _props$color,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useStyleConfig = useStyleConfig('Link', {
    color: color
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  return /*#__PURE__*/React.createElement(Text, _extends({
    is: "a",
    ref: ref,
    className: cx(className, themedClassName)
  }, boxProps, restProps));
}));
Link.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {
  /**
   * This attribute names a relationship of the linked document to the current document.
   * Common use case is: rel="noopener noreferrer".
   */
  rel: PropTypes.string,

  /**
   * Specifies the URL of the linked resource. A URL might be absolute or relative.
   */
  href: PropTypes.string,

  /**
   * Target atrribute, common use case is target="_blank."
   */
  target: PropTypes.string,

  /**
   * The color (and styling) of the Link. Can be default, blue, green or neutral.
   */
  color: PropTypes.string,

  /**
   * Class name passed to the link.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
});
export default Link;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L3NyYy9MaW5rLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiZm9yd2FyZFJlZiIsIm1lbW8iLCJjeCIsIlByb3BUeXBlcyIsInVzZVN0eWxlQ29uZmlnIiwiVGV4dCIsImludGVybmFsU3R5bGVzIiwidGV4dERlY29yYXRpb24iLCJwc2V1ZG9TZWxlY3RvcnMiLCJfaG92ZXIiLCJfYWN0aXZlIiwiX2ZvY3VzIiwiTGluayIsInByb3BzIiwicmVmIiwiY2xhc3NOYW1lIiwiY29sb3IiLCJyZXN0UHJvcHMiLCJ0aGVtZWRDbGFzc05hbWUiLCJib3hQcm9wcyIsInByb3BUeXBlcyIsInJlbCIsInN0cmluZyIsImhyZWYiLCJ0YXJnZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxVQUFoQixFQUE0QkMsSUFBNUIsUUFBd0MsT0FBeEM7QUFDQSxPQUFPQyxFQUFQLE1BQWUsWUFBZjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxjQUFULFFBQStCLGFBQS9CO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixRQUFqQjtBQUVBLElBQU1DLGNBQWMsR0FBRztBQUNyQkMsRUFBQUEsY0FBYyxFQUFFO0FBREssQ0FBdkI7QUFJQSxJQUFNQyxlQUFlLEdBQUc7QUFDdEJDLEVBQUFBLE1BQU0sRUFBRSxTQURjO0FBRXRCQyxFQUFBQSxPQUFPLEVBQUUsVUFGYTtBQUd0QkMsRUFBQUEsTUFBTSxFQUFFO0FBSGMsQ0FBeEI7QUFNQSxJQUFNQyxJQUFJLGdCQUFHWCxJQUFJLGVBQ2ZELFVBQVUsQ0FBQyxTQUFTWSxJQUFULENBQWNDLEtBQWQsRUFBcUJDLEdBQXJCLEVBQTBCO0FBQ25DLE1BQVFDLFNBQVIsR0FBdURGLEtBQXZELENBQVFFLFNBQVI7QUFBQSxxQkFBdURGLEtBQXZELENBQW1CRyxLQUFuQjtBQUFBLE1BQW1CQSxLQUFuQiw2QkFBMkIsU0FBM0I7QUFBQSxNQUF5Q0MsU0FBekMsNEJBQXVESixLQUF2RDs7QUFDQSx3QkFBb0RULGNBQWMsQ0FDaEUsTUFEZ0UsRUFFaEU7QUFBRVksSUFBQUEsS0FBSyxFQUFMQTtBQUFGLEdBRmdFLEVBR2hFUixlQUhnRSxFQUloRUYsY0FKZ0UsQ0FBbEU7QUFBQSxNQUFtQlksZUFBbkIsbUJBQVFILFNBQVI7QUFBQSxNQUF1Q0ksUUFBdkM7O0FBT0Esc0JBQU8sb0JBQUMsSUFBRDtBQUFNLElBQUEsRUFBRSxFQUFDLEdBQVQ7QUFBYSxJQUFBLEdBQUcsRUFBRUwsR0FBbEI7QUFBdUIsSUFBQSxTQUFTLEVBQUVaLEVBQUUsQ0FBQ2EsU0FBRCxFQUFZRyxlQUFaO0FBQXBDLEtBQXNFQyxRQUF0RSxFQUFvRkYsU0FBcEYsRUFBUDtBQUNELENBVlMsQ0FESyxDQUFqQjtBQWNBTCxJQUFJLENBQUNRLFNBQUwsbUNBQ0tmLElBQUksQ0FBQ2UsU0FEVjtBQUdFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VDLEVBQUFBLEdBQUcsRUFBRWxCLFNBQVMsQ0FBQ21CLE1BUGpCOztBQVNFO0FBQ0Y7QUFDQTtBQUNFQyxFQUFBQSxJQUFJLEVBQUVwQixTQUFTLENBQUNtQixNQVpsQjs7QUFjRTtBQUNGO0FBQ0E7QUFDRUUsRUFBQUEsTUFBTSxFQUFFckIsU0FBUyxDQUFDbUIsTUFqQnBCOztBQW1CRTtBQUNGO0FBQ0E7QUFDRU4sRUFBQUEsS0FBSyxFQUFFYixTQUFTLENBQUNtQixNQXRCbkI7O0FBd0JFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VQLEVBQUFBLFNBQVMsRUFBRVosU0FBUyxDQUFDbUI7QUE1QnZCO0FBK0JBLGVBQWVWLElBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgbWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB1c2VTdHlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IFRleHQgZnJvbSAnLi9UZXh0J1xuXG5jb25zdCBpbnRlcm5hbFN0eWxlcyA9IHtcbiAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnXG59XG5cbmNvbnN0IHBzZXVkb1NlbGVjdG9ycyA9IHtcbiAgX2hvdmVyOiAnJjpob3ZlcicsXG4gIF9hY3RpdmU6ICcmOmFjdGl2ZScsXG4gIF9mb2N1czogJyY6Zm9jdXMnXG59XG5cbmNvbnN0IExpbmsgPSBtZW1vKFxuICBmb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmsocHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBjb2xvciA9ICdkZWZhdWx0JywgLi4ucmVzdFByb3BzIH0gPSBwcm9wc1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lOiB0aGVtZWRDbGFzc05hbWUsIC4uLmJveFByb3BzIH0gPSB1c2VTdHlsZUNvbmZpZyhcbiAgICAgICdMaW5rJyxcbiAgICAgIHsgY29sb3IgfSxcbiAgICAgIHBzZXVkb1NlbGVjdG9ycyxcbiAgICAgIGludGVybmFsU3R5bGVzXG4gICAgKVxuXG4gICAgcmV0dXJuIDxUZXh0IGlzPVwiYVwiIHJlZj17cmVmfSBjbGFzc05hbWU9e2N4KGNsYXNzTmFtZSwgdGhlbWVkQ2xhc3NOYW1lKX0gey4uLmJveFByb3BzfSB7Li4ucmVzdFByb3BzfSAvPlxuICB9KVxuKVxuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgLi4uVGV4dC5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIFRoaXMgYXR0cmlidXRlIG5hbWVzIGEgcmVsYXRpb25zaGlwIG9mIHRoZSBsaW5rZWQgZG9jdW1lbnQgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQuXG4gICAqIENvbW1vbiB1c2UgY2FzZSBpczogcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiLlxuICAgKi9cbiAgcmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIFVSTCBvZiB0aGUgbGlua2VkIHJlc291cmNlLiBBIFVSTCBtaWdodCBiZSBhYnNvbHV0ZSBvciByZWxhdGl2ZS5cbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRhcmdldCBhdHJyaWJ1dGUsIGNvbW1vbiB1c2UgY2FzZSBpcyB0YXJnZXQ9XCJfYmxhbmsuXCJcbiAgICovXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIChhbmQgc3R5bGluZykgb2YgdGhlIExpbmsuIENhbiBiZSBkZWZhdWx0LCBibHVlLCBncmVlbiBvciBuZXV0cmFsLlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgcGFzc2VkIHRvIHRoZSBsaW5rLlxuICAgKiBPbmx5IHVzZSBpZiB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlua1xuIl19