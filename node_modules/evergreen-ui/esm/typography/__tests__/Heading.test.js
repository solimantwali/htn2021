import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { render, screen } from '@testing-library/react';
import renderer from 'react-test-renderer';
import { UIBoxSerializer } from '../../../lib/testing';
import { ThemeProvider } from '../../theme';
import { defaultTheme } from '../../themes';
import Heading from '../src/Heading';
expect.addSnapshotSerializer(UIBoxSerializer);
test.each([['size 100', 100], ['size 200', 200], ['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600], ['size 700', 700], ['size 800', 800], ['size 900', 900]])('<Heading /> %s renders as expected', function (_, size) {
  var component = /*#__PURE__*/React.createElement(ThemeProvider, {
    value: defaultTheme
  }, /*#__PURE__*/React.createElement(Heading, {
    size: size
  }, "Heading ".concat(size)));
  var tree = renderer.create(component).toJSON();
  expect(tree).toMatchSnapshot();
});
test('Heading lets you override the underlying DOM element', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          render( /*#__PURE__*/React.createElement(ThemeProvider, {
            value: defaultTheme
          }, /*#__PURE__*/React.createElement(Heading, {
            is: "h1"
          }, "Testing h1")));
          expect(screen.getByText('Testing h1', {
            selector: 'h1'
          })).toBeTruthy();

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L19fdGVzdHNfXy9IZWFkaW5nLnRlc3QuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZW5kZXIiLCJzY3JlZW4iLCJyZW5kZXJlciIsIlVJQm94U2VyaWFsaXplciIsIlRoZW1lUHJvdmlkZXIiLCJkZWZhdWx0VGhlbWUiLCJIZWFkaW5nIiwiZXhwZWN0IiwiYWRkU25hcHNob3RTZXJpYWxpemVyIiwidGVzdCIsImVhY2giLCJfIiwic2l6ZSIsImNvbXBvbmVudCIsInRyZWUiLCJjcmVhdGUiLCJ0b0pTT04iLCJ0b01hdGNoU25hcHNob3QiLCJnZXRCeVRleHQiLCJzZWxlY3RvciIsInRvQmVUcnV0aHkiXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLE1BQVQsRUFBaUJDLE1BQWpCLFFBQStCLHdCQUEvQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIscUJBQXJCO0FBQ0EsU0FBU0MsZUFBVCxRQUFnQyxzQkFBaEM7QUFDQSxTQUFTQyxhQUFULFFBQThCLGFBQTlCO0FBQ0EsU0FBU0MsWUFBVCxRQUE2QixjQUE3QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsZ0JBQXBCO0FBRUFDLE1BQU0sQ0FBQ0MscUJBQVAsQ0FBNkJMLGVBQTdCO0FBRUFNLElBQUksQ0FBQ0MsSUFBTCxDQUFVLENBQ1IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQURRLEVBRVIsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUZRLEVBR1IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUhRLEVBSVIsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUpRLEVBS1IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUxRLEVBTVIsQ0FBQyxVQUFELEVBQWEsR0FBYixDQU5RLEVBT1IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQVBRLEVBUVIsQ0FBQyxVQUFELEVBQWEsR0FBYixDQVJRLEVBU1IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQVRRLENBQVYsRUFVRyxvQ0FWSCxFQVV5QyxVQUFDQyxDQUFELEVBQUlDLElBQUosRUFBYTtBQUNwRCxNQUFNQyxTQUFTLGdCQUNiLG9CQUFDLGFBQUQ7QUFBZSxJQUFBLEtBQUssRUFBRVI7QUFBdEIsa0JBQ0Usb0JBQUMsT0FBRDtBQUFTLElBQUEsSUFBSSxFQUFFTztBQUFmLHVCQUFpQ0EsSUFBakMsRUFERixDQURGO0FBS0EsTUFBTUUsSUFBSSxHQUFHWixRQUFRLENBQUNhLE1BQVQsQ0FBZ0JGLFNBQWhCLEVBQTJCRyxNQUEzQixFQUFiO0FBQ0FULEVBQUFBLE1BQU0sQ0FBQ08sSUFBRCxDQUFOLENBQWFHLGVBQWI7QUFDRCxDQWxCRDtBQW9CQVIsSUFBSSxDQUFDLHNEQUFELHdFQUF5RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzNEVCxVQUFBQSxNQUFNLGVBQ0osb0JBQUMsYUFBRDtBQUFlLFlBQUEsS0FBSyxFQUFFSztBQUF0QiwwQkFDRSxvQkFBQyxPQUFEO0FBQVMsWUFBQSxFQUFFLEVBQUM7QUFBWiwwQkFERixDQURJLENBQU47QUFNQUUsVUFBQUEsTUFBTSxDQUFDTixNQUFNLENBQUNpQixTQUFQLENBQWlCLFlBQWpCLEVBQStCO0FBQUVDLFlBQUFBLFFBQVEsRUFBRTtBQUFaLFdBQS9CLENBQUQsQ0FBTixDQUEyREMsVUFBM0Q7O0FBUDJEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQXpELEdBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcidcbmltcG9ydCB7IFVJQm94U2VyaWFsaXplciB9IGZyb20gJy4uLy4uLy4uL2xpYi90ZXN0aW5nJ1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJy4uLy4uL3RoZW1lJ1xuaW1wb3J0IHsgZGVmYXVsdFRoZW1lIH0gZnJvbSAnLi4vLi4vdGhlbWVzJ1xuaW1wb3J0IEhlYWRpbmcgZnJvbSAnLi4vc3JjL0hlYWRpbmcnXG5cbmV4cGVjdC5hZGRTbmFwc2hvdFNlcmlhbGl6ZXIoVUlCb3hTZXJpYWxpemVyKVxuXG50ZXN0LmVhY2goW1xuICBbJ3NpemUgMTAwJywgMTAwXSxcbiAgWydzaXplIDIwMCcsIDIwMF0sXG4gIFsnc2l6ZSAzMDAnLCAzMDBdLFxuICBbJ3NpemUgNDAwJywgNDAwXSxcbiAgWydzaXplIDUwMCcsIDUwMF0sXG4gIFsnc2l6ZSA2MDAnLCA2MDBdLFxuICBbJ3NpemUgNzAwJywgNzAwXSxcbiAgWydzaXplIDgwMCcsIDgwMF0sXG4gIFsnc2l6ZSA5MDAnLCA5MDBdXG5dKSgnPEhlYWRpbmcgLz4gJXMgcmVuZGVycyBhcyBleHBlY3RlZCcsIChfLCBzaXplKSA9PiB7XG4gIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICA8VGhlbWVQcm92aWRlciB2YWx1ZT17ZGVmYXVsdFRoZW1lfT5cbiAgICAgIDxIZWFkaW5nIHNpemU9e3NpemV9PntgSGVhZGluZyAke3NpemV9YH08L0hlYWRpbmc+XG4gICAgPC9UaGVtZVByb3ZpZGVyPlxuICApXG4gIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoY29tcG9uZW50KS50b0pTT04oKVxuICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KClcbn0pXG5cbnRlc3QoJ0hlYWRpbmcgbGV0cyB5b3Ugb3ZlcnJpZGUgdGhlIHVuZGVybHlpbmcgRE9NIGVsZW1lbnQnLCBhc3luYyAoKSA9PiB7XG4gIHJlbmRlcihcbiAgICA8VGhlbWVQcm92aWRlciB2YWx1ZT17ZGVmYXVsdFRoZW1lfT5cbiAgICAgIDxIZWFkaW5nIGlzPVwiaDFcIj5UZXN0aW5nIGgxPC9IZWFkaW5nPlxuICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgKVxuXG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUZXN0aW5nIGgxJywgeyBzZWxlY3RvcjogJ2gxJyB9KSkudG9CZVRydXRoeSgpXG59KVxuIl19