import React from 'react';
import { render } from '@testing-library/react';
import renderer from 'react-test-renderer';
import { UIBoxSerializer } from '../../../lib/testing';
import { ThemeProvider } from '../../theme';
import { defaultTheme } from '../../themes';
import Text from '../src/Text';
expect.addSnapshotSerializer(UIBoxSerializer);
test.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Text /> %s renders as expected', function (_, size) {
  var component = /*#__PURE__*/React.createElement(ThemeProvider, {
    value: defaultTheme
  }, /*#__PURE__*/React.createElement(Text, {
    size: size
  }, "Text ".concat(size)));
  var tree = renderer.create(component).toJSON();
  expect(tree).toMatchSnapshot();
});
describe('Colors', function () {
  test('<Text /> accepts arbitrary theme values for color', function () {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Text, {
      color: "muted"
    }, "Testing"), ' ');
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
  test('<Text /> does not render any color when a non-theme color is passed in ', function () {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: defaultTheme
    }, /*#__PURE__*/React.createElement(Text, {
      color: "SOMETHING DOESNT EXISt"
    }, "Testing"), ' ');
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
});
describe('Sizing', function () {
  var originalConsoleError = console.error;
  var mockFn = jest.fn();
  beforeEach(function () {
    console.error = mockFn;
  });
  afterEach(function () {
    console.error = originalConsoleError;
  });
  test('<Text /> has undefined behavior when trying to set arbitrary sizes', function () {
    render( /*#__PURE__*/React.createElement(Text, {
      size: 800
    }));
    expect(mockFn.mock.calls.length).toEqual(1);
    expect(mockFn.mock.calls[0][0]).toMatchInlineSnapshot("\n      Extracted Styles:\n      box-sizing: border-box;\n      color: #474d66;\n      font-family: \"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\n\n      \"Warning: Failed %s type: %s%s\"\n    ");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L19fdGVzdHNfXy9UZXh0LnRlc3QuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZW5kZXIiLCJyZW5kZXJlciIsIlVJQm94U2VyaWFsaXplciIsIlRoZW1lUHJvdmlkZXIiLCJkZWZhdWx0VGhlbWUiLCJUZXh0IiwiZXhwZWN0IiwiYWRkU25hcHNob3RTZXJpYWxpemVyIiwidGVzdCIsImVhY2giLCJfIiwic2l6ZSIsImNvbXBvbmVudCIsInRyZWUiLCJjcmVhdGUiLCJ0b0pTT04iLCJ0b01hdGNoU25hcHNob3QiLCJkZXNjcmliZSIsIm9yaWdpbmFsQ29uc29sZUVycm9yIiwiY29uc29sZSIsImVycm9yIiwibW9ja0ZuIiwiamVzdCIsImZuIiwiYmVmb3JlRWFjaCIsImFmdGVyRWFjaCIsIm1vY2siLCJjYWxscyIsImxlbmd0aCIsInRvRXF1YWwiLCJ0b01hdGNoSW5saW5lU25hcHNob3QiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFTQyxNQUFULFFBQXVCLHdCQUF2QjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIscUJBQXJCO0FBQ0EsU0FBU0MsZUFBVCxRQUFnQyxzQkFBaEM7QUFDQSxTQUFTQyxhQUFULFFBQThCLGFBQTlCO0FBQ0EsU0FBU0MsWUFBVCxRQUE2QixjQUE3QjtBQUNBLE9BQU9DLElBQVAsTUFBaUIsYUFBakI7QUFFQUMsTUFBTSxDQUFDQyxxQkFBUCxDQUE2QkwsZUFBN0I7QUFFQU0sSUFBSSxDQUFDQyxJQUFMLENBQVUsQ0FDUixDQUFDLFVBQUQsRUFBYSxHQUFiLENBRFEsRUFFUixDQUFDLFVBQUQsRUFBYSxHQUFiLENBRlEsRUFHUixDQUFDLFVBQUQsRUFBYSxHQUFiLENBSFEsRUFJUixDQUFDLFVBQUQsRUFBYSxHQUFiLENBSlEsQ0FBVixFQUtHLGlDQUxILEVBS3NDLFVBQUNDLENBQUQsRUFBSUMsSUFBSixFQUFhO0FBQ2pELE1BQU1DLFNBQVMsZ0JBQ2Isb0JBQUMsYUFBRDtBQUFlLElBQUEsS0FBSyxFQUFFUjtBQUF0QixrQkFDRSxvQkFBQyxJQUFEO0FBQU0sSUFBQSxJQUFJLEVBQUVPO0FBQVosb0JBQTJCQSxJQUEzQixFQURGLENBREY7QUFLQSxNQUFNRSxJQUFJLEdBQUdaLFFBQVEsQ0FBQ2EsTUFBVCxDQUFnQkYsU0FBaEIsRUFBMkJHLE1BQTNCLEVBQWI7QUFDQVQsRUFBQUEsTUFBTSxDQUFDTyxJQUFELENBQU4sQ0FBYUcsZUFBYjtBQUNELENBYkQ7QUFlQUMsUUFBUSxDQUFDLFFBQUQsRUFBVyxZQUFNO0FBQ3ZCVCxFQUFBQSxJQUFJLENBQUMsbURBQUQsRUFBc0QsWUFBTTtBQUM5RCxRQUFNSSxTQUFTLGdCQUNiLG9CQUFDLGFBQUQ7QUFBZSxNQUFBLEtBQUssRUFBRVI7QUFBdEIsb0JBQ0Usb0JBQUMsSUFBRDtBQUFNLE1BQUEsS0FBSyxFQUFDO0FBQVosaUJBREYsRUFDcUMsR0FEckMsQ0FERjtBQUtBLFFBQU1TLElBQUksR0FBR1osUUFBUSxDQUFDYSxNQUFULENBQWdCRixTQUFoQixFQUEyQkcsTUFBM0IsRUFBYjtBQUNBVCxJQUFBQSxNQUFNLENBQUNPLElBQUQsQ0FBTixDQUFhRyxlQUFiO0FBQ0QsR0FSRyxDQUFKO0FBVUFSLEVBQUFBLElBQUksQ0FBQyx5RUFBRCxFQUE0RSxZQUFNO0FBQ3BGLFFBQU1JLFNBQVMsZ0JBQ2Isb0JBQUMsYUFBRDtBQUFlLE1BQUEsS0FBSyxFQUFFUjtBQUF0QixvQkFDRSxvQkFBQyxJQUFEO0FBQU0sTUFBQSxLQUFLLEVBQUM7QUFBWixpQkFERixFQUNzRCxHQUR0RCxDQURGO0FBS0EsUUFBTVMsSUFBSSxHQUFHWixRQUFRLENBQUNhLE1BQVQsQ0FBZ0JGLFNBQWhCLEVBQTJCRyxNQUEzQixFQUFiO0FBQ0FULElBQUFBLE1BQU0sQ0FBQ08sSUFBRCxDQUFOLENBQWFHLGVBQWI7QUFDRCxHQVJHLENBQUo7QUFTRCxDQXBCTyxDQUFSO0FBc0JBQyxRQUFRLENBQUMsUUFBRCxFQUFXLFlBQU07QUFDdkIsTUFBTUMsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQ0MsS0FBckM7QUFDQSxNQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUFmO0FBQ0FDLEVBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2ZMLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixHQUFnQkMsTUFBaEI7QUFDRCxHQUZTLENBQVY7QUFJQUksRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZE4sSUFBQUEsT0FBTyxDQUFDQyxLQUFSLEdBQWdCRixvQkFBaEI7QUFDRCxHQUZRLENBQVQ7QUFJQVYsRUFBQUEsSUFBSSxDQUFDLG9FQUFELEVBQXVFLFlBQU07QUFDL0VSLElBQUFBLE1BQU0sZUFBQyxvQkFBQyxJQUFEO0FBQU0sTUFBQSxJQUFJLEVBQUU7QUFBWixNQUFELENBQU47QUFDQU0sSUFBQUEsTUFBTSxDQUFDZSxNQUFNLENBQUNLLElBQVAsQ0FBWUMsS0FBWixDQUFrQkMsTUFBbkIsQ0FBTixDQUFpQ0MsT0FBakMsQ0FBeUMsQ0FBekM7QUFDQXZCLElBQUFBLE1BQU0sQ0FBQ2UsTUFBTSxDQUFDSyxJQUFQLENBQVlDLEtBQVosQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBRCxDQUFOLENBQWdDRyxxQkFBaEM7QUFTRCxHQVpHLENBQUo7QUFhRCxDQXhCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJ1xuaW1wb3J0IHsgVUlCb3hTZXJpYWxpemVyIH0gZnJvbSAnLi4vLi4vLi4vbGliL3Rlc3RpbmcnXG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vdGhlbWUnXG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZXMnXG5pbXBvcnQgVGV4dCBmcm9tICcuLi9zcmMvVGV4dCdcblxuZXhwZWN0LmFkZFNuYXBzaG90U2VyaWFsaXplcihVSUJveFNlcmlhbGl6ZXIpXG5cbnRlc3QuZWFjaChbXG4gIFsnc2l6ZSAzMDAnLCAzMDBdLFxuICBbJ3NpemUgNDAwJywgNDAwXSxcbiAgWydzaXplIDUwMCcsIDUwMF0sXG4gIFsnc2l6ZSA2MDAnLCA2MDBdXG5dKSgnPFRleHQgLz4gJXMgcmVuZGVycyBhcyBleHBlY3RlZCcsIChfLCBzaXplKSA9PiB7XG4gIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICA8VGhlbWVQcm92aWRlciB2YWx1ZT17ZGVmYXVsdFRoZW1lfT5cbiAgICAgIDxUZXh0IHNpemU9e3NpemV9PntgVGV4dCAke3NpemV9YH08L1RleHQ+XG4gICAgPC9UaGVtZVByb3ZpZGVyPlxuICApXG4gIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoY29tcG9uZW50KS50b0pTT04oKVxuICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KClcbn0pXG5cbmRlc2NyaWJlKCdDb2xvcnMnLCAoKSA9PiB7XG4gIHRlc3QoJzxUZXh0IC8+IGFjY2VwdHMgYXJiaXRyYXJ5IHRoZW1lIHZhbHVlcyBmb3IgY29sb3InLCAoKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gKFxuICAgICAgPFRoZW1lUHJvdmlkZXIgdmFsdWU9e2RlZmF1bHRUaGVtZX0+XG4gICAgICAgIDxUZXh0IGNvbG9yPVwibXV0ZWRcIj5UZXN0aW5nPC9UZXh0PnsnICd9XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgKVxuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoY29tcG9uZW50KS50b0pTT04oKVxuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIHRlc3QoJzxUZXh0IC8+IGRvZXMgbm90IHJlbmRlciBhbnkgY29sb3Igd2hlbiBhIG5vbi10aGVtZSBjb2xvciBpcyBwYXNzZWQgaW4gJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IChcbiAgICAgIDxUaGVtZVByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VGhlbWV9PlxuICAgICAgICA8VGV4dCBjb2xvcj1cIlNPTUVUSElORyBET0VTTlQgRVhJU3RcIj5UZXN0aW5nPC9UZXh0PnsnICd9XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgKVxuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoY29tcG9uZW50KS50b0pTT04oKVxuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ1NpemluZycsICgpID0+IHtcbiAgY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yXG4gIGNvbnN0IG1vY2tGbiA9IGplc3QuZm4oKVxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb25zb2xlLmVycm9yID0gbW9ja0ZuXG4gIH0pXG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxDb25zb2xlRXJyb3JcbiAgfSlcblxuICB0ZXN0KCc8VGV4dCAvPiBoYXMgdW5kZWZpbmVkIGJlaGF2aW9yIHdoZW4gdHJ5aW5nIHRvIHNldCBhcmJpdHJhcnkgc2l6ZXMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxUZXh0IHNpemU9ezgwMH0gLz4pXG4gICAgZXhwZWN0KG1vY2tGbi5tb2NrLmNhbGxzLmxlbmd0aCkudG9FcXVhbCgxKVxuICAgIGV4cGVjdChtb2NrRm4ubW9jay5jYWxsc1swXVswXSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgIEV4dHJhY3RlZCBTdHlsZXM6XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgY29sb3I6ICM0NzRkNjY7XG4gICAgICBmb250LWZhbWlseTogXCJTRiBVSSBUZXh0XCIsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXCJTZWdvZSBVSVwiLCBSb2JvdG8sIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYsIFwiQXBwbGUgQ29sb3IgRW1vamlcIiwgXCJTZWdvZSBVSSBFbW9qaVwiLCBcIlNlZ29lIFVJIFN5bWJvbFwiO1xuXG5cbiAgICAgIFwiV2FybmluZzogRmFpbGVkICVzIHR5cGU6ICVzJXNcIlxuICAgIGApXG4gIH0pXG59KVxuIl19