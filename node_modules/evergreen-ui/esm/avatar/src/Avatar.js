import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["className", "color", "forceShowInitials", "getInitials", "hashValue", "name", "shape", "size", "sizeLimitOneCharacter", "src"],
    _excluded2 = ["className"];
import React, { useState, memo, forwardRef, useCallback } from 'react';
import cx from 'classnames';
import { css } from 'glamor';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { useStyleConfig } from '../../hooks';
import { Image } from '../../image';
import { Text } from '../../typography';
import globalGetInitials from './utils/getInitials';
import globalHash from './utils/hash';
var imageStyles = {
  objectFit: 'cover'
};
var pseudoSelectors = {};
var internalStyles = {
  overflow: 'hidden',
  position: 'relative',
  display: 'inline-flex',
  flexShrink: 0,
  justifyContent: 'center'
};
var isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style;
var initialsStyleClass = css({
  top: 0,
  position: 'absolute',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  lineHeight: 1
}).toString();

var getAvatarInitialsFontSize = function getAvatarInitialsFontSize(size, sizeLimitOneCharacter) {
  if (size <= sizeLimitOneCharacter) {
    return Math.floor(size / 2.2);
  }

  return Math.floor(size / 2.6);
};

var Avatar = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Avatar(props, ref) {
  var className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'automatic' : _props$color,
      _props$forceShowIniti = props.forceShowInitials,
      forceShowInitials = _props$forceShowIniti === void 0 ? false : _props$forceShowIniti,
      _props$getInitials = props.getInitials,
      getInitials = _props$getInitials === void 0 ? globalGetInitials : _props$getInitials,
      propsHashValue = props.hashValue,
      name = props.name,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'round' : _props$shape,
      _props$size = props.size,
      size = _props$size === void 0 ? 24 : _props$size,
      _props$sizeLimitOneCh = props.sizeLimitOneCharacter,
      sizeLimitOneCharacter = _props$sizeLimitOneCh === void 0 ? 20 : _props$sizeLimitOneCh,
      src = props.src,
      restProps = _objectWithoutProperties(props, _excluded);

  var hashValue = globalHash(propsHashValue || name);

  var _useStyleConfig = useStyleConfig('Avatar', {
    color: color,
    hashValue: hashValue,
    shape: shape
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      imageHasFailedLoading = _useState2[0],
      setImageHasFailedLoading = _useState2[1];

  var onError = useCallback(function () {
    return setImageHasFailedLoading(true);
  }, []);
  var imageUnavailable = !src || imageHasFailedLoading;
  var initialsFontSize = "".concat(getAvatarInitialsFontSize(size, sizeLimitOneCharacter), "px");
  var initials = getInitials(name);

  if (size <= sizeLimitOneCharacter) {
    initials = initials.slice(0, 1);
  }

  return /*#__PURE__*/React.createElement(Box, _extends({
    width: size,
    height: size,
    title: name,
    ref: ref,
    className: cx(className, themedClassName)
  }, styleProps, restProps), (imageUnavailable || forceShowInitials) && /*#__PURE__*/React.createElement(Text, {
    className: initialsStyleClass,
    fontSize: initialsFontSize,
    lineHeight: initialsFontSize,
    width: size,
    height: size,
    color: "inherit"
  }, initials), !imageUnavailable && /*#__PURE__*/React.createElement(Image, {
    style: imageStyles // Unsupported by ui-box directly
    ,
    width: isObjectFitSupported ? '100%' : 'auto' // Fallback to old behaviour on IE
    ,
    height: "100%",
    src: src,
    onError: onError
  }));
}));
Avatar.propTypes = {
  /**
   * Class name passed to the component.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string,

  /**
   * The src attribute of the image.
   * When it's not available, render initials instead.
   */
  src: PropTypes.string,

  /**
   * The size of the avatar.
   */
  size: PropTypes.number,

  /**
   * The name used for the initials and title attribute.
   */
  name: PropTypes.string,

  /**
   * The value used for the hash function.
   * The name is used as the hashValue by default.
   * When dealing with anonymous users you should use the id instead.
   */
  hashValue: PropTypes.string,

  /**
   * The color used for the avatar.
   * When the value is `automatic`, use the hash function to determine the color.
   */
  color: PropTypes.string,

  /**
   * Function to get the initials based on the name.
   */
  getInitials: PropTypes.func,

  /**
   * When true, force show the initials.
   * This is useful in some cases when using Gravatar and transparent pngs.
   */
  forceShowInitials: PropTypes.bool,

  /**
   * When the size is smaller than this number, use a single initial for the avatar.
   */
  sizeLimitOneCharacter: PropTypes.number,

  /**
   * Allows for the shape of the avatar component to either be round or square
   */
  shape: PropTypes.oneOf(['round', 'square'])
};
export default Avatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdmF0YXIvc3JjL0F2YXRhci5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwibWVtbyIsImZvcndhcmRSZWYiLCJ1c2VDYWxsYmFjayIsImN4IiwiY3NzIiwiUHJvcFR5cGVzIiwiQm94IiwidXNlU3R5bGVDb25maWciLCJJbWFnZSIsIlRleHQiLCJnbG9iYWxHZXRJbml0aWFscyIsImdsb2JhbEhhc2giLCJpbWFnZVN0eWxlcyIsIm9iamVjdEZpdCIsInBzZXVkb1NlbGVjdG9ycyIsImludGVybmFsU3R5bGVzIiwib3ZlcmZsb3ciLCJwb3NpdGlvbiIsImRpc3BsYXkiLCJmbGV4U2hyaW5rIiwianVzdGlmeUNvbnRlbnQiLCJpc09iamVjdEZpdFN1cHBvcnRlZCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJpbml0aWFsc1N0eWxlQ2xhc3MiLCJ0b3AiLCJhbGlnbkl0ZW1zIiwibGluZUhlaWdodCIsInRvU3RyaW5nIiwiZ2V0QXZhdGFySW5pdGlhbHNGb250U2l6ZSIsInNpemUiLCJzaXplTGltaXRPbmVDaGFyYWN0ZXIiLCJNYXRoIiwiZmxvb3IiLCJBdmF0YXIiLCJwcm9wcyIsInJlZiIsImNsYXNzTmFtZSIsImNvbG9yIiwiZm9yY2VTaG93SW5pdGlhbHMiLCJnZXRJbml0aWFscyIsInByb3BzSGFzaFZhbHVlIiwiaGFzaFZhbHVlIiwibmFtZSIsInNoYXBlIiwic3JjIiwicmVzdFByb3BzIiwidGhlbWVkQ2xhc3NOYW1lIiwic3R5bGVQcm9wcyIsImltYWdlSGFzRmFpbGVkTG9hZGluZyIsInNldEltYWdlSGFzRmFpbGVkTG9hZGluZyIsIm9uRXJyb3IiLCJpbWFnZVVuYXZhaWxhYmxlIiwiaW5pdGlhbHNGb250U2l6ZSIsImluaXRpYWxzIiwic2xpY2UiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJudW1iZXIiLCJmdW5jIiwiYm9vbCIsIm9uZU9mIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFB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Q3VELElBdkNOOztBQXlDakI7QUFDRjtBQUNBO0FBQ0E7QUFDRXBCLEVBQUFBLGlCQUFpQixFQUFFbkMsU0FBUyxDQUFDd0QsSUE3Q1o7O0FBK0NqQjtBQUNGO0FBQ0E7QUFDRTdCLEVBQUFBLHFCQUFxQixFQUFFM0IsU0FBUyxDQUFDc0QsTUFsRGhCOztBQW9EakI7QUFDRjtBQUNBO0FBQ0VkLEVBQUFBLEtBQUssRUFBRXhDLFNBQVMsQ0FBQ3lELEtBQVYsQ0FBZ0IsQ0FBQyxPQUFELEVBQVUsUUFBVixDQUFoQjtBQXZEVSxDQUFuQjtBQTBEQSxlQUFlM0IsTUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgbWVtbywgZm9yd2FyZFJlZiwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyB1c2VTdHlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi9pbWFnZSdcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90eXBvZ3JhcGh5J1xuaW1wb3J0IGdsb2JhbEdldEluaXRpYWxzIGZyb20gJy4vdXRpbHMvZ2V0SW5pdGlhbHMnXG5pbXBvcnQgZ2xvYmFsSGFzaCBmcm9tICcuL3V0aWxzL2hhc2gnXG5cbmNvbnN0IGltYWdlU3R5bGVzID0geyBvYmplY3RGaXQ6ICdjb3ZlcicgfVxuXG5jb25zdCBwc2V1ZG9TZWxlY3RvcnMgPSB7fVxuY29uc3QgaW50ZXJuYWxTdHlsZXMgPSB7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGZsZXhTaHJpbms6IDAsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xufVxuXG5jb25zdCBpc09iamVjdEZpdFN1cHBvcnRlZCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgJ29iamVjdEZpdCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlXG5cbmNvbnN0IGluaXRpYWxzU3R5bGVDbGFzcyA9IGNzcyh7XG4gIHRvcDogMCxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgbGluZUhlaWdodDogMVxufSkudG9TdHJpbmcoKVxuXG5jb25zdCBnZXRBdmF0YXJJbml0aWFsc0ZvbnRTaXplID0gKHNpemUsIHNpemVMaW1pdE9uZUNoYXJhY3RlcikgPT4ge1xuICBpZiAoc2l6ZSA8PSBzaXplTGltaXRPbmVDaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihzaXplIC8gMi4yKVxuICB9XG5cbiAgcmV0dXJuIE1hdGguZmxvb3Ioc2l6ZSAvIDIuNilcbn1cblxuY29uc3QgQXZhdGFyID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBBdmF0YXIocHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ2F1dG9tYXRpYycsXG4gICAgICBmb3JjZVNob3dJbml0aWFscyA9IGZhbHNlLFxuICAgICAgZ2V0SW5pdGlhbHMgPSBnbG9iYWxHZXRJbml0aWFscyxcbiAgICAgIGhhc2hWYWx1ZTogcHJvcHNIYXNoVmFsdWUsXG4gICAgICBuYW1lLFxuICAgICAgc2hhcGUgPSAncm91bmQnLFxuICAgICAgc2l6ZSA9IDI0LFxuICAgICAgc2l6ZUxpbWl0T25lQ2hhcmFjdGVyID0gMjAsXG4gICAgICBzcmMsXG4gICAgICAuLi5yZXN0UHJvcHNcbiAgICB9ID0gcHJvcHNcblxuICAgIGNvbnN0IGhhc2hWYWx1ZSA9IGdsb2JhbEhhc2gocHJvcHNIYXNoVmFsdWUgfHwgbmFtZSlcbiAgICBjb25zdCB7IGNsYXNzTmFtZTogdGhlbWVkQ2xhc3NOYW1lLCAuLi5zdHlsZVByb3BzIH0gPSB1c2VTdHlsZUNvbmZpZyhcbiAgICAgICdBdmF0YXInLFxuICAgICAgeyBjb2xvciwgaGFzaFZhbHVlLCBzaGFwZSB9LFxuICAgICAgcHNldWRvU2VsZWN0b3JzLFxuICAgICAgaW50ZXJuYWxTdHlsZXNcbiAgICApXG5cbiAgICBjb25zdCBbaW1hZ2VIYXNGYWlsZWRMb2FkaW5nLCBzZXRJbWFnZUhhc0ZhaWxlZExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gICAgY29uc3Qgb25FcnJvciA9IHVzZUNhbGxiYWNrKCgpID0+IHNldEltYWdlSGFzRmFpbGVkTG9hZGluZyh0cnVlKSwgW10pXG4gICAgY29uc3QgaW1hZ2VVbmF2YWlsYWJsZSA9ICFzcmMgfHwgaW1hZ2VIYXNGYWlsZWRMb2FkaW5nXG5cbiAgICBjb25zdCBpbml0aWFsc0ZvbnRTaXplID0gYCR7Z2V0QXZhdGFySW5pdGlhbHNGb250U2l6ZShzaXplLCBzaXplTGltaXRPbmVDaGFyYWN0ZXIpfXB4YFxuXG4gICAgbGV0IGluaXRpYWxzID0gZ2V0SW5pdGlhbHMobmFtZSlcbiAgICBpZiAoc2l6ZSA8PSBzaXplTGltaXRPbmVDaGFyYWN0ZXIpIHtcbiAgICAgIGluaXRpYWxzID0gaW5pdGlhbHMuc2xpY2UoMCwgMSlcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICB3aWR0aD17c2l6ZX1cbiAgICAgICAgaGVpZ2h0PXtzaXplfVxuICAgICAgICB0aXRsZT17bmFtZX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIGNsYXNzTmFtZT17Y3goY2xhc3NOYW1lLCB0aGVtZWRDbGFzc05hbWUpfVxuICAgICAgICB7Li4uc3R5bGVQcm9wc31cbiAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgID5cbiAgICAgICAgeyhpbWFnZVVuYXZhaWxhYmxlIHx8IGZvcmNlU2hvd0luaXRpYWxzKSAmJiAoXG4gICAgICAgICAgPFRleHRcbiAgICAgICAgICAgIGNsYXNzTmFtZT17aW5pdGlhbHNTdHlsZUNsYXNzfVxuICAgICAgICAgICAgZm9udFNpemU9e2luaXRpYWxzRm9udFNpemV9XG4gICAgICAgICAgICBsaW5lSGVpZ2h0PXtpbml0aWFsc0ZvbnRTaXplfVxuICAgICAgICAgICAgd2lkdGg9e3NpemV9XG4gICAgICAgICAgICBoZWlnaHQ9e3NpemV9XG4gICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpbml0aWFsc31cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICl9XG4gICAgICAgIHshaW1hZ2VVbmF2YWlsYWJsZSAmJiAoXG4gICAgICAgICAgPEltYWdlXG4gICAgICAgICAgICBzdHlsZT17aW1hZ2VTdHlsZXN9IC8vIFVuc3VwcG9ydGVkIGJ5IHVpLWJveCBkaXJlY3RseVxuICAgICAgICAgICAgd2lkdGg9e2lzT2JqZWN0Rml0U3VwcG9ydGVkID8gJzEwMCUnIDogJ2F1dG8nfSAvLyBGYWxsYmFjayB0byBvbGQgYmVoYXZpb3VyIG9uIElFXG4gICAgICAgICAgICBoZWlnaHQ9XCIxMDAlXCJcbiAgICAgICAgICAgIHNyYz17c3JjfVxuICAgICAgICAgICAgb25FcnJvcj17b25FcnJvcn1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9Cb3g+XG4gICAgKVxuICB9KVxuKVxuXG5BdmF0YXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ2xhc3MgbmFtZSBwYXNzZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogT25seSB1c2UgaWYgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc3JjIGF0dHJpYnV0ZSBvZiB0aGUgaW1hZ2UuXG4gICAqIFdoZW4gaXQncyBub3QgYXZhaWxhYmxlLCByZW5kZXIgaW5pdGlhbHMgaW5zdGVhZC5cbiAgICovXG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGF2YXRhci5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIHVzZWQgZm9yIHRoZSBpbml0aWFscyBhbmQgdGl0bGUgYXR0cmlidXRlLlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIHVzZWQgZm9yIHRoZSBoYXNoIGZ1bmN0aW9uLlxuICAgKiBUaGUgbmFtZSBpcyB1c2VkIGFzIHRoZSBoYXNoVmFsdWUgYnkgZGVmYXVsdC5cbiAgICogV2hlbiBkZWFsaW5nIHdpdGggYW5vbnltb3VzIHVzZXJzIHlvdSBzaG91bGQgdXNlIHRoZSBpZCBpbnN0ZWFkLlxuICAgKi9cbiAgaGFzaFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3IgdXNlZCBmb3IgdGhlIGF2YXRhci5cbiAgICogV2hlbiB0aGUgdmFsdWUgaXMgYGF1dG9tYXRpY2AsIHVzZSB0aGUgaGFzaCBmdW5jdGlvbiB0byBkZXRlcm1pbmUgdGhlIGNvbG9yLlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGdldCB0aGUgaW5pdGlhbHMgYmFzZWQgb24gdGhlIG5hbWUuXG4gICAqL1xuICBnZXRJbml0aWFsczogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgZm9yY2Ugc2hvdyB0aGUgaW5pdGlhbHMuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGluIHNvbWUgY2FzZXMgd2hlbiB1c2luZyBHcmF2YXRhciBhbmQgdHJhbnNwYXJlbnQgcG5ncy5cbiAgICovXG4gIGZvcmNlU2hvd0luaXRpYWxzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiB0aGUgc2l6ZSBpcyBzbWFsbGVyIHRoYW4gdGhpcyBudW1iZXIsIHVzZSBhIHNpbmdsZSBpbml0aWFsIGZvciB0aGUgYXZhdGFyLlxuICAgKi9cbiAgc2l6ZUxpbWl0T25lQ2hhcmFjdGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgZm9yIHRoZSBzaGFwZSBvZiB0aGUgYXZhdGFyIGNvbXBvbmVudCB0byBlaXRoZXIgYmUgcm91bmQgb3Igc3F1YXJlXG4gICAqL1xuICBzaGFwZTogUHJvcFR5cGVzLm9uZU9mKFsncm91bmQnLCAnc3F1YXJlJ10pXG59XG5cbmV4cG9ydCBkZWZhdWx0IEF2YXRhclxuIl19