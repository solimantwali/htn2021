import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["appearance", "children", "className", "disabled", "icon", "is", "isActive", "isLoading", "size"],
    _excluded2 = ["className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import Box, { dimensions, spacing, position, layout } from 'ui-box';
import { useStyleConfig } from '../../hooks';
import { CaretDownIcon } from '../../icons';
import { IconWrapper } from '../../icons/src/IconWrapper';
import { Spinner } from '../../spinner';
import { internalStyles, pseudoSelectors } from './Button';
var TextDropdownButton = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TextDropdownButton(props, ref) {
  var appearance = props.appearance,
      children = props.children,
      className = props.className,
      disabled = props.disabled,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? CaretDownIcon : _props$icon,
      _props$is = props.is,
      is = _props$is === void 0 ? 'button' : _props$is,
      _props$isActive = props.isActive,
      isActive = _props$isActive === void 0 ? false : _props$isActive,
      isLoading = props.isLoading,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useStyleConfig = useStyleConfig('TextDropdownButton', {
    size: size
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  return /*#__PURE__*/React.createElement(Box, _extends({
    is: is,
    ref: ref,
    type: is === 'button' ? 'button' : undefined,
    className: cx(themedClassName, className),
    "data-active": isActive || undefined
  }, boxProps, restProps, {
    disabled: disabled || isLoading
  }), isLoading && /*#__PURE__*/React.createElement(Spinner, {
    marginLeft: -2,
    marginRight: 4,
    size: 12
  }), children, /*#__PURE__*/React.createElement(IconWrapper, {
    icon: icon,
    marginLeft: 2,
    color: "default",
    size: 12
  }));
}));
TextDropdownButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {
  /**
   * Forcefully set the active state of a button.
   * Useful in conjuction with a Popover.
   */
  isActive: PropTypes.bool,

  /**
   * When true, the button is disabled.
   * isLoading also sets the button to disabled.
   */
  disabled: PropTypes.bool,

  /**
   * An Evergreen icon or custom icon node. By default it uses CaretDownIcon
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
});
export default TextDropdownButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9idXR0b25zL3NyYy9UZXh0RHJvcGRvd25CdXR0b24uanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImN4IiwiUHJvcFR5cGVzIiwiQm94IiwiZGltZW5zaW9ucyIsInNwYWNpbmciLCJwb3NpdGlvbiIsImxheW91dCIsInVzZVN0eWxlQ29uZmlnIiwiQ2FyZXREb3duSWNvbiIsIkljb25XcmFwcGVyIiwiU3Bpbm5lciIsImludGVybmFsU3R5bGVzIiwicHNldWRvU2VsZWN0b3JzIiwiVGV4dERyb3Bkb3duQnV0dG9uIiwicHJvcHMiLCJyZWYiLCJhcHBlYXJhbmNlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJkaXNhYmxlZCIsImljb24iLCJpcyIsImlzQWN0aXZlIiwiaXNMb2FkaW5nIiwic2l6ZSIsInJlc3RQcm9wcyIsInRoZW1lZENsYXNzTmFtZSIsImJveFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiYm9vbCIsIm9uZU9mVHlwZSIsImVsZW1lbnRUeXBlIiwiZWxlbWVudCIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLElBQWhCLEVBQXNCQyxVQUF0QixRQUF3QyxPQUF4QztBQUNBLE9BQU9DLEVBQVAsTUFBZSxZQUFmO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEdBQVAsSUFBY0MsVUFBZCxFQUEwQkMsT0FBMUIsRUFBbUNDLFFBQW5DLEVBQTZDQyxNQUE3QyxRQUEyRCxRQUEzRDtBQUNBLFNBQVNDLGNBQVQsUUFBK0IsYUFBL0I7QUFDQSxTQUFTQyxhQUFULFFBQThCLGFBQTlCO0FBQ0EsU0FBU0MsV0FBVCxRQUE0Qiw2QkFBNUI7QUFDQSxTQUFTQyxPQUFULFFBQXdCLGVBQXhCO0FBQ0EsU0FBU0MsY0FBVCxFQUF5QkMsZUFBekIsUUFBZ0QsVUFBaEQ7QUFFQSxJQUFNQyxrQkFBa0IsZ0JBQUdmLElBQUksZUFDN0JDLFVBQVUsQ0FBQyxTQUFTYyxrQkFBVCxDQUE0QkMsS0FBNUIsRUFBbUNDLEdBQW5DLEVBQXdDO0FBQ2pELE1BQ0VDLFVBREYsR0FXSUYsS0FYSixDQUNFRSxVQURGO0FBQUEsTUFFRUMsUUFGRixHQVdJSCxLQVhKLENBRUVHLFFBRkY7QUFBQSxNQUdFQyxTQUhGLEdBV0lKLEtBWEosQ0FHRUksU0FIRjtBQUFBLE1BSUVDLFFBSkYsR0FXSUwsS0FYSixDQUlFSyxRQUpGO0FBQUEsb0JBV0lMLEtBWEosQ0FLRU0sSUFMRjtBQUFBLE1BS0VBLElBTEYsNEJBS1NaLGFBTFQ7QUFBQSxrQkFXSU0sS0FYSixDQU1FTyxFQU5GO0FBQUEsTUFNRUEsRUFORiwwQkFNTyxRQU5QO0FBQUEsd0JBV0lQLEtBWEosQ0FPRVEsUUFQRjtBQUFBLE1BT0VBLFFBUEYsZ0NBT2EsS0FQYjtBQUFBLE1BUUVDLFNBUkYsR0FXSVQsS0FYSixDQVFFUyxTQVJGO0FBQUEsb0JBV0lULEtBWEosQ0FTRVUsSUFURjtBQUFBLE1BU0VBLElBVEYsNEJBU1MsUUFUVDtBQUFBLE1BVUtDLFNBVkwsNEJBV0lYLEtBWEo7O0FBYUEsd0JBQW9EUCxjQUFjLENBQ2hFLG9CQURnRSxFQUVoRTtBQUFFaUIsSUFBQUEsSUFBSSxFQUFKQTtBQUFGLEdBRmdFLEVBR2hFWixlQUhnRSxFQUloRUQsY0FKZ0UsQ0FBbEU7QUFBQSxNQUFtQmUsZUFBbkIsbUJBQVFSLFNBQVI7QUFBQSxNQUF1Q1MsUUFBdkM7O0FBT0Esc0JBQ0Usb0JBQUMsR0FBRDtBQUNFLElBQUEsRUFBRSxFQUFFTixFQUROO0FBRUUsSUFBQSxHQUFHLEVBQUVOLEdBRlA7QUFHRSxJQUFBLElBQUksRUFBRU0sRUFBRSxLQUFLLFFBQVAsR0FBa0IsUUFBbEIsR0FBNkJPLFNBSHJDO0FBSUUsSUFBQSxTQUFTLEVBQUU1QixFQUFFLENBQUMwQixlQUFELEVBQWtCUixTQUFsQixDQUpmO0FBS0UsbUJBQWFJLFFBQVEsSUFBSU07QUFMM0IsS0FNTUQsUUFOTixFQU9NRixTQVBOO0FBUUUsSUFBQSxRQUFRLEVBQUVOLFFBQVEsSUFBSUk7QUFSeEIsTUFVR0EsU0FBUyxpQkFBSSxvQkFBQyxPQUFEO0FBQVMsSUFBQSxVQUFVLEVBQUUsQ0FBQyxDQUF0QjtBQUF5QixJQUFBLFdBQVcsRUFBRSxDQUF0QztBQUF5QyxJQUFBLElBQUksRUFBRTtBQUEvQyxJQVZoQixFQVdHTixRQVhILGVBWUUsb0JBQUMsV0FBRDtBQUFhLElBQUEsSUFBSSxFQUFFRyxJQUFuQjtBQUF5QixJQUFBLFVBQVUsRUFBRSxDQUFyQztBQUF3QyxJQUFBLEtBQUssRUFBQyxTQUE5QztBQUF3RCxJQUFBLElBQUksRUFBRTtBQUE5RCxJQVpGLENBREY7QUFnQkQsQ0FyQ1MsQ0FEbUIsQ0FBL0I7QUF5Q0FQLGtCQUFrQixDQUFDZ0IsU0FBbkIsNkVBSUsxQixVQUFVLENBQUMwQixTQUpoQixHQVNLekIsT0FBTyxDQUFDeUIsU0FUYixHQWNLeEIsUUFBUSxDQUFDd0IsU0FkZCxHQW1CS3ZCLE1BQU0sQ0FBQ3VCLFNBbkJaO0FBcUJFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VQLEVBQUFBLFFBQVEsRUFBRXJCLFNBQVMsQ0FBQzZCLElBekJ0Qjs7QUEyQkU7QUFDRjtBQUNBO0FBQ0E7QUFDRVgsRUFBQUEsUUFBUSxFQUFFbEIsU0FBUyxDQUFDNkIsSUEvQnRCOztBQWlDRTtBQUNGO0FBQ0E7QUFDRVYsRUFBQUEsSUFBSSxFQUFFbkIsU0FBUyxDQUFDOEIsU0FBVixDQUFvQixDQUFDOUIsU0FBUyxDQUFDK0IsV0FBWCxFQUF3Qi9CLFNBQVMsQ0FBQ2dDLE9BQWxDLENBQXBCLENBcENSOztBQXNDRTtBQUNGO0FBQ0E7QUFDQTtBQUNFZixFQUFBQSxTQUFTLEVBQUVqQixTQUFTLENBQUNpQztBQTFDdkI7QUE2Q0EsZUFBZXJCLGtCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCwgeyBkaW1lbnNpb25zLCBzcGFjaW5nLCBwb3NpdGlvbiwgbGF5b3V0IH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgdXNlU3R5bGVDb25maWcgfSBmcm9tICcuLi8uLi9ob29rcydcbmltcG9ydCB7IENhcmV0RG93bkljb24gfSBmcm9tICcuLi8uLi9pY29ucydcbmltcG9ydCB7IEljb25XcmFwcGVyIH0gZnJvbSAnLi4vLi4vaWNvbnMvc3JjL0ljb25XcmFwcGVyJ1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uLy4uL3NwaW5uZXInXG5pbXBvcnQgeyBpbnRlcm5hbFN0eWxlcywgcHNldWRvU2VsZWN0b3JzIH0gZnJvbSAnLi9CdXR0b24nXG5cbmNvbnN0IFRleHREcm9wZG93bkJ1dHRvbiA9IG1lbW8oXG4gIGZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dERyb3Bkb3duQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGljb24gPSBDYXJldERvd25JY29uLFxuICAgICAgaXMgPSAnYnV0dG9uJyxcbiAgICAgIGlzQWN0aXZlID0gZmFsc2UsXG4gICAgICBpc0xvYWRpbmcsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICAuLi5yZXN0UHJvcHNcbiAgICB9ID0gcHJvcHNcblxuICAgIGNvbnN0IHsgY2xhc3NOYW1lOiB0aGVtZWRDbGFzc05hbWUsIC4uLmJveFByb3BzIH0gPSB1c2VTdHlsZUNvbmZpZyhcbiAgICAgICdUZXh0RHJvcGRvd25CdXR0b24nLFxuICAgICAgeyBzaXplIH0sXG4gICAgICBwc2V1ZG9TZWxlY3RvcnMsXG4gICAgICBpbnRlcm5hbFN0eWxlc1xuICAgIClcblxuICAgIHJldHVybiAoXG4gICAgICA8Qm94XG4gICAgICAgIGlzPXtpc31cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHR5cGU9e2lzID09PSAnYnV0dG9uJyA/ICdidXR0b24nIDogdW5kZWZpbmVkfVxuICAgICAgICBjbGFzc05hbWU9e2N4KHRoZW1lZENsYXNzTmFtZSwgY2xhc3NOYW1lKX1cbiAgICAgICAgZGF0YS1hY3RpdmU9e2lzQWN0aXZlIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgey4uLmJveFByb3BzfVxuICAgICAgICB7Li4ucmVzdFByb3BzfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWQgfHwgaXNMb2FkaW5nfVxuICAgICAgPlxuICAgICAgICB7aXNMb2FkaW5nICYmIDxTcGlubmVyIG1hcmdpbkxlZnQ9ey0yfSBtYXJnaW5SaWdodD17NH0gc2l6ZT17MTJ9IC8+fVxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDxJY29uV3JhcHBlciBpY29uPXtpY29ufSBtYXJnaW5MZWZ0PXsyfSBjb2xvcj1cImRlZmF1bHRcIiBzaXplPXsxMn0gLz5cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfSlcbilcblxuVGV4dERyb3Bkb3duQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbXBvc2VzIHRoZSBkaW1lbnNpb25zIHNwZWMgZnJvbSB0aGUgQm94IHByaW1pdGl2ZS5cbiAgICovXG4gIC4uLmRpbWVuc2lvbnMucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBDb21wb3NlcyB0aGUgc3BhY2luZyBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5zcGFjaW5nLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIHBvc2l0aW9uIHNwZWMgZnJvbSB0aGUgQm94IHByaW1pdGl2ZS5cbiAgICovXG4gIC4uLnBvc2l0aW9uLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIGxheW91dCBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5sYXlvdXQucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3JjZWZ1bGx5IHNldCB0aGUgYWN0aXZlIHN0YXRlIG9mIGEgYnV0dG9uLlxuICAgKiBVc2VmdWwgaW4gY29uanVjdGlvbiB3aXRoIGEgUG9wb3Zlci5cbiAgICovXG4gIGlzQWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgKiBpc0xvYWRpbmcgYWxzbyBzZXRzIHRoZSBidXR0b24gdG8gZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFuIEV2ZXJncmVlbiBpY29uIG9yIGN1c3RvbSBpY29uIG5vZGUuIEJ5IGRlZmF1bHQgaXQgdXNlcyBDYXJldERvd25JY29uXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZWxlbWVudFR5cGUsIFByb3BUeXBlcy5lbGVtZW50XSksXG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgcGFzc2VkIHRvIHRoZSBidXR0b24uXG4gICAqIE9ubHkgdXNlIGlmIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0RHJvcGRvd25CdXR0b25cbiJdfQ==