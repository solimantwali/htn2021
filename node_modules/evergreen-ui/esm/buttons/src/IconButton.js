import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["icon", "iconSize"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { dimensions, spacing, position, layout } from 'ui-box';
import { useStyleConfig } from '../../hooks';
import { IconWrapper } from '../../icons/src/IconWrapper';
import Button, { getIconSizeForButton, internalStyles, pseudoSelectors } from './Button';
var IconButton = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function IconButton(props, ref) {
  var icon = props.icon,
      iconSize = props.iconSize,
      restProps = _objectWithoutProperties(props, _excluded); // modifiers


  var appearance = props.appearance,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size; // Composes the exact same styles as button

  var styleProps = useStyleConfig('Button', {
    appearance: appearance,
    intent: intent,
    size: size
  }, pseudoSelectors, internalStyles);
  var height = restProps.height || styleProps.height;
  var relativeIconSize = getIconSizeForButton(height);
  return /*#__PURE__*/React.createElement(Button, _extends({
    ref: ref,
    paddingLeft: 0,
    paddingRight: 0,
    flex: "none",
    height: height,
    width: height,
    minWidth: height
  }, restProps), /*#__PURE__*/React.createElement(IconWrapper, {
    icon: icon,
    color: intent === 'none' ? 'default' : 'currentColor',
    size: iconSize || relativeIconSize
  }));
}));
IconButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {
  /**
   * The size of the button
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * The Evergreen icon or custom icon to render
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * Specifies an explicit icon size instead of the default value
   */
  iconSize: PropTypes.number,

  /**
   * The intent of the button.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),

  /**
   * The appearance of the button.
   */
  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),

  /**
   * Forcefully set the active state of a button.
   * Useful in conjunction with a Popover.
   */
  isActive: PropTypes.bool,

  /**
   * When true, the button is disabled.
   * isLoading also sets the button to disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
});
export default IconButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9idXR0b25zL3NyYy9JY29uQnV0dG9uLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwibWVtbyIsImZvcndhcmRSZWYiLCJQcm9wVHlwZXMiLCJkaW1lbnNpb25zIiwic3BhY2luZyIsInBvc2l0aW9uIiwibGF5b3V0IiwidXNlU3R5bGVDb25maWciLCJJY29uV3JhcHBlciIsIkJ1dHRvbiIsImdldEljb25TaXplRm9yQnV0dG9uIiwiaW50ZXJuYWxTdHlsZXMiLCJwc2V1ZG9TZWxlY3RvcnMiLCJJY29uQnV0dG9uIiwicHJvcHMiLCJyZWYiLCJpY29uIiwiaWNvblNpemUiLCJyZXN0UHJvcHMiLCJhcHBlYXJhbmNlIiwiaW50ZW50Iiwic2l6ZSIsInN0eWxlUHJvcHMiLCJoZWlnaHQiLCJyZWxhdGl2ZUljb25TaXplIiwicHJvcFR5cGVzIiwib25lT2YiLCJvbmVPZlR5cGUiLCJlbGVtZW50VHlwZSIsImVsZW1lbnQiLCJudW1iZXIiLCJpc0FjdGl2ZSIsImJvb2wiLCJkaXNhYmxlZCIsImNsYXNzTmFtZSIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsSUFBaEIsRUFBc0JDLFVBQXRCLFFBQXdDLE9BQXhDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLE9BQXJCLEVBQThCQyxRQUE5QixFQUF3Q0MsTUFBeEMsUUFBc0QsUUFBdEQ7QUFDQSxTQUFTQyxjQUFULFFBQStCLGFBQS9CO0FBQ0EsU0FBU0MsV0FBVCxRQUE0Qiw2QkFBNUI7QUFDQSxPQUFPQyxNQUFQLElBQWlCQyxvQkFBakIsRUFBdUNDLGNBQXZDLEVBQXVEQyxlQUF2RCxRQUE4RSxVQUE5RTtBQUVBLElBQU1DLFVBQVUsZ0JBQUdiLElBQUksZUFDckJDLFVBQVUsQ0FBQyxTQUFTWSxVQUFULENBQW9CQyxLQUFwQixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDekMsTUFBUUMsSUFBUixH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VUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBtZW1vLCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBkaW1lbnNpb25zLCBzcGFjaW5nLCBwb3NpdGlvbiwgbGF5b3V0IH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgdXNlU3R5bGVDb25maWcgfSBmcm9tICcuLi8uLi9ob29rcydcbmltcG9ydCB7IEljb25XcmFwcGVyIH0gZnJvbSAnLi4vLi4vaWNvbnMvc3JjL0ljb25XcmFwcGVyJ1xuaW1wb3J0IEJ1dHRvbiwgeyBnZXRJY29uU2l6ZUZvckJ1dHRvbiwgaW50ZXJuYWxTdHlsZXMsIHBzZXVkb1NlbGVjdG9ycyB9IGZyb20gJy4vQnV0dG9uJ1xuXG5jb25zdCBJY29uQnV0dG9uID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgICBjb25zdCB7IGljb24sIGljb25TaXplLCAuLi5yZXN0UHJvcHMgfSA9IHByb3BzXG5cbiAgICAvLyBtb2RpZmllcnNcbiAgICBjb25zdCB7IGFwcGVhcmFuY2UsIGludGVudCA9ICdub25lJywgc2l6ZSA9ICdtZWRpdW0nIH0gPSBwcm9wc1xuXG4gICAgLy8gQ29tcG9zZXMgdGhlIGV4YWN0IHNhbWUgc3R5bGVzIGFzIGJ1dHRvblxuICAgIGNvbnN0IHN0eWxlUHJvcHMgPSB1c2VTdHlsZUNvbmZpZygnQnV0dG9uJywgeyBhcHBlYXJhbmNlLCBpbnRlbnQsIHNpemUgfSwgcHNldWRvU2VsZWN0b3JzLCBpbnRlcm5hbFN0eWxlcylcblxuICAgIGNvbnN0IGhlaWdodCA9IHJlc3RQcm9wcy5oZWlnaHQgfHwgc3R5bGVQcm9wcy5oZWlnaHRcbiAgICBjb25zdCByZWxhdGl2ZUljb25TaXplID0gZ2V0SWNvblNpemVGb3JCdXR0b24oaGVpZ2h0KVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCdXR0b25cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHBhZGRpbmdMZWZ0PXswfVxuICAgICAgICBwYWRkaW5nUmlnaHQ9ezB9XG4gICAgICAgIGZsZXg9XCJub25lXCJcbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIHdpZHRoPXtoZWlnaHR9XG4gICAgICAgIG1pbldpZHRoPXtoZWlnaHR9XG4gICAgICAgIHsuLi5yZXN0UHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxJY29uV3JhcHBlclxuICAgICAgICAgIGljb249e2ljb259XG4gICAgICAgICAgY29sb3I9e2ludGVudCA9PT0gJ25vbmUnID8gJ2RlZmF1bHQnIDogJ2N1cnJlbnRDb2xvcid9XG4gICAgICAgICAgc2l6ZT17aWNvblNpemUgfHwgcmVsYXRpdmVJY29uU2l6ZX1cbiAgICAgICAgLz5cbiAgICAgIDwvQnV0dG9uPlxuICAgIClcbiAgfSlcbilcblxuSWNvbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDb21wb3NlcyB0aGUgZGltZW5zaW9ucyBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5kaW1lbnNpb25zLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIHNwYWNpbmcgc3BlYyBmcm9tIHRoZSBCb3ggcHJpbWl0aXZlLlxuICAgKi9cbiAgLi4uc3BhY2luZy5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIENvbXBvc2VzIHRoZSBwb3NpdGlvbiBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5wb3NpdGlvbi5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIENvbXBvc2VzIHRoZSBsYXlvdXQgc3BlYyBmcm9tIHRoZSBCb3ggcHJpbWl0aXZlLlxuICAgKi9cbiAgLi4ubGF5b3V0LnByb3BUeXBlcyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvblxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgRXZlcmdyZWVuIGljb24gb3IgY3VzdG9tIGljb24gdG8gcmVuZGVyXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZWxlbWVudFR5cGUsIFByb3BUeXBlcy5lbGVtZW50XSksXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBhbiBleHBsaWNpdCBpY29uIHNpemUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCB2YWx1ZVxuICAgKi9cbiAgaWNvblNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGludGVudDogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZGFuZ2VyJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgYXBwZWFyYW5jZSBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgYXBwZWFyYW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdtaW5pbWFsJywgJ3ByaW1hcnknXSksXG5cbiAgLyoqXG4gICAqIEZvcmNlZnVsbHkgc2V0IHRoZSBhY3RpdmUgc3RhdGUgb2YgYSBidXR0b24uXG4gICAqIFVzZWZ1bCBpbiBjb25qdW5jdGlvbiB3aXRoIGEgUG9wb3Zlci5cbiAgICovXG4gIGlzQWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgKiBpc0xvYWRpbmcgYWxzbyBzZXRzIHRoZSBidXR0b24gdG8gZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgcGFzc2VkIHRvIHRoZSBidXR0b24uXG4gICAqIE9ubHkgdXNlIGlmIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBJY29uQnV0dG9uXG4iXX0=