import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["appearance", "children", "className", "color", "disabled", "iconAfter", "iconBefore", "intent", "is", "isActive", "isLoading"],
    _excluded2 = ["className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import Box, { spacing, dimensions, position, layout } from 'ui-box';
import { useStyleConfig } from '../../hooks';
import { IconWrapper } from '../../icons/src/IconWrapper';
import { getTextPropsForControlHeight } from '../../lib/deprecated-theme-helpers';
import { Spinner } from '../../spinner';
/* eslint-disable react/prop-types */

var ButtonIcon = /*#__PURE__*/memo(function ButtonIcon(_ref) {
  var edge = _ref.edge,
      icon = _ref.icon,
      size = _ref.size,
      spacing = _ref.spacing;
  if (!icon) return null;
  var relativeSpace = typeof spacing === 'number' ? spacing : size;
  var edgeMargin = -Math.round(relativeSpace * 0.25);
  var innerMargin = Math.round(size * 0.7);
  var marginLeft = edge === 'start' ? edgeMargin : innerMargin;
  var marginRight = edge === 'end' ? edgeMargin : innerMargin;
  return /*#__PURE__*/React.createElement(IconWrapper, {
    icon: icon,
    size: size,
    marginLeft: marginLeft,
    marginRight: marginRight
  });
});
/* eslint-enable react/prop-types */

export var internalStyles = {
  position: 'relative',
  fontWeight: 500,
  display: 'inline-flex',
  alignItems: 'center',
  flexWrap: 'nowrap',
  justifyContent: 'center',
  textDecoration: 'none',
  verticalAlign: 'middle',
  border: 'none',
  outline: 'none',
  userSelect: 'none',
  cursor: 'pointer',
  whiteSpace: 'nowrap',
  WebkitFontSmoothing: 'antialiased',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  '&::-moz-focus-inner ': {
    border: 0
  }
};
export var pseudoSelectors = {
  _active: '&:not([disabled]):active, &:not([disabled])[aria-expanded="true"], &:not([disabled])[data-active]',
  _disabled: '&[disabled]',
  _focus: '&:not([disabled]):focus',
  _focusAndActive: '&:not([disabled]):focus:active, &:not([disabled])[aria-expanded="true"]:focus, &:not([disabled])[data-active]:focus',
  _hover: '&:not([disabled]):hover'
};
export var getIconSizeForButton = function getIconSizeForButton(height) {
  if (height <= 28) return 12;
  if (height <= 32) return 14;
  if (height <= 40) return 16;
  if (height <= 48) return 18;
  return 20;
};
var Button = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Button(props, ref) {
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      children = props.children,
      className = props.className,
      color = props.color,
      disabled = props.disabled,
      iconAfter = props.iconAfter,
      iconBefore = props.iconBefore,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      _props$is = props.is,
      is = _props$is === void 0 ? 'button' : _props$is,
      _props$isActive = props.isActive,
      isActive = _props$isActive === void 0 ? false : _props$isActive,
      isLoading = props.isLoading,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useStyleConfig = useStyleConfig('Button', {
    appearance: appearance,
    color: color,
    intent: intent,
    size: restProps.size || 'medium'
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);

  var height = restProps.height || boxProps.height; // Keep backwards compat font sizing if an explicit height was passed in.

  var textProps = !restProps.size && restProps.height ? getTextPropsForControlHeight(restProps.height) : {};
  var iconSize = getIconSizeForButton(height);
  return /*#__PURE__*/React.createElement(Box, _extends({
    is: is,
    ref: ref,
    className: cx(themedClassName, className),
    "data-active": isActive || undefined
  }, boxProps, restProps, textProps, {
    disabled: disabled || isLoading
  }), isLoading && /*#__PURE__*/React.createElement(Spinner, {
    marginLeft: -Math.round(height / 8),
    marginRight: Math.round(height / 4),
    size: Math.round(height / 2)
  }), /*#__PURE__*/React.createElement(ButtonIcon, {
    icon: iconBefore,
    size: iconSize,
    spacing: restProps.paddingLeft,
    edge: "start"
  }), children, /*#__PURE__*/React.createElement(ButtonIcon, {
    icon: iconAfter,
    size: iconSize,
    spacing: restProps.paddingRight,
    edge: "end"
  }));
}));
Button.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {
  /**
   * The appearance of the button.
   */
  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),

  /**
   * The size of the button
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * When true, show a loading spinner before the children.
   * This also disables the button.
   */
  isLoading: PropTypes.bool,

  /**
   * Forcefully set the active state of a button.
   * Useful in conjunction with a Popover.
   */
  isActive: PropTypes.bool,

  /**
   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.
   */
  iconBefore: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.
   */
  iconAfter: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),

  /**
   * When true, the button is disabled.
   * isLoading also sets the button to disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
});
export default Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9idXR0b25zL3NyYy9CdXR0b24uanMiXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImN4IiwiUHJvcFR5cGVzIiwiQm94Iiwic3BhY2luZyIsImRpbWVuc2lvbnMiLCJwb3NpdGlvbiIsImxheW91dCIsInVzZVN0eWxlQ29uZmlnIiwiSWNvbldyYXBwZXIiLCJnZXRUZXh0UHJvcHNGb3JDb250cm9sSGVpZ2h0IiwiU3Bpbm5lciIsIkJ1dHRvbkljb24iLCJlZGdlIiwiaWNvbiIsInNpemUiLCJyZWxhdGl2ZVNwYWNlIiwiZWRnZU1hcmdpbiIsIk1hdGgiLCJyb3VuZCIsImlubmVyTWFyZ2luIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiaW50ZXJuYWxTdHlsZXMiLCJmb250V2VpZ2h0IiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJmbGV4V3JhcCIsImp1c3RpZnlDb250ZW50IiwidGV4dERlY29yYXRpb24iLCJ2ZXJ0aWNhbEFsaWduIiwiYm9yZGVyIiwib3V0bGluZSIsInVzZXJTZWxlY3QiLCJjdXJzb3IiLCJ3aGl0ZVNwYWNlIiwiV2Via2l0Rm9udFNtb290aGluZyIsIldlYmtpdEFwcGVhcmFuY2UiLCJNb3pBcHBlYXJhbmNlIiwicHNldWRvU2VsZWN0b3JzIiwiX2FjdGl2ZSIsIl9kaXNhYmxlZCIsIl9mb2N1cyIsIl9mb2N1c0FuZEFjdGl2ZSIsIl9ob3ZlciIsImdldEljb25TaXplRm9yQnV0dG9uIiwiaGVpZ2h0IiwiQnV0dG9uIiwicHJvcHMiLCJyZWYiLCJhcHBlYXJhbmNlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJjb2xvciIsImRpc2FibGVkIiwiaWNvbkFmdGVyIiwiaWNvbkJlZm9yZSIsImludGVudCIsImlzIiwiaXNBY3RpdmUiLCJpc0xvYWRpbmciLCJyZXN0UHJvcHMiLCJ0aGVtZWRDbGFzc05hbWUiLCJib3hQcm9wcyIsInRleHRQcm9wcyIsImljb25TaXplIiwidW5kZWZpbmVkIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwcm9wVHlwZXMiLCJvbmVPZiIsImJvb2wiLCJvbmVPZlR5cGUiLCJlbGVtZW50VHlwZSIsImVsZW1lbnQiLCJzdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxJQUFoQixFQUFzQkMsVUFBdEIsUUFBd0MsT0FBeEM7QUFDQSxPQUFPQyxFQUFQLE1BQWUsWUFBZjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLElBQWNDLE9BQWQsRUFBdUJDLFVBQXZCLEVBQW1DQyxRQUFuQyxFQUE2Q0MsTUFBN0MsUUFBMkQsUUFBM0Q7QUFDQSxTQUFTQyxjQUFULFFBQStCLGFBQS9CO0FBQ0EsU0FBU0MsV0FBVCxRQUE0Qiw2QkFBNUI7QUFDQSxTQUFTQyw0QkFBVCxRQUE2QyxvQ0FBN0M7QUFDQSxTQUFTQyxPQUFULFFBQXdCLGVBQXhCO0FBRUE7O0FBQ0EsSUFBTUMsVUFBVSxnQkFBR2IsSUFBSSxDQUFDLFNBQVNhLFVBQVQsT0FBbUQ7QUFBQSxNQUE3QkMsSUFBNkIsUUFBN0JBLElBQTZCO0FBQUEsTUFBdkJDLElBQXVCLFFBQXZCQSxJQUF1QjtBQUFBLE1BQWpCQyxJQUFpQixRQUFqQkEsSUFBaUI7QUFBQSxNQUFYWCxPQUFXLFFBQVhBLE9BQVc7QUFDekUsTUFBSSxDQUFDVSxJQUFMLEVBQVcsT0FBTyxJQUFQO0FBRVgsTUFBTUUsYUFBYSxHQUFHLE9BQU9aLE9BQVAsS0FBbUIsUUFBbkIsR0FBOEJBLE9BQTlCLEdBQXdDVyxJQUE5RDtBQUNBLE1BQU1FLFVBQVUsR0FBRyxDQUFDQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsYUFBYSxHQUFHLElBQTNCLENBQXBCO0FBQ0EsTUFBTUksV0FBVyxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBV0osSUFBSSxHQUFHLEdBQWxCLENBQXBCO0FBQ0EsTUFBTU0sVUFBVSxHQUFHUixJQUFJLEtBQUssT0FBVCxHQUFtQkksVUFBbkIs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QVMsQ0FBQ3FFLElBekN0Qjs7QUEyQ0U7QUFDRjtBQUNBO0FBQ0VmLEVBQUFBLFVBQVUsRUFBRXRELFNBQVMsQ0FBQ3NFLFNBQVYsQ0FBb0IsQ0FBQ3RFLFNBQVMsQ0FBQ3VFLFdBQVgsRUFBd0J2RSxTQUFTLENBQUN3RSxPQUFsQyxDQUFwQixDQTlDZDs7QUFnREU7QUFDRjtBQUNBO0FBQ0VuQixFQUFBQSxTQUFTLEVBQUVyRCxTQUFTLENBQUNzRSxTQUFWLENBQW9CLENBQUN0RSxTQUFTLENBQUN1RSxXQUFYLEVBQXdCdkUsU0FBUyxDQUFDd0UsT0FBbEMsQ0FBcEIsQ0FuRGI7O0FBcURFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VwQixFQUFBQSxRQUFRLEVBQUVwRCxTQUFTLENBQUNxRSxJQXpEdEI7O0FBMkRFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0VuQixFQUFBQSxTQUFTLEVBQUVsRCxTQUFTLENBQUN5RTtBQS9EdkI7QUFrRUEsZUFBZTVCLE1BQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgQm94LCB7IHNwYWNpbmcsIGRpbWVuc2lvbnMsIHBvc2l0aW9uLCBsYXlvdXQgfSBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyB1c2VTdHlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL2hvb2tzJ1xuaW1wb3J0IHsgSWNvbldyYXBwZXIgfSBmcm9tICcuLi8uLi9pY29ucy9zcmMvSWNvbldyYXBwZXInXG5pbXBvcnQgeyBnZXRUZXh0UHJvcHNGb3JDb250cm9sSGVpZ2h0IH0gZnJvbSAnLi4vLi4vbGliL2RlcHJlY2F0ZWQtdGhlbWUtaGVscGVycydcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi8uLi9zcGlubmVyJ1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5jb25zdCBCdXR0b25JY29uID0gbWVtbyhmdW5jdGlvbiBCdXR0b25JY29uKHsgZWRnZSwgaWNvbiwgc2l6ZSwgc3BhY2luZyB9KSB7XG4gIGlmICghaWNvbikgcmV0dXJuIG51bGxcblxuICBjb25zdCByZWxhdGl2ZVNwYWNlID0gdHlwZW9mIHNwYWNpbmcgPT09ICdudW1iZXInID8gc3BhY2luZyA6IHNpemVcbiAgY29uc3QgZWRnZU1hcmdpbiA9IC1NYXRoLnJvdW5kKHJlbGF0aXZlU3BhY2UgKiAwLjI1KVxuICBjb25zdCBpbm5lck1hcmdpbiA9IE1hdGgucm91bmQoc2l6ZSAqIDAuNylcbiAgY29uc3QgbWFyZ2luTGVmdCA9IGVkZ2UgPT09ICdzdGFydCcgPyBlZGdlTWFyZ2luIDogaW5uZXJNYXJnaW5cbiAgY29uc3QgbWFyZ2luUmlnaHQgPSBlZGdlID09PSAnZW5kJyA/IGVkZ2VNYXJnaW4gOiBpbm5lck1hcmdpblxuXG4gIHJldHVybiA8SWNvbldyYXBwZXIgaWNvbj17aWNvbn0gc2l6ZT17c2l6ZX0gbWFyZ2luTGVmdD17bWFyZ2luTGVmdH0gbWFyZ2luUmlnaHQ9e21hcmdpblJpZ2h0fSAvPlxufSlcbi8qIGVzbGludC1lbmFibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuXG5leHBvcnQgY29uc3QgaW50ZXJuYWxTdHlsZXMgPSB7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBmb250V2VpZ2h0OiA1MDAsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBmbGV4V3JhcDogJ25vd3JhcCcsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBvdXRsaW5lOiAnbm9uZScsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgJyY6Oi1tb3otZm9jdXMtaW5uZXIgJzoge1xuICAgIGJvcmRlcjogMFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBwc2V1ZG9TZWxlY3RvcnMgPSB7XG4gIF9hY3RpdmU6ICcmOm5vdChbZGlzYWJsZWRdKTphY3RpdmUsICY6bm90KFtkaXNhYmxlZF0pW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdLCAmOm5vdChbZGlzYWJsZWRdKVtkYXRhLWFjdGl2ZV0nLFxuICBfZGlzYWJsZWQ6ICcmW2Rpc2FibGVkXScsXG4gIF9mb2N1czogJyY6bm90KFtkaXNhYmxlZF0pOmZvY3VzJyxcbiAgX2ZvY3VzQW5kQWN0aXZlOlxuICAgICcmOm5vdChbZGlzYWJsZWRdKTpmb2N1czphY3RpdmUsICY6bm90KFtkaXNhYmxlZF0pW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdOmZvY3VzLCAmOm5vdChbZGlzYWJsZWRdKVtkYXRhLWFjdGl2ZV06Zm9jdXMnLFxuICBfaG92ZXI6ICcmOm5vdChbZGlzYWJsZWRdKTpob3Zlcidcbn1cblxuZXhwb3J0IGNvbnN0IGdldEljb25TaXplRm9yQnV0dG9uID0gaGVpZ2h0ID0+IHtcbiAgaWYgKGhlaWdodCA8PSAyOCkgcmV0dXJuIDEyXG4gIGlmIChoZWlnaHQgPD0gMzIpIHJldHVybiAxNFxuICBpZiAoaGVpZ2h0IDw9IDQwKSByZXR1cm4gMTZcbiAgaWYgKGhlaWdodCA8PSA0OCkgcmV0dXJuIDE4XG4gIHJldHVybiAyMFxufVxuXG5jb25zdCBCdXR0b24gPSBtZW1vKFxuICBmb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbihwcm9wcywgcmVmKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXBwZWFyYW5jZSA9ICdkZWZhdWx0JyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGljb25BZnRlcixcbiAgICAgIGljb25CZWZvcmUsXG4gICAgICBpbnRlbnQgPSAnbm9uZScsXG4gICAgICBpcyA9ICdidXR0b24nLFxuICAgICAgaXNBY3RpdmUgPSBmYWxzZSxcbiAgICAgIGlzTG9hZGluZyxcbiAgICAgIC4uLnJlc3RQcm9wc1xuICAgIH0gPSBwcm9wc1xuXG4gICAgY29uc3QgeyBjbGFzc05hbWU6IHRoZW1lZENsYXNzTmFtZSwgLi4uYm94UHJvcHMgfSA9IHVzZVN0eWxlQ29uZmlnKFxuICAgICAgJ0J1dHRvbicsXG4gICAgICB7IGFwcGVhcmFuY2UsIGNvbG9yLCBpbnRlbnQsIHNpemU6IHJlc3RQcm9wcy5zaXplIHx8ICdtZWRpdW0nIH0sXG4gICAgICBwc2V1ZG9TZWxlY3RvcnMsXG4gICAgICBpbnRlcm5hbFN0eWxlc1xuICAgIClcblxuICAgIGNvbnN0IGhlaWdodCA9IHJlc3RQcm9wcy5oZWlnaHQgfHwgYm94UHJvcHMuaGVpZ2h0XG4gICAgLy8gS2VlcCBiYWNrd2FyZHMgY29tcGF0IGZvbnQgc2l6aW5nIGlmIGFuIGV4cGxpY2l0IGhlaWdodCB3YXMgcGFzc2VkIGluLlxuICAgIGNvbnN0IHRleHRQcm9wcyA9ICFyZXN0UHJvcHMuc2l6ZSAmJiByZXN0UHJvcHMuaGVpZ2h0ID8gZ2V0VGV4dFByb3BzRm9yQ29udHJvbEhlaWdodChyZXN0UHJvcHMuaGVpZ2h0KSA6IHt9XG4gICAgY29uc3QgaWNvblNpemUgPSBnZXRJY29uU2l6ZUZvckJ1dHRvbihoZWlnaHQpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICBpcz17aXN9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBjbGFzc05hbWU9e2N4KHRoZW1lZENsYXNzTmFtZSwgY2xhc3NOYW1lKX1cbiAgICAgICAgZGF0YS1hY3RpdmU9e2lzQWN0aXZlIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgey4uLmJveFByb3BzfVxuICAgICAgICB7Li4ucmVzdFByb3BzfVxuICAgICAgICB7Li4udGV4dFByb3BzfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWQgfHwgaXNMb2FkaW5nfVxuICAgICAgPlxuICAgICAgICB7aXNMb2FkaW5nICYmIChcbiAgICAgICAgICA8U3Bpbm5lclxuICAgICAgICAgICAgbWFyZ2luTGVmdD17LU1hdGgucm91bmQoaGVpZ2h0IC8gOCl9XG4gICAgICAgICAgICBtYXJnaW5SaWdodD17TWF0aC5yb3VuZChoZWlnaHQgLyA0KX1cbiAgICAgICAgICAgIHNpemU9e01hdGgucm91bmQoaGVpZ2h0IC8gMil9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPEJ1dHRvbkljb24gaWNvbj17aWNvbkJlZm9yZX0gc2l6ZT17aWNvblNpemV9IHNwYWNpbmc9e3Jlc3RQcm9wcy5wYWRkaW5nTGVmdH0gZWRnZT1cInN0YXJ0XCIgLz5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8QnV0dG9uSWNvbiBpY29uPXtpY29uQWZ0ZXJ9IHNpemU9e2ljb25TaXplfSBzcGFjaW5nPXtyZXN0UHJvcHMucGFkZGluZ1JpZ2h0fSBlZGdlPVwiZW5kXCIgLz5cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfSlcbilcblxuQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbXBvc2VzIHRoZSBkaW1lbnNpb25zIHNwZWMgZnJvbSB0aGUgQm94IHByaW1pdGl2ZS5cbiAgICovXG4gIC4uLmRpbWVuc2lvbnMucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBDb21wb3NlcyB0aGUgc3BhY2luZyBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5zcGFjaW5nLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIHBvc2l0aW9uIHNwZWMgZnJvbSB0aGUgQm94IHByaW1pdGl2ZS5cbiAgICovXG4gIC4uLnBvc2l0aW9uLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogQ29tcG9zZXMgdGhlIGxheW91dCBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAqL1xuICAuLi5sYXlvdXQucHJvcFR5cGVzLFxuXG4gIC8qKlxuICAgKiBUaGUgYXBwZWFyYW5jZSBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgYXBwZWFyYW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdtaW5pbWFsJywgJ3ByaW1hcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBidXR0b25cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSxcblxuICAvKipcbiAgICogV2hlbiB0cnVlLCBzaG93IGEgbG9hZGluZyBzcGlubmVyIGJlZm9yZSB0aGUgY2hpbGRyZW4uXG4gICAqIFRoaXMgYWxzbyBkaXNhYmxlcyB0aGUgYnV0dG9uLlxuICAgKi9cbiAgaXNMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRm9yY2VmdWxseSBzZXQgdGhlIGFjdGl2ZSBzdGF0ZSBvZiBhIGJ1dHRvbi5cbiAgICogVXNlZnVsIGluIGNvbmp1bmN0aW9uIHdpdGggYSBQb3BvdmVyLlxuICAgKi9cbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGljb24gYmVmb3JlIHRoZSB0ZXh0LiBDYW4gYmUgYW55IGljb24gZnJvbSBFdmVyZ3JlZW4gb3IgYSBjdXN0b20gZWxlbWVudC5cbiAgICovXG4gIGljb25CZWZvcmU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5lbGVtZW50VHlwZSwgUHJvcFR5cGVzLmVsZW1lbnRdKSxcblxuICAvKipcbiAgICogU2V0cyBhbiBpY29uIGFmdGVyIHRoZSB0ZXh0LiBDYW4gYmUgYW55IGljb24gZnJvbSBFdmVyZ3JlZW4gb3IgYSBjdXN0b20gZWxlbWVudC5cbiAgICovXG4gIGljb25BZnRlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZWxlbWVudF0pLFxuXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqIGlzTG9hZGluZyBhbHNvIHNldHMgdGhlIGJ1dHRvbiB0byBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2xhc3MgbmFtZSBwYXNzZWQgdG8gdGhlIGJ1dHRvbi5cbiAgICogT25seSB1c2UgaWYgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvblxuIl19