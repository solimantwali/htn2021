"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireDefault(require("ui-box"));

var _hooks = require("../../hooks");

var _excluded = ["delay", "size"],
    _excluded2 = ["height", "width"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var loadingKeyframes = _glamor.css.keyframes('loading', {
  '0%': {
    transform: 'rotate(0)'
  },
  '100%': {
    transform: 'rotate(360deg)'
  }
});

var loadingCircleKeyframes = _glamor.css.keyframes('loading-circle', {
  '0%': {
    strokeDashoffset: 600
  },
  '100%': {
    strokeDashoffset: 0
  }
});

var outerClass = (0, _glamor.css)({
  animation: "".concat(loadingKeyframes, " 2s linear infinite")
}).toString();

var innerClass = function innerClass(color) {
  return (0, _glamor.css)({
    strokeDashoffset: 600,
    strokeDasharray: 300,
    strokeWidth: 12,
    strokeMiterlimit: 10,
    strokeLinecap: 'round',
    animation: "".concat(loadingCircleKeyframes, " 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite"),
    stroke: color,
    fill: 'transparent'
  }).toString();
};

var emptyObject = {};
var Spinner = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Spinner(_ref, ref) {
  var _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 0 : _ref$delay,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'medium' : _ref$size,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);

  var _useState = (0, _react.useState)(delay === 0),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];

  var boxProps = (0, _hooks.useStyleConfig)('Spinner', {
    size: size
  }, emptyObject, emptyObject);

  var _ref2 = typeof size === 'string' ? boxProps : {
    width: size,
    height: size
  },
      height = _ref2.height,
      width = _ref2.width,
      rest = (0, _objectWithoutProperties2["default"])(_ref2, _excluded2);

  (0, _react.useEffect)(function () {
    var delayTimer = null;

    if (delay > 0) {
      delayTimer = setTimeout(function () {
        setIsVisible(true);
      }, delay);
    }

    return function () {
      clearTimeout(delayTimer);
    };
  }, [delay]);

  if (!isVisible) {
    return null;
  }

  return /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    width: width,
    height: height,
    lineHeight: 0
  }, props, rest, {
    ref: ref
  }), /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
    is: "svg",
    className: outerClass,
    x: "0px",
    y: "0px",
    viewBox: "0 0 150 150"
  }, /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
    is: "circle",
    className: innerClass(boxProps.color),
    cx: "75",
    cy: "75",
    r: "60"
  })));
}));
Spinner.propTypes = _objectSpread(_objectSpread({}, _uiBox["default"].propTypes), {}, {
  /**
   * Delay after which spinner should be visible.
   */
  delay: _propTypes["default"].number,

  /**
   * The size of the spinner.
   */
  size: _propTypes["default"].number
});
var _default = Spinner;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcGlubmVyL3NyYy9TcGlubmVyLmpzIl0sIm5hbWVzIjpbImxvYWRpbmdLZXlmcmFtZXMiLCJjc3MiLCJrZXlmcmFtZXMiLCJ0cmFuc2Zvcm0iLCJsb2FkaW5nQ2lyY2xlS2V5ZnJhbWVzIiwic3Ryb2tlRGFzaG9mZnNldCIsIm91dGVyQ2xhc3MiLCJhbmltYXRpb24iLCJ0b1N0cmluZyIsImlubmVyQ2xhc3MiLCJjb2xvciIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2UiLCJmaWxsIiwiZW1wdHlPYmplY3QiLCJTcGlubmVyIiwicmVmIiwiZGVsYXkiLCJzaXplIiwicHJvcHMiLCJpc1Zpc2libGUiLCJzZXRJc1Zpc2libGUiLCJib3hQcm9wcyIsIndpZHRoIiwiaGVpZ2h0IiwicmVzdCIsImRlbGF5VGltZXIiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicHJvcFR5cGVzIiwiQm94IiwiUHJvcFR5cGVzIiwibnVtYmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxnQkFBZ0IsR0FBR0MsWUFBSUMsU0FBSixDQUFjLFNBQWQsRUFBeUI7QUFDaEQsUUFBTTtBQUNKQyxJQUFBQSxTQUFTLEVBQUU7QUFEUCxHQUQwQztBQUloRCxVQUFRO0FBQ05BLElBQUFBLFNBQVMsRUFBRTtBQURMO0FBSndDLENBQXpCLENBQXpCOztBQVNBLElBQU1DLHNCQUFzQixHQUFHSCxZQUFJQyxTQUFKLENBQWMsZ0JBQWQsRUFBZ0M7QUFDN0QsUUFBTTtBQUNKRyxJQUFBQSxnQkFBZ0IsRUFBRTtBQURkLEdBRHVEO0FBSTdELFVBQVE7QUFDTkEsSUFBQUEsZ0JBQWdCLEVBQUU7QUFEWjtBQUpxRCxDQUFoQyxDQUEvQjs7QUFTQSxJQUFNQyxVQUFVLEdB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RixDQURGO0FBT0QsQ0EvQkQsQ0FEYyxDQUFoQjtBQW1DQVEsT0FBTyxDQUFDYyxTQUFSLG1DQUlLQyxrQkFBSUQsU0FKVDtBQU1FO0FBQ0Y7QUFDQTtBQUNFWixFQUFBQSxLQUFLLEVBQUVjLHNCQUFVQyxNQVRuQjs7QUFXRTtBQUNGO0FBQ0E7QUFDRWQsRUFBQUEsSUFBSSxFQUFFYSxzQkFBVUM7QUFkbEI7ZUFpQmVqQixPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIGZvcndhcmRSZWYsIG1lbW8gfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcidcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3ggZnJvbSAndWktYm94J1xuaW1wb3J0IHsgdXNlU3R5bGVDb25maWcgfSBmcm9tICcuLi8uLi9ob29rcydcblxuY29uc3QgbG9hZGluZ0tleWZyYW1lcyA9IGNzcy5rZXlmcmFtZXMoJ2xvYWRpbmcnLCB7XG4gICcwJSc6IHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMCknXG4gIH0sXG4gICcxMDAlJzoge1xuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgzNjBkZWcpJ1xuICB9XG59KVxuXG5jb25zdCBsb2FkaW5nQ2lyY2xlS2V5ZnJhbWVzID0gY3NzLmtleWZyYW1lcygnbG9hZGluZy1jaXJjbGUnLCB7XG4gICcwJSc6IHtcbiAgICBzdHJva2VEYXNob2Zmc2V0OiA2MDBcbiAgfSxcbiAgJzEwMCUnOiB7XG4gICAgc3Ryb2tlRGFzaG9mZnNldDogMFxuICB9XG59KVxuXG5jb25zdCBvdXRlckNsYXNzID0gY3NzKHtcbiAgYW5pbWF0aW9uOiBgJHtsb2FkaW5nS2V5ZnJhbWVzfSAycyBsaW5lYXIgaW5maW5pdGVgXG59KS50b1N0cmluZygpXG5cbmNvbnN0IGlubmVyQ2xhc3MgPSBjb2xvciA9PlxuICBjc3Moe1xuICAgIHN0cm9rZURhc2hvZmZzZXQ6IDYwMCxcbiAgICBzdHJva2VEYXNoYXJyYXk6IDMwMCxcbiAgICBzdHJva2VXaWR0aDogMTIsXG4gICAgc3Ryb2tlTWl0ZXJsaW1pdDogMTAsXG4gICAgc3Ryb2tlTGluZWNhcDogJ3JvdW5kJyxcbiAgICBhbmltYXRpb246IGAke2xvYWRpbmdDaXJjbGVLZXlmcmFtZXN9IDEuNnMgY3ViaWMtYmV6aWVyKDAuNCwgMC4xNSwgMC42LCAwLjg1KSBpbmZpbml0ZWAsXG4gICAgc3Ryb2tlOiBjb2xvcixcbiAgICBmaWxsOiAndHJhbnNwYXJlbnQnXG4gIH0pLnRvU3RyaW5nKClcblxuY29uc3QgZW1wdHlPYmplY3QgPSB7fVxuXG5jb25zdCBTcGlubmVyID0gbWVtbyhcbiAgZm9yd2FyZFJlZihmdW5jdGlvbiBTcGlubmVyKHsgZGVsYXkgPSAwLCBzaXplID0gJ21lZGl1bScsIC4uLnByb3BzIH0sIHJlZikge1xuICAgIGNvbnN0IFtpc1Zpc2libGUsIHNldElzVmlzaWJsZV0gPSB1c2VTdGF0ZShkZWxheSA9PT0gMClcblxuICAgIGNvbnN0IGJveFByb3BzID0gdXNlU3R5bGVDb25maWcoJ1NwaW5uZXInLCB7IHNpemUgfSwgZW1wdHlPYmplY3QsIGVtcHR5T2JqZWN0KVxuXG4gICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoLCAuLi5yZXN0IH0gPSB0eXBlb2Ygc2l6ZSA9PT0gJ3N0cmluZycgPyBib3hQcm9wcyA6IHsgd2lkdGg6IHNpemUsIGhlaWdodDogc2l6ZSB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGRlbGF5VGltZXIgPSBudWxsXG4gICAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICAgIGRlbGF5VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBzZXRJc1Zpc2libGUodHJ1ZSlcbiAgICAgICAgfSwgZGVsYXkpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXIpXG4gICAgICB9XG4gICAgfSwgW2RlbGF5XSlcblxuICAgIGlmICghaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8Qm94IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IGxpbmVIZWlnaHQ9ezB9IHsuLi5wcm9wc30gey4uLnJlc3R9IHJlZj17cmVmfT5cbiAgICAgICAgPEJveCBpcz1cInN2Z1wiIGNsYXNzTmFtZT17b3V0ZXJDbGFzc30geD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDE1MCAxNTBcIj5cbiAgICAgICAgICA8Qm94IGlzPVwiY2lyY2xlXCIgY2xhc3NOYW1lPXtpbm5lckNsYXNzKGJveFByb3BzLmNvbG9yKX0gY3g9XCI3NVwiIGN5PVwiNzVcIiByPVwiNjBcIiAvPlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfSlcbilcblxuU3Bpbm5lci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDb21wb3NlcyB0aGUgQm94IGNvbXBvbmVudCBhcyB0aGUgYmFzZS5cbiAgICovXG4gIC4uLkJveC5wcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIERlbGF5IGFmdGVyIHdoaWNoIHNwaW5uZXIgc2hvdWxkIGJlIHZpc2libGUuXG4gICAqL1xuICBkZWxheTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHNwaW5uZXIuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwaW5uZXJcbiJdfQ==