"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _colors = _interopRequireDefault(require("./colors"));

var _palette = _interopRequireDefault(require("./palette"));

/**
 * Fills are used in Avatars and Badges.
 */
var fills = {};
fills.solid = {
  neutral: {
    color: 'white',
    backgroundColor: _palette["default"].neutral.base
  },
  blue: {
    color: 'white',
    backgroundColor: _palette["default"].blue.base
  },
  red: {
    color: 'white',
    backgroundColor: _palette["default"].red.base
  },
  orange: {
    color: 'white',
    backgroundColor: _palette["default"].orange.base
  },
  yellow: {
    color: _palette["default"].yellow.dark,
    backgroundColor: _palette["default"].yellow.base
  },
  green: {
    color: 'white',
    backgroundColor: _palette["default"].green.base
  },
  teal: {
    color: 'white',
    backgroundColor: _palette["default"].teal.base
  },
  purple: {
    color: 'white',
    backgroundColor: _palette["default"].purple.base
  }
};
fills.subtle = {
  neutral: {
    color: _colors["default"].text["default"],
    backgroundColor: _palette["default"].neutral.light
  },
  blue: {
    color: _palette["default"].blue.dark,
    backgroundColor: _palette["default"].blue.light
  },
  red: {
    color: _palette["default"].red.dark,
    backgroundColor: _palette["default"].red.light
  },
  orange: {
    color: _palette["default"].orange.dark,
    backgroundColor: _palette["default"].orange.light
  },
  yellow: {
    color: _palette["default"].yellow.dark,
    backgroundColor: _palette["default"].yellow.light
  },
  green: {
    color: _palette["default"].green.dark,
    backgroundColor: _palette["default"].green.light
  },
  teal: {
    color: _palette["default"].teal.dark,
    backgroundColor: _palette["default"].teal.light
  },
  purple: {
    color: _palette["default"].purple.dark,
    backgroundColor: _palette["default"].purple.light
  }
};
fills.options = Object.keys(fills.solid);
var _default = fills;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvZGVwcmVjYXRlZC9mb3VuZGF0aW9uYWwtc3R5bGVzL2ZpbGxzLmpzIl0sIm5hbWVzIjpbImZpbGxzIiwic29saWQiLCJuZXV0cmFsIiwiY29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwYWxldHRlIiwiYmFzZSIsImJsdWUiLCJyZWQiLCJvcmFuZ2UiLCJ5ZWxsb3ciLCJkYXJrIiwiZ3JlZW4iLCJ0ZWFsIiwicHVycGxlIiwic3VidGxlIiwiY29sb3JzIiwidGV4dCIsImxpZ2h0Iiwib3B0aW9ucyIsIk9iamVjdCIsImtleXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLEtBQUssR0FBRyxFQUFkO0FBRUFBLEtBQUssQ0FBQ0MsS0FBTixHQUFjO0FBQ1pDLEVBQUFBLE9BQU8sRUFBRTtBQUNQQyxJQUFBQSxLQUFLLEVBQUUsT0FEQTtBQUVQQyxJQUFBQSxlQUFlLEVBQUVDLG9CQUFRSCxPQUFSLENBQWdCSTtBQUYxQixHQURHO0FBS1pDLEVBQUFBLElBQUksRUFBRTtBQUNKSixJQUFBQSxLQUFLLEVBQUUsT0FESDtBQUVKQyxJQUFBQSxlQUFlLEVBQUVDLG9CQUFRRSxJQUFSLENBQWFEO0FBRjFCLEdBTE07QUFTWkUsRUFBQUEsR0FBRyxFQUFFO0FBQ0hMLElBQUFBLEtBQUssRUFBRSxPQURKO0FBRUhDLElBQUFBLGVBQWUsRUFBRUMsb0JBQVFHLEdBQVIsQ0FBWUY7QUFGMUIsR0FUTztBQWFaRyxFQUFBQSxNQUFNLEVBQUU7QUFDTk4sSUFBQUEsS0FBSyxFQUFFLE9BREQ7QUFFTkMsSUFBQUEsZUFBZSxFQUFFQyxvQkFBUUksTUFBUixDQUFlSDtBQUYxQixHQWJJO0FBaUJaSSxFQUFBQSxNQUFNLEVBQUU7QUFDTlAsSUFBQUEsS0FBSyxFQUFFRSxvQkFBUUssTUFBUixDQUFlQyxJQURoQjtBQUVOUCxJQUFBQSxlQUFlLEVBQUVDLG9CQUFRSyxNQUFSLENBQWVKO0FBRjFCLEdBakJJO0FBcUJaTSxFQUFBQSxLQUFLLEVBQUU7QUFDTFQsSUFBQUEsS0FBSyxFQUFFLE9BREY7QUFFTEMsSUFBQUEsZUFBZSxFQUFFQyxvQkFBUU8sS0FBUixDQUFjTjtBQUYxQixHQXJCSztBQXlCWk8sRUFBQUEsSUFBSSxFQUFFO0FBQ0pWLElBQUFBLEtBQUssRUFBRSxPQURIO0FBRUpDLElBQUFBLGVBQWUsRUFBRUMsb0JBQVFRLElBQVIsQ0FBYVA7QUFGMUIsR0F6Qk07QUE2QlpRLEVBQUFBLE1BQU0sRUFBRTtBQUNOWCxJQUFBQSxLQUFLLEVBQUUsT0FERDtBQUVOQyxJQUFBQSxlQUFlLEVBQUVDLG9CQUFRUyxNQUFSLENBQWVSO0FBRjFCO0FBN0JJLENBQWQ7QUFtQ0FOLEtBQUssQ0FBQ2UsTUFBTixHQUFlO0FBQ2JiLEVBQUFBLE9BQU8sRUFBRTtBQUNQQyxJQUFBQSxLQUFLLEVBQUVhLG1CQUFPQyxJQUFQLFdBREE7QUFFUGIsSUFBQUEsZUFBZSxFQUFFQyxvQkFBUUgsT0FBUixDQUFnQmdCO0FBRjFCLEdBREk7QUFLYlgsRUFBQUEsSUFBSSxFQUFFO0FBQ0pKLElBQUFBLEtBQUssRUFBRUUsb0JBQVFFLElBQVIsQ0FBYUksSUFEaEI7QUFFSlAsSUFBQUEsZUFBZSxFQUFFQyxvQkFBUUUsSUFBUixDQUFhVztBQUYxQixHQUxPO0FBU2JWLEVBQUFBLEdBQUcsRUFBRTtBQUNITCxJQUFBQSxLQUFLLEVBQUVFLG9CQUFRRyxHQUFSLENBQVlHLElBRGhCO0FBRUhQLElBQUFBLGVBQWUsRUFBRUMsb0JBQVFHLEdBQVIsQ0FBWVU7QUFGMUIsR0FUUTtBQWFiVCxFQUFBQSxNQUFNLEVBQUU7QUFDTk4sSUFBQUEsS0FBSyxFQUFFRSxvQkFBUUksTUFBUixDQUFlRSxJQURoQjtBQUVOUCxJQUFBQSxlQUFlLEVBQUVDLG9CQUFRSSxNQUFSLENBQWVTO0FBRjFCLEdBYks7QUFpQmJSLEVBQUFBLE1BQU0sRUFBRTtBQUNOUCxJQUFBQSxLQUFLLEVBQUVFLG9CQUFRSyxNQUFSLENBQWVDLElBRGhCO0FBRU5QLElBQUFBLGVBQWUsRUFBRUMsb0JBQVFLLE1BQVIsQ0FBZVE7QUFGMUIsR0FqQks7QUFxQmJOLEVBQUFBLEtBQUssRUFBRTtBQUNMVCxJQUFBQSxLQUFLLEVBQUVFLG9CQUFRTyxLQUFSLENBQWNELElBRGhCO0FBRUxQLElBQUFBLGVBQWUsRUFBRUMsb0JBQVFPLEtBQVIsQ0FBY007QUFGMUIsR0FyQk07QUF5QmJMLEVBQUFBLElBQUksRUFBRTtBQUNKVixJQUFBQSxLQUFLLEVBQUVFLG9CQUFRUSxJQUFSLENBQWFGLElBRGhCO0FBRUpQLElBQUFBLGVBQWUsRUFBRUMsb0JBQVFRLElBQVIsQ0FBYUs7QUFGMUIsR0F6Qk87QUE2QmJKLEVBQUFBLE1BQU0sRUFBRTtBQUNOWCxJQUFBQSxLQUFLLEVBQUVFLG9CQUFRUyxNQUFSLENBQWVILElBRGhCO0FBRU5QLElBQUFBLGVBQWUsRUFBRUMsb0JBQVFTLE1BQVIsQ0FBZUk7QUFGMUI7QUE3QkssQ0FBZjtBQW1DQWxCLEtBQUssQ0FBQ21CLE9BQU4sR0FBZ0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZckIsS0FBSyxDQUFDQyxLQUFsQixDQUFoQjtlQUVlRCxLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSdcblxuLyoqXG4gKiBGaWxscyBhcmUgdXNlZCBpbiBBdmF0YXJzIGFuZCBCYWRnZXMuXG4gKi9cbmNvbnN0IGZpbGxzID0ge31cblxuZmlsbHMuc29saWQgPSB7XG4gIG5ldXRyYWw6IHtcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUubmV1dHJhbC5iYXNlXG4gIH0sXG4gIGJsdWU6IHtcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuYmx1ZS5iYXNlXG4gIH0sXG4gIHJlZDoge1xuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5yZWQuYmFzZVxuICB9LFxuICBvcmFuZ2U6IHtcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUub3JhbmdlLmJhc2VcbiAgfSxcbiAgeWVsbG93OiB7XG4gICAgY29sb3I6IHBhbGV0dGUueWVsbG93LmRhcmssXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLnllbGxvdy5iYXNlXG4gIH0sXG4gIGdyZWVuOiB7XG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmdyZWVuLmJhc2VcbiAgfSxcbiAgdGVhbDoge1xuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS50ZWFsLmJhc2VcbiAgfSxcbiAgcHVycGxlOiB7XG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLnB1cnBsZS5iYXNlXG4gIH1cbn1cblxuZmlsbHMuc3VidGxlID0ge1xuICBuZXV0cmFsOiB7XG4gICAgY29sb3I6IGNvbG9ycy50ZXh0LmRlZmF1bHQsXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLm5ldXRyYWwubGlnaHRcbiAgfSxcbiAgYmx1ZToge1xuICAgIGNvbG9yOiBwYWxldHRlLmJsdWUuZGFyayxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuYmx1ZS5saWdodFxuICB9LFxuICByZWQ6IHtcbiAgICBjb2xvcjogcGFsZXR0ZS5yZWQuZGFyayxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUucmVkLmxpZ2h0XG4gIH0sXG4gIG9yYW5nZToge1xuICAgIGNvbG9yOiBwYWxldHRlLm9yYW5nZS5kYXJrLFxuICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5vcmFuZ2UubGlnaHRcbiAgfSxcbiAgeWVsbG93OiB7XG4gICAgY29sb3I6IHBhbGV0dGUueWVsbG93LmRhcmssXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLnllbGxvdy5saWdodFxuICB9LFxuICBncmVlbjoge1xuICAgIGNvbG9yOiBwYWxldHRlLmdyZWVuLmRhcmssXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmdyZWVuLmxpZ2h0XG4gIH0sXG4gIHRlYWw6IHtcbiAgICBjb2xvcjogcGFsZXR0ZS50ZWFsLmRhcmssXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLnRlYWwubGlnaHRcbiAgfSxcbiAgcHVycGxlOiB7XG4gICAgY29sb3I6IHBhbGV0dGUucHVycGxlLmRhcmssXG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLnB1cnBsZS5saWdodFxuICB9XG59XG5cbmZpbGxzLm9wdGlvbnMgPSBPYmplY3Qua2V5cyhmaWxscy5zb2xpZClcblxuZXhwb3J0IGRlZmF1bHQgZmlsbHNcbiJdfQ==