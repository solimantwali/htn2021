"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var colorMap = {
  none: {
    base: 'white',
    hover: 'colors.neutral.lightest',
    focus: 'colors.neutral.lightest',
    active: 'colors.blue.lightest',
    current: 'colors.blue.lightest'
  },
  danger: {
    base: 'colors.red.lightest',
    hover: 'colors.red.lightest',
    focus: 'colors.red.light',
    active: 'colors.red.light',
    current: 'colors.red.light'
  },
  warning: {
    base: 'colors.yellow.lightest',
    hover: 'colors.yellow.lightest',
    focus: 'colors.yellow.light',
    active: 'colors.yellow.light',
    current: 'colors.yellow.light'
  },
  success: {
    base: 'colors.green.lightest',
    hover: 'colors.green.lightest',
    focus: 'colors.green.light',
    active: 'colors.green.light',
    current: 'colors.green.light'
  }
};

var getBackgroundForIntentAndState = function getBackgroundForIntentAndState(intent, state) {
  return colorMap[intent][state];
};

var baseStyle = {
  outline: 'none',
  textDecoration: 'none',
  height: 48,
  _isSelectable: {
    cursor: 'pointer'
  }
};
var appearances = {
  "default": {
    backgroundColor: function backgroundColor(_, props) {
      return getBackgroundForIntentAndState(props.intent, 'base');
    },
    _hover: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'hover');
      }
    },
    _focus: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'focus');
      }
    },
    _active: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'active');
      }
    },
    _current: {
      backgroundColor: function backgroundColor(_, props) {
        return getBackgroundForIntentAndState(props.intent, 'current');
      }
    }
  }
};
var _default = {
  baseStyle: baseStyle,
  appearances: appearances
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvY2xhc3NpYy9jb21wb25lbnRzL3RhYmxlLXJvdy5qcyJdLCJuYW1lcyI6WyJjb2xvck1hcCIsIm5vbmUiLCJiYXNlIiwiaG92ZXIiLCJmb2N1cyIsImFjdGl2ZSIsImN1cnJlbnQiLCJkYW5nZXIiLCJ3YXJuaW5nIiwic3VjY2VzcyIsImdldEJhY2tncm91bmRGb3JJbnRlbnRBbmRTdGF0ZSIsImludGVudCIsInN0YXRlIiwiYmFzZVN0eWxlIiwib3V0bGluZSIsInRleHREZWNvcmF0aW9uIiwiaGVpZ2h0IiwiX2lzU2VsZWN0YWJsZSIsImN1cnNvciIsImFwcGVhcmFuY2VzIiwiYmFja2dyb3VuZENvbG9yIiwiXyIsInByb3BzIiwiX2hvdmVyIiwiX2ZvY3VzIiwiX2FjdGl2ZSIsIl9jdXJyZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxRQUFRLEdBQUc7QUFDZkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLElBQUksRUFBRSxPQURGO0FBRUpDLElBQUFBLEtBQUssRUFBRSx5QkFGSDtBQUdKQyxJQUFBQSxLQUFLLEVBQUUseUJBSEg7QUFJSkMsSUFBQUEsTUFBTSxFQUFFLHNCQUpKO0FBS0pDLElBQUFBLE9BQU8sRUFBRTtBQUxMLEdBRFM7QUFTZkMsRUFBQUEsTUFBTSxFQUFFO0FBQ05MLElBQUFBLElBQUksRUFBRSxxQkFEQTtBQUVOQyxJQUFBQSxLQUFLLEVBQUUscUJBRkQ7QUFHTkMsSUFBQUEsS0FBSyxFQUFFLGtCQUhEO0FBSU5DLElBQUFBLE1BQU0sRUFBRSxrQkFKRjtBQUtOQyxJQUFBQSxPQUFPLEVBQUU7QUFMSCxHQVRPO0FBaUJmRSxFQUFBQSxPQUFPLEVBQUU7QUFDUE4sSUFBQUEsSUFBSSxFQUFFLHdCQURDO0FBRVBDLElBQUFBLEtBQUssRUFBRSx3QkFGQTtBQUdQQyxJQUFBQSxLQUFLLEVBQUUscUJBSEE7QUFJUEMsSUFBQUEsTUFBTSxFQUFFLHFCQUpEO0FBS1BDLElBQUFBLE9BQU8sRUFBRTtBQUxGLEdBakJNO0FBeUJmRyxFQUFBQSxPQUFPLEVBQUU7QUFDUFAsSUFBQUEsSUFBSSxFQUFFLHVCQURDO0FBRVBDLElBQUFBLEtBQUssRUFBRSx1QkFGQTtBQUdQQyxJQUFBQSxLQUFLLEVBQUUsb0JBSEE7QUFJUEMsSUFBQUEsTUFBTSxFQUFFLG9CQUpEO0FBS1BDLElBQUFBLE9BQU8sRUFBRTtBQUxGO0FBekJNLENBQWpCOztBQWtDQSxJQUFNSSw4QkFBOEIsR0FBRyxTQUFqQ0EsOEJBQWlDLENBQUNDLE1BQUQsRUFBU0MsS0FBVDtBQUFBLFNBQW1CWixRQUFRLENBQUNXLE1BQUQsQ0FBUixDQUFpQkMsS0FBakIsQ0FBbkI7QUFBQSxDQUF2Qzs7QUFFQSxJQUFNQyxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLE9BQU8sRUFBRSxNQURPO0FBRWhCQyxFQUFBQSxjQUFjLEVBQUUsTUFGQTtBQUdoQkMsRUFBQUEsTUFBTSxFQUFFLEVBSFE7QUFLaEJDLEVBQUFBLGFBQWEsRUFBRTtBQUNiQyxJQUFBQSxNQUFNLEVBQUU7QUFESztBQUxDLENBQWxCO0FBVUEsSUFBTUMsV0FBVyxHQUFHO0FBQ2xCLGFBQVM7QUFDUEMsSUFBQUEsZUFBZSxFQUFFLHlCQUFDQyxDQUFELEVBQUlDLEtBQUo7QUFBQSxhQUFjWiw4QkFBOEIsQ0FBQ1ksS0FBSyxDQUFDWCxNQUFQLEVBQWUsTUFBZixDQUE1QztBQUFBLEtBRFY7QUFHUFksSUFBQUEsTUFBTSxFQUFFO0FBQ05ILE1BQUFBLGVBQWUsRUFBRSx5QkFBQ0MsQ0FBRCxFQUFJQyxLQUFKO0FBQUEsZUFBY1osOEJBQThCLENBQUNZLEtBQUssQ0FBQ1gsTUFBUCxFQUFlLE9BQWYsQ0FBNUM7QUFBQTtBQURYLEtBSEQ7QUFPUGEsSUFBQUEsTUFBTSxFQUFFO0FBQ05KLE1BQUFBLGVBQWUsRUFBRSx5QkFBQ0MsQ0FBRCxFQUFJQyxLQUFKO0FBQUEsZUFBY1osOEJBQThCLENBQUNZLEtBQUssQ0FBQ1gsTUFBUCxFQUFlLE9BQWYsQ0FBNUM7QUFBQTtBQURYLEtBUEQ7QUFXUGMsSUFBQUEsT0FBTyxFQUFFO0FBQ1BMLE1BQUFBLGVBQWUsRUFBRSx5QkFBQ0MsQ0FBRCxFQUFJQyxLQUFKO0FBQUEsZUFBY1osOEJBQThCLENBQUNZLEtBQUssQ0FBQ1gsTUFBUCxFQUFlLFFBQWYsQ0FBNUM7QUFBQTtBQURWLEtBWEY7QUFlUGUsSUFBQUEsUUFBUSxFQUFFO0FBQ1JOLE1BQUFBLGVBQWUsRUFBRSx5QkFBQ0MsQ0FBRCxFQUFJQyxLQUFKO0FBQUEsZUFBY1osOEJBQThCLENBQUNZLEtBQUssQ0FBQ1gsTUFBUCxFQUFlLFNBQWYsQ0FBNUM7QUFBQTtBQURUO0FBZkg7QUFEUyxDQUFwQjtlQXNCZTtBQUNiRSxFQUFBQSxTQUFTLEVBQVRBLFNBRGE7QUFFYk0sRUFBQUEsV0FBVyxFQUFYQTtBQUZhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb2xvck1hcCA9IHtcbiAgbm9uZToge1xuICAgIGJhc2U6ICd3aGl0ZScsXG4gICAgaG92ZXI6ICdjb2xvcnMubmV1dHJhbC5saWdodGVzdCcsXG4gICAgZm9jdXM6ICdjb2xvcnMubmV1dHJhbC5saWdodGVzdCcsXG4gICAgYWN0aXZlOiAnY29sb3JzLmJsdWUubGlnaHRlc3QnLFxuICAgIGN1cnJlbnQ6ICdjb2xvcnMuYmx1ZS5saWdodGVzdCdcbiAgfSxcblxuICBkYW5nZXI6IHtcbiAgICBiYXNlOiAnY29sb3JzLnJlZC5saWdodGVzdCcsXG4gICAgaG92ZXI6ICdjb2xvcnMucmVkLmxpZ2h0ZXN0JyxcbiAgICBmb2N1czogJ2NvbG9ycy5yZWQubGlnaHQnLFxuICAgIGFjdGl2ZTogJ2NvbG9ycy5yZWQubGlnaHQnLFxuICAgIGN1cnJlbnQ6ICdjb2xvcnMucmVkLmxpZ2h0J1xuICB9LFxuXG4gIHdhcm5pbmc6IHtcbiAgICBiYXNlOiAnY29sb3JzLnllbGxvdy5saWdodGVzdCcsXG4gICAgaG92ZXI6ICdjb2xvcnMueWVsbG93LmxpZ2h0ZXN0JyxcbiAgICBmb2N1czogJ2NvbG9ycy55ZWxsb3cubGlnaHQnLFxuICAgIGFjdGl2ZTogJ2NvbG9ycy55ZWxsb3cubGlnaHQnLFxuICAgIGN1cnJlbnQ6ICdjb2xvcnMueWVsbG93LmxpZ2h0J1xuICB9LFxuXG4gIHN1Y2Nlc3M6IHtcbiAgICBiYXNlOiAnY29sb3JzLmdyZWVuLmxpZ2h0ZXN0JyxcbiAgICBob3ZlcjogJ2NvbG9ycy5ncmVlbi5saWdodGVzdCcsXG4gICAgZm9jdXM6ICdjb2xvcnMuZ3JlZW4ubGlnaHQnLFxuICAgIGFjdGl2ZTogJ2NvbG9ycy5ncmVlbi5saWdodCcsXG4gICAgY3VycmVudDogJ2NvbG9ycy5ncmVlbi5saWdodCdcbiAgfVxufVxuXG5jb25zdCBnZXRCYWNrZ3JvdW5kRm9ySW50ZW50QW5kU3RhdGUgPSAoaW50ZW50LCBzdGF0ZSkgPT4gY29sb3JNYXBbaW50ZW50XVtzdGF0ZV1cblxuY29uc3QgYmFzZVN0eWxlID0ge1xuICBvdXRsaW5lOiAnbm9uZScsXG4gIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gIGhlaWdodDogNDgsXG5cbiAgX2lzU2VsZWN0YWJsZToge1xuICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gIH1cbn1cblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIGRlZmF1bHQ6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IChfLCBwcm9wcykgPT4gZ2V0QmFja2dyb3VuZEZvckludGVudEFuZFN0YXRlKHByb3BzLmludGVudCwgJ2Jhc2UnKSxcblxuICAgIF9ob3Zlcjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoXywgcHJvcHMpID0+IGdldEJhY2tncm91bmRGb3JJbnRlbnRBbmRTdGF0ZShwcm9wcy5pbnRlbnQsICdob3ZlcicpXG4gICAgfSxcblxuICAgIF9mb2N1czoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoXywgcHJvcHMpID0+IGdldEJhY2tncm91bmRGb3JJbnRlbnRBbmRTdGF0ZShwcm9wcy5pbnRlbnQsICdmb2N1cycpXG4gICAgfSxcblxuICAgIF9hY3RpdmU6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKF8sIHByb3BzKSA9PiBnZXRCYWNrZ3JvdW5kRm9ySW50ZW50QW5kU3RhdGUocHJvcHMuaW50ZW50LCAnYWN0aXZlJylcbiAgICB9LFxuXG4gICAgX2N1cnJlbnQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKF8sIHByb3BzKSA9PiBnZXRCYWNrZ3JvdW5kRm9ySW50ZW50QW5kU3RhdGUocHJvcHMuaW50ZW50LCAnY3VycmVudCcpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYmFzZVN0eWxlLFxuICBhcHBlYXJhbmNlc1xufVxuIl19