"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _colors = _interopRequireDefault(require("./colors"));

/**
 * Used for matching background colors and foreground colors
 */
var fills = {
  solid: {
    neutral: {
      color: 'white',
      backgroundColor: _colors["default"].neutral.base
    },
    blue: {
      color: 'white',
      backgroundColor: _colors["default"].blue.base
    },
    red: {
      color: 'white',
      backgroundColor: _colors["default"].red.base
    },
    orange: {
      color: 'white',
      backgroundColor: _colors["default"].orange.base
    },
    yellow: {
      color: _colors["default"].yellow.dark,
      backgroundColor: _colors["default"].yellow.base
    },
    green: {
      color: 'white',
      backgroundColor: _colors["default"].green.base
    },
    teal: {
      color: 'white',
      backgroundColor: _colors["default"].teal.base
    },
    purple: {
      color: 'white',
      backgroundColor: _colors["default"].purple.base
    }
  },
  subtle: {
    neutral: {
      color: _colors["default"].neutral.dark,
      backgroundColor: _colors["default"].neutral.light
    },
    blue: {
      color: _colors["default"].blue.dark,
      backgroundColor: _colors["default"].blue.light
    },
    red: {
      color: _colors["default"].red.dark,
      backgroundColor: _colors["default"].red.light
    },
    orange: {
      color: _colors["default"].orange.dark,
      backgroundColor: _colors["default"].orange.light
    },
    yellow: {
      color: _colors["default"].yellow.dark,
      backgroundColor: _colors["default"].yellow.light
    },
    green: {
      color: _colors["default"].green.dark,
      backgroundColor: _colors["default"].green.light
    },
    teal: {
      color: _colors["default"].teal.dark,
      backgroundColor: _colors["default"].teal.light
    },
    purple: {
      color: _colors["default"].purple.dark,
      backgroundColor: _colors["default"].purple.light
    }
  }
};
var _default = fills;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvY2xhc3NpYy90b2tlbnMvZmlsbHMuanMiXSwibmFtZXMiOlsiZmlsbHMiLCJzb2xpZCIsIm5ldXRyYWwiLCJjb2xvciIsImJhY2tncm91bmRDb2xvciIsImNvbG9ycyIsImJhc2UiLCJibHVlIiwicmVkIiwib3JhbmdlIiwieWVsbG93IiwiZGFyayIsImdyZWVuIiwidGVhbCIsInB1cnBsZSIsInN1YnRsZSIsImxpZ2h0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxLQUFLLEdBQUc7QUFDWkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxLQUFLLEVBQUUsT0FEQTtBQUVQQyxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPSCxPQUFQLENBQWVJO0FBRnpCLEtBREo7QUFLTEMsSUFBQUEsSUFBSSxFQUFFO0FBQ0pKLE1BQUFBLEtBQUssRUFBRSxPQURIO0FBRUpDLE1BQUFBLGVBQWUsRUFBRUMsbUJBQU9FLElBQVAsQ0FBWUQ7QUFGekIsS0FMRDtBQVNMRSxJQUFBQSxHQUFHLEVBQUU7QUFDSEwsTUFBQUEsS0FBSyxFQUFFLE9BREo7QUFFSEMsTUFBQUEsZUFBZSxFQUFFQyxtQkFBT0csR0FBUCxDQUFXRjtBQUZ6QixLQVRBO0FBYUxHLElBQUFBLE1BQU0sRUFBRTtBQUNOTixNQUFBQSxLQUFLLEVBQUUsT0FERDtBQUVOQyxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPSSxNQUFQLENBQWNIO0FBRnpCLEtBYkg7QUFpQkxJLElBQUFBLE1BQU0sRUFBRTtBQUNOUCxNQUFBQSxLQUFLLEVBQUVFLG1CQUFPSyxNQUFQLENBQWNDLElBRGY7QUFFTlAsTUFBQUEsZUFBZSxFQUFFQyxtQkFBT0ssTUFBUCxDQUFjSjtBQUZ6QixLQWpCSDtBQXFCTE0sSUFBQUEsS0FBSyxFQUFFO0FBQ0xULE1BQUFBLEtBQUssRUFBRSxPQURGO0FBRUxDLE1BQUFBLGVBQWUsRUFBRUMsbUJBQU9PLEtBQVAsQ0FBYU47QUFGekIsS0FyQkY7QUF5QkxPLElBQUFBLElBQUksRUFBRTtBQUNKVixNQUFBQSxLQUFLLEVBQUUsT0FESDtBQUVKQyxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPUSxJQUFQLENBQVlQO0FBRnpCLEtBekJEO0FBNkJMUSxJQUFBQSxNQUFNLEVBQUU7QUFDTlgsTUFBQUEsS0FBSyxFQUFFLE9BREQ7QUFFTkMsTUFBQUEsZUFBZSxFQUFFQyxtQkFBT1MsTUFBUCxDQUFjUjtBQUZ6QjtBQTdCSCxHQURLO0FBb0NaUyxFQUFBQSxNQUFNLEVBQUU7QUFDTmIsSUFBQUEsT0FBTyxFQUFFO0FBQ1BDLE1BQUFBLEtBQUssRUFBRUUsbUJBQU9ILE9BQVAsQ0FBZVMsSUFEZjtBQUVQUCxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPSCxPQUFQLENBQWVjO0FBRnpCLEtBREg7QUFLTlQsSUFBQUEsSUFBSSxFQUFFO0FBQ0pKLE1BQUFBLEtBQUssRUFBRUUsbUJBQU9FLElBQVAsQ0FBWUksSUFEZjtBQUVKUCxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPRSxJQUFQLENBQVlTO0FBRnpCLEtBTEE7QUFTTlIsSUFBQUEsR0FBRyxFQUFFO0FBQ0hMLE1BQUFBLEtBQUssRUFBRUUsbUJBQU9HLEdBQVAsQ0FBV0csSUFEZjtBQUVIUCxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPRyxHQUFQLENBQVdRO0FBRnpCLEtBVEM7QUFhTlAsSUFBQUEsTUFBTSxFQUFFO0FBQ05OLE1BQUFBLEtBQUssRUFBRUUsbUJBQU9JLE1BQVAsQ0FBY0UsSUFEZjtBQUVOUCxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPSSxNQUFQLENBQWNPO0FBRnpCLEtBYkY7QUFpQk5OLElBQUFBLE1BQU0sRUFBRTtBQUNOUCxNQUFBQSxLQUFLLEVBQUVFLG1CQUFPSyxNQUFQLENBQWNDLElBRGY7QUFFTlAsTUFBQUEsZUFBZSxFQUFFQyxtQkFBT0ssTUFBUCxDQUFjTTtBQUZ6QixLQWpCRjtBQXFCTkosSUFBQUEsS0FBSyxFQUFFO0FBQ0xULE1BQUFBLEtBQUssRUFBRUUsbUJBQU9PLEtBQVAsQ0FBYUQsSUFEZjtBQUVMUCxNQUFBQSxlQUFlLEVBQUVDLG1CQUFPTyxLQUFQLENBQWFJO0FBRnpCLEtBckJEO0FBeUJOSCxJQUFBQSxJQUFJLEVBQUU7QUFDSlYsTUFBQUEsS0FBSyxFQUFFRSxtQkFBT1EsSUFBUCxDQUFZRixJQURmO0FBRUpQLE1BQUFBLGVBQWUsRUFBRUMsbUJBQU9RLElBQVAsQ0FBWUc7QUFGekIsS0F6QkE7QUE2Qk5GLElBQUFBLE1BQU0sRUFBRTtBQUNOWCxNQUFBQSxLQUFLLEVBQUVFLG1CQUFPUyxNQUFQLENBQWNILElBRGY7QUFFTlAsTUFBQUEsZUFBZSxFQUFFQyxtQkFBT1MsTUFBUCxDQUFjRTtBQUZ6QjtBQTdCRjtBQXBDSSxDQUFkO2VBd0VlaEIsSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnXG5cbi8qKlxuICogVXNlZCBmb3IgbWF0Y2hpbmcgYmFja2dyb3VuZCBjb2xvcnMgYW5kIGZvcmVncm91bmQgY29sb3JzXG4gKi9cbmNvbnN0IGZpbGxzID0ge1xuICBzb2xpZDoge1xuICAgIG5ldXRyYWw6IHtcbiAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMubmV1dHJhbC5iYXNlXG4gICAgfSxcbiAgICBibHVlOiB7XG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLmJsdWUuYmFzZVxuICAgIH0sXG4gICAgcmVkOiB7XG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLnJlZC5iYXNlXG4gICAgfSxcbiAgICBvcmFuZ2U6IHtcbiAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMub3JhbmdlLmJhc2VcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgY29sb3I6IGNvbG9ycy55ZWxsb3cuZGFyayxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLnllbGxvdy5iYXNlXG4gICAgfSxcbiAgICBncmVlbjoge1xuICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5ncmVlbi5iYXNlXG4gICAgfSxcbiAgICB0ZWFsOiB7XG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLnRlYWwuYmFzZVxuICAgIH0sXG4gICAgcHVycGxlOiB7XG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLnB1cnBsZS5iYXNlXG4gICAgfVxuICB9LFxuXG4gIHN1YnRsZToge1xuICAgIG5ldXRyYWw6IHtcbiAgICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbC5kYXJrLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMubmV1dHJhbC5saWdodFxuICAgIH0sXG4gICAgYmx1ZToge1xuICAgICAgY29sb3I6IGNvbG9ycy5ibHVlLmRhcmssXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5ibHVlLmxpZ2h0XG4gICAgfSxcbiAgICByZWQ6IHtcbiAgICAgIGNvbG9yOiBjb2xvcnMucmVkLmRhcmssXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5yZWQubGlnaHRcbiAgICB9LFxuICAgIG9yYW5nZToge1xuICAgICAgY29sb3I6IGNvbG9ycy5vcmFuZ2UuZGFyayxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLm9yYW5nZS5saWdodFxuICAgIH0sXG4gICAgeWVsbG93OiB7XG4gICAgICBjb2xvcjogY29sb3JzLnllbGxvdy5kYXJrLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMueWVsbG93LmxpZ2h0XG4gICAgfSxcbiAgICBncmVlbjoge1xuICAgICAgY29sb3I6IGNvbG9ycy5ncmVlbi5kYXJrLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuZ3JlZW4ubGlnaHRcbiAgICB9LFxuICAgIHRlYWw6IHtcbiAgICAgIGNvbG9yOiBjb2xvcnMudGVhbC5kYXJrLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMudGVhbC5saWdodFxuICAgIH0sXG4gICAgcHVycGxlOiB7XG4gICAgICBjb2xvcjogY29sb3JzLnB1cnBsZS5kYXJrLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMucHVycGxlLmxpZ2h0XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZpbGxzXG4iXX0=