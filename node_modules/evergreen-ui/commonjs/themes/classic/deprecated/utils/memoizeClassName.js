"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _glamor = require("glamor");

/**
 * Memoize a function that takes N number of strings as arguments and returns
 * a CSS-in-JS object.
 *
 * The key of the cache will be the concatenated string arguments,
 * For example: `primary_success` or `regular`
 *
 * The CSS-in-JS object will be passed to `glamor` and the generated className
 * will be used as the value in the cache.
 *
 * Why?
 * Glamor, or any CSS-in-JS solution wil have a build-in cache.
 * However, to get the hash/key of this build-in cache a relatively expensive
 * hashing function needs to run on the CSS-in-JS object.
 * This function removes the need for the build-in cache and acts as much
 * faster alternative.
 *
 * @param {function} fn â€” function that return an appearance (object).
 * @return {string} a class name.
 */
var memoizeClassName = function memoizeClassName(fn) {
  // Memo will hold a list of string keys with string values (classNames).
  var memo = {}; // Return the wrapped function.

  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // Create a key by joining all args.
    var key = args.join('_') || '__no_args__'; // Check if is already memoized, if so return the result.

    if (memo[key]) return memo[key]; // Create a new entry in the memo with the generated className.

    memo[key] = (0, _glamor.css)(fn.apply(void 0, args)).toString(); // Return the newly generated className.

    return memo[key];
  };
};

var _default = memoizeClassName;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZXMvY2xhc3NpYy9kZXByZWNhdGVkL3V0aWxzL21lbW9pemVDbGFzc05hbWUuanMiXSwibmFtZXMiOlsibWVtb2l6ZUNsYXNzTmFtZSIsImZuIiwibWVtbyIsImFyZ3MiLCJrZXkiLCJqb2luIiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFBQyxFQUFFLEVBQUk7QUFDN0I7QUFDQSxNQUFNQyxJQUFJLEdBQUcsRUFBYixDQUY2QixDQUk3Qjs7QUFDQSxTQUFPLFlBQWE7QUFBQSxzQ0FBVEMsSUFBUztBQUFUQSxNQUFBQSxJQUFTO0FBQUE7O0FBQ2xCO0FBQ0EsUUFBTUMsR0FBRyxHQUFHRCxJQUFJLENBQUNFLElBQUwsQ0FBVSxHQUFWLEtBQWtCLGFBQTlCLENBRmtCLENBSWxCOztBQUNBLFFBQUlILElBQUksQ0FBQ0UsR0FBRCxDQUFSLEVBQWUsT0FBT0YsSUFBSSxDQUFDRSxHQUFELENBQVgsQ0FMRyxDQU9sQjs7QUFDQUYsSUFBQUEsSUFBSSxDQUFDRSxHQUFELENBQUosR0FBWSxpQkFBSUgsRUFBRSxNQUFGLFNBQU1FLElBQU4sQ0FBSixFQUFpQkcsUUFBakIsRUFBWixDQVJrQixDQVVsQjs7QUFDQSxXQUFPSixJQUFJLENBQUNFLEdBQUQsQ0FBWDtBQUNELEdBWkQ7QUFhRCxDQWxCRDs7ZUFvQmVKLGdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJ1xuXG4vKipcbiAqIE1lbW9pemUgYSBmdW5jdGlvbiB0aGF0IHRha2VzIE4gbnVtYmVyIG9mIHN0cmluZ3MgYXMgYXJndW1lbnRzIGFuZCByZXR1cm5zXG4gKiBhIENTUy1pbi1KUyBvYmplY3QuXG4gKlxuICogVGhlIGtleSBvZiB0aGUgY2FjaGUgd2lsbCBiZSB0aGUgY29uY2F0ZW5hdGVkIHN0cmluZyBhcmd1bWVudHMsXG4gKiBGb3IgZXhhbXBsZTogYHByaW1hcnlfc3VjY2Vzc2Agb3IgYHJlZ3VsYXJgXG4gKlxuICogVGhlIENTUy1pbi1KUyBvYmplY3Qgd2lsbCBiZSBwYXNzZWQgdG8gYGdsYW1vcmAgYW5kIHRoZSBnZW5lcmF0ZWQgY2xhc3NOYW1lXG4gKiB3aWxsIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGluIHRoZSBjYWNoZS5cbiAqXG4gKiBXaHk/XG4gKiBHbGFtb3IsIG9yIGFueSBDU1MtaW4tSlMgc29sdXRpb24gd2lsIGhhdmUgYSBidWlsZC1pbiBjYWNoZS5cbiAqIEhvd2V2ZXIsIHRvIGdldCB0aGUgaGFzaC9rZXkgb2YgdGhpcyBidWlsZC1pbiBjYWNoZSBhIHJlbGF0aXZlbHkgZXhwZW5zaXZlXG4gKiBoYXNoaW5nIGZ1bmN0aW9uIG5lZWRzIHRvIHJ1biBvbiB0aGUgQ1NTLWluLUpTIG9iamVjdC5cbiAqIFRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgbmVlZCBmb3IgdGhlIGJ1aWxkLWluIGNhY2hlIGFuZCBhY3RzIGFzIG11Y2hcbiAqIGZhc3RlciBhbHRlcm5hdGl2ZS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiDigJQgZnVuY3Rpb24gdGhhdCByZXR1cm4gYW4gYXBwZWFyYW5jZSAob2JqZWN0KS5cbiAqIEByZXR1cm4ge3N0cmluZ30gYSBjbGFzcyBuYW1lLlxuICovXG5jb25zdCBtZW1vaXplQ2xhc3NOYW1lID0gZm4gPT4ge1xuICAvLyBNZW1vIHdpbGwgaG9sZCBhIGxpc3Qgb2Ygc3RyaW5nIGtleXMgd2l0aCBzdHJpbmcgdmFsdWVzIChjbGFzc05hbWVzKS5cbiAgY29uc3QgbWVtbyA9IHt9XG5cbiAgLy8gUmV0dXJuIHRoZSB3cmFwcGVkIGZ1bmN0aW9uLlxuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAvLyBDcmVhdGUgYSBrZXkgYnkgam9pbmluZyBhbGwgYXJncy5cbiAgICBjb25zdCBrZXkgPSBhcmdzLmpvaW4oJ18nKSB8fCAnX19ub19hcmdzX18nXG5cbiAgICAvLyBDaGVjayBpZiBpcyBhbHJlYWR5IG1lbW9pemVkLCBpZiBzbyByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICBpZiAobWVtb1trZXldKSByZXR1cm4gbWVtb1trZXldXG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgZW50cnkgaW4gdGhlIG1lbW8gd2l0aCB0aGUgZ2VuZXJhdGVkIGNsYXNzTmFtZS5cbiAgICBtZW1vW2tleV0gPSBjc3MoZm4oLi4uYXJncykpLnRvU3RyaW5nKClcblxuICAgIC8vIFJldHVybiB0aGUgbmV3bHkgZ2VuZXJhdGVkIGNsYXNzTmFtZS5cbiAgICByZXR1cm4gbWVtb1trZXldXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNsYXNzTmFtZVxuIl19