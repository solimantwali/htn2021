"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ignore = exports.defaultControlStyles = void 0;

var _scales = _interopRequireDefault(require("./foundational-styles/scales"));

var _helpers = require("./helpers");

var defaultControlStyles = {
  disabled: {
    opacity: 0.8,
    backgroundImage: 'none',
    backgroundColor: _scales["default"].neutral.N2A,
    boxShadow: 'none',
    color: _scales["default"].neutral.N7A,
    pointerEvents: 'none'
  },
  base: {
    backgroundColor: 'white',
    backgroundImage: (0, _helpers.linearGradient)('#FFFFFF', '#F4F5F7'),
    boxShadow: "inset 0 0 0 1px ".concat(_scales["default"].neutral.N4A, ", inset 0 -1px 1px 0 ").concat(_scales["default"].neutral.N2A)
  },
  hover: {
    backgroundImage: (0, _helpers.linearGradient)('#FAFBFB', '#EAECEE')
  },
  focus: {
    boxShadow: "0 0 0 3px ".concat(_scales["default"].blue.B4A, ", inset 0 0 0 1px ").concat(_scales["default"].neutral.N5A, ", inset 0 -1px 1px 0 ").concat(_scales["default"].neutral.N4A)
  },
  active: {
    backgroundImage: 'none',
    backgroundColor: _scales["default"].blue.B3A,
    boxShadow: "inset 0 0 0 1px ".concat(_scales["default"].neutral.N4A, ", inset 0 1px 1px 0 ").concat(_scales["default"].neutral.N2A)
  },
  focusAndActive: {
    boxShadow: "0 0 0 3px ".concat(_scales["default"].blue.B4A, ", inset 0 0 0 1px ").concat(_scales["default"].neutral.N5A, ", inset 0 1px 1px 0 ").concat(_scales["default"].neutral.N2A)
  }
}; // Can't figure out to disable rule for xo linter.

exports.defaultControlStyles = defaultControlStyles;
var ignore = null;
exports.ignore = ignore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvY2xhc3NpYy9kZXByZWNhdGVkL3NoYXJlZC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0Q29udHJvbFN0eWxlcyIsImRpc2FibGVkIiwib3BhY2l0eSIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRDb2xvciIsInNjYWxlcyIsIm5ldXRyYWwiLCJOMkEiLCJib3hTaGFkb3ciLCJjb2xvciIsIk43QSIsInBvaW50ZXJFdmVudHMiLCJiYXNlIiwiTjRBIiwiaG92ZXIiLCJmb2N1cyIsImJsdWUiLCJCNEEiLCJONUEiLCJhY3RpdmUiLCJCM0EiLCJmb2N1c0FuZEFjdGl2ZSIsImlnbm9yZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsSUFBTUEsb0JBQW9CLEdBQUc7QUFDM0JDLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxPQUFPLEVBQUUsR0FERDtBQUVSQyxJQUFBQSxlQUFlLEVBQUUsTUFGVDtBQUdSQyxJQUFBQSxlQUFlLEVBQUVDLG1CQUFPQyxPQUFQLENBQWVDLEdBSHhCO0FBSVJDLElBQUFBLFNBQVMsRUFBRSxNQUpIO0FBS1JDLElBQUFBLEtBQUssRUFBRUosbUJBQU9DLE9BQVAsQ0FBZUksR0FMZDtBQU1SQyxJQUFBQSxhQUFhLEVBQUU7QUFOUCxHQURpQjtBQVMzQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pSLElBQUFBLGVBQWUsRUFBRSxPQURiO0FBRUpELElBQUFBLGVBQWUsRUFBRSw2QkFBZSxTQUFmLEVBQTBCLFNBQTFCLENBRmI7QUFHSkssSUFBQUEsU0FBUyw0QkFBcUJILG1CQUFPQyxPQUFQLENBQWVPLEdBQXBDLGtDQUErRFIsbUJBQU9DLE9BQVAsQ0FBZUMsR0FBOUU7QUFITCxHQVRxQjtBQWMzQk8sRUFBQUEsS0FBSyxFQUFFO0FBQ0xYLElBQUFBLGVBQWUsRUFBRSw2QkFBZSxTQUFmLEVBQTBCLFNBQTFCO0FBRFosR0Fkb0I7QUFpQjNCWSxFQUFBQSxLQUFLLEVBQUU7QUFDTFAsSUFBQUEsU0FBUyxzQkFBZUgsbUJBQU9XLElBQVAsQ0FBWUMsR0FBM0IsK0JBQW1EWixtQkFBT0MsT0FBUCxDQUFlWSxHQUFsRSxrQ0FBNkZiLG1CQUFPQyxPQUFQLENBQWVPLEdBQTVHO0FBREosR0FqQm9CO0FBb0IzQk0sRUFBQUEsTUFBTSxFQUFFO0FBQ05oQixJQUFBQSxlQUFlLEVBQUUsTUFEWDtBQUVOQyxJQUFBQSxlQUFlLEVBQUVDLG1CQUFPVyxJQUFQLENBQVlJLEdBRnZCO0FBR05aLElBQUFBLFNBQVMsNEJBQXFCSCxtQkFBT0MsT0FBUCxDQUFlTyxHQUFwQyxpQ0FBOERSLG1CQUFPQyxPQUFQLENBQWVDLEdBQTdFO0FBSEgsR0FwQm1CO0FBeUIzQmMsRUFBQUEsY0FBYyxFQUFFO0FBQ2RiLElBQUFBLFNBQVMsc0JBQWVILG1CQUFPVyxJQUFQLENBQVlDLEdBQTNCLCtCQUFtRFosbUJBQU9DLE9BQVAsQ0FBZVksR0FBbEUsaUNBQTRGYixtQkFBT0MsT0FBUCxDQUFlQyxHQUEzRztBQURLO0FBekJXLENBQTdCLEMsQ0E4QkE7OztBQUNBLElBQU1lLE1BQU0sR0FBRyxJQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNjYWxlcyBmcm9tICcuL2ZvdW5kYXRpb25hbC1zdHlsZXMvc2NhbGVzJ1xuaW1wb3J0IHsgbGluZWFyR3JhZGllbnQgfSBmcm9tICcuL2hlbHBlcnMnXG5cbmNvbnN0IGRlZmF1bHRDb250cm9sU3R5bGVzID0ge1xuICBkaXNhYmxlZDoge1xuICAgIG9wYWNpdHk6IDAuOCxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yQSxcbiAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjdBLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICB9LFxuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJhY2tncm91bmRJbWFnZTogbGluZWFyR3JhZGllbnQoJyNGRkZGRkYnLCAnI0Y0RjVGNycpLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX0sIGluc2V0IDAgLTFweCAxcHggMCAke3NjYWxlcy5uZXV0cmFsLk4yQX1gXG4gIH0sXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBsaW5lYXJHcmFkaWVudCgnI0ZBRkJGQicsICcjRUFFQ0VFJylcbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBib3hTaGFkb3c6IGAwIDAgMCAzcHggJHtzY2FsZXMuYmx1ZS5CNEF9LCBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONUF9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtzY2FsZXMubmV1dHJhbC5ONEF9YFxuICB9LFxuICBhY3RpdmU6IHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5ibHVlLkIzQSxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONEF9LCBpbnNldCAwIDFweCAxcHggMCAke3NjYWxlcy5uZXV0cmFsLk4yQX1gXG4gIH0sXG4gIGZvY3VzQW5kQWN0aXZlOiB7XG4gICAgYm94U2hhZG93OiBgMCAwIDAgM3B4ICR7c2NhbGVzLmJsdWUuQjRBfSwgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjVBfSwgaW5zZXQgMCAxcHggMXB4IDAgJHtzY2FsZXMubmV1dHJhbC5OMkF9YFxuICB9XG59XG5cbi8vIENhbid0IGZpZ3VyZSBvdXQgdG8gZGlzYWJsZSBydWxlIGZvciB4byBsaW50ZXIuXG5jb25zdCBpZ25vcmUgPSBudWxsXG5cbmV4cG9ydCB7IGRlZmF1bHRDb250cm9sU3R5bGVzLCBpZ25vcmUgfVxuIl19