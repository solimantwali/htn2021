"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var baseStyle = {
  fontFamily: 'fontFamilies.ui',
  fontWeight: 500,
  marginBottom: function marginBottom(_, props) {
    return props.direction === 'vertical' ? '8px' : null;
  }
};
var appearances = {
  primary: {
    color: 'colors.muted',
    paddingTop: '6px',
    paddingBottom: '6px',
    paddingLeft: '2px',
    paddingRight: '2px',
    position: 'relative',
    ':not(:last-child)': {
      marginRight: function marginRight(_, props) {
        return props.direction === 'horizontal' ? '20px' : null;
      }
    },
    _before: {
      content: '""',
      position: 'absolute',
      bottom: 0,
      right: 0,
      height: '2px',
      borderRadius: '2px 2px 0px 0px',
      backgroundColor: 'colors.blue500',
      width: '100%',
      transition: '0.25s',
      transform: 'scaleY(0)',
      transformOrigin: 'bottom center'
    },
    _hover: {
      color: 'colors.default'
    },
    _current: {
      color: 'colors.blue500',
      '&:before': {
        transform: 'scaleY(1)'
      },
      '&:focus': {
        color: 'colors.blue600'
      }
    },
    _focus: {
      boxShadow: 'shadows.focusRing',
      color: 'colors.default'
    },
    _disabled: {
      pointerEvents: 'none',
      cursor: 'not-allowed',
      color: 'colors.gray500',
      '&:before': {
        backgroundColor: 'colors.gray500'
      }
    }
  },
  secondary: {
    paddingX: '16px',
    paddingY: '8px',
    borderRadius: 'radii.1',
    color: 'colors.default',
    ':not(:last-child)': {
      marginRight: function marginRight(_, props) {
        return props.direction === 'horizontal' ? '8px' : null;
      }
    },
    _hover: {
      backgroundColor: 'colors.gray100',
      color: 'colors.gray800'
    },
    _active: {
      backgroundColor: 'colors.gray200'
    },
    _current: {
      backgroundColor: 'colors.blue50',
      color: 'colors.blue500'
    },
    _focus: {
      boxShadow: 'shadows.focusRing'
    },
    _disabled: {
      pointerEvents: 'none',
      cursor: 'not-allowed',
      color: 'colors.gray500',
      '&[aria-current="page"], &[aria-selected="true"]': {
        backgroundColor: 'colors.gray100'
      }
    }
  }
};
var _default = {
  baseStyle: baseStyle,
  appearances: appearances
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvZGVmYXVsdC9jb21wb25lbnRzL3RhYi5qcyJdLCJuYW1lcyI6WyJiYXNlU3R5bGUiLCJmb250RmFtaWx5IiwiZm9udFdlaWdodCIsIm1hcmdpbkJvdHRvbSIsIl8iLCJwcm9wcyIsImRpcmVjdGlvbiIsImFwcGVhcmFuY2VzIiwicHJpbWFyeSIsImNvbG9yIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBvc2l0aW9uIiwibWFyZ2luUmlnaHQiLCJfYmVmb3JlIiwiY29udGVudCIsImJvdHRvbSIsInJpZ2h0IiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwid2lkdGgiLCJ0cmFuc2l0aW9uIiwidHJhbnNmb3JtIiwidHJhbnNmb3JtT3JpZ2luIiwiX2hvdmVyIiwiX2N1cnJlbnQiLCJfZm9jdXMiLCJib3hTaGFkb3ciLCJfZGlzYWJsZWQiLCJwb2ludGVyRXZlbnRzIiwiY3Vyc29yIiwic2Vjb25kYXJ5IiwicGFkZGluZ1giLCJwYWRkaW5nWSIsIl9hY3RpdmUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU1BLFNBQVMsR0FBRztBQUNoQkMsRUFBQUEsVUFBVSxFQUFFLGlCQURJO0FBRWhCQyxFQUFBQSxVQUFVLEVBQUUsR0FGSTtBQUdoQkMsRUFBQUEsWUFBWSxFQUFFLHNCQUFDQyxDQUFELEVBQUlDLEtBQUo7QUFBQSxXQUFlQSxLQUFLLENBQUNDLFNBQU4sS0FBb0IsVUFBcEIsR0FBaUMsS0FBakMsR0FBeUMsSUFBeEQ7QUFBQTtBQUhFLENBQWxCO0FBTUEsSUFBTUMsV0FBVyxHQUFHO0FBQ2xCQyxFQUFBQSxPQUFPLEVBQUU7QUFDUEMsSUFBQUEsS0FBSyxFQUFFLGNBREE7QUFFUEMsSUFBQUEsVUFBVSxFQUFFLEtBRkw7QUFHUEMsSUFBQUEsYUFBYSxFQUFFLEtBSFI7QUFJUEMsSUFBQUEsV0FBVyxFQUFFLEtB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RmFtaWx5OiAnZm9udEZhbWlsaWVzLnVpJyxcbiAgZm9udFdlaWdodDogNTAwLFxuICBtYXJnaW5Cb3R0b206IChfLCBwcm9wcykgPT4gKHByb3BzLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyA/ICc4cHgnIDogbnVsbClcbn1cblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIHByaW1hcnk6IHtcbiAgICBjb2xvcjogJ2NvbG9ycy5tdXRlZCcsXG4gICAgcGFkZGluZ1RvcDogJzZweCcsXG4gICAgcGFkZGluZ0JvdHRvbTogJzZweCcsXG4gICAgcGFkZGluZ0xlZnQ6ICcycHgnLFxuICAgIHBhZGRpbmdSaWdodDogJzJweCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG5cbiAgICAnOm5vdCg6bGFzdC1jaGlsZCknOiB7XG4gICAgICBtYXJnaW5SaWdodDogKF8sIHByb3BzKSA9PiAocHJvcHMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAnMjBweCcgOiBudWxsKVxuICAgIH0sXG5cbiAgICBfYmVmb3JlOiB7XG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnMnB4JyxcbiAgICAgIGJvcmRlclJhZGl1czogJzJweCAycHggMHB4IDBweCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjb2xvcnMuYmx1ZTUwMCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgdHJhbnNpdGlvbjogJzAuMjVzJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgwKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdib3R0b20gY2VudGVyJ1xuICAgIH0sXG5cbiAgICBfaG92ZXI6IHtcbiAgICAgIGNvbG9yOiAnY29sb3JzLmRlZmF1bHQnXG4gICAgfSxcblxuICAgIF9jdXJyZW50OiB7XG4gICAgICBjb2xvcjogJ2NvbG9ycy5ibHVlNTAwJyxcblxuICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVkoMSknXG4gICAgICB9LFxuXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcnMuYmx1ZTYwMCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2ZvY3VzOiB7XG4gICAgICBib3hTaGFkb3c6ICdzaGFkb3dzLmZvY3VzUmluZycsXG4gICAgICBjb2xvcjogJ2NvbG9ycy5kZWZhdWx0J1xuICAgIH0sXG5cbiAgICBfZGlzYWJsZWQ6IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIGN1cnNvcjogJ25vdC1hbGxvd2VkJyxcbiAgICAgIGNvbG9yOiAnY29sb3JzLmdyYXk1MDAnLFxuXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2NvbG9ycy5ncmF5NTAwJ1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBzZWNvbmRhcnk6IHtcbiAgICBwYWRkaW5nWDogJzE2cHgnLFxuICAgIHBhZGRpbmdZOiAnOHB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICdyYWRpaS4xJyxcbiAgICBjb2xvcjogJ2NvbG9ycy5kZWZhdWx0JyxcblxuICAgICc6bm90KDpsYXN0LWNoaWxkKSc6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAoXywgcHJvcHMpID0+IChwcm9wcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICc4cHgnIDogbnVsbClcbiAgICB9LFxuXG4gICAgX2hvdmVyOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjb2xvcnMuZ3JheTEwMCcsXG4gICAgICBjb2xvcjogJ2NvbG9ycy5ncmF5ODAwJ1xuICAgIH0sXG5cbiAgICBfYWN0aXZlOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjb2xvcnMuZ3JheTIwMCdcbiAgICB9LFxuXG4gICAgX2N1cnJlbnQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2NvbG9ycy5ibHVlNTAnLFxuICAgICAgY29sb3I6ICdjb2xvcnMuYmx1ZTUwMCdcbiAgICB9LFxuXG4gICAgX2ZvY3VzOiB7XG4gICAgICBib3hTaGFkb3c6ICdzaGFkb3dzLmZvY3VzUmluZydcbiAgICB9LFxuXG4gICAgX2Rpc2FibGVkOiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBjdXJzb3I6ICdub3QtYWxsb3dlZCcsXG4gICAgICBjb2xvcjogJ2NvbG9ycy5ncmF5NTAwJyxcblxuICAgICAgJyZbYXJpYS1jdXJyZW50PVwicGFnZVwiXSwgJlthcmlhLXNlbGVjdGVkPVwidHJ1ZVwiXSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnY29sb3JzLmdyYXkxMDAnXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYmFzZVN0eWxlLFxuICBhcHBlYXJhbmNlc1xufVxuIl19