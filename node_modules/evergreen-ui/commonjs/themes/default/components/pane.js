"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function borderProperty(theme, _ref) {
  var border = _ref.border,
      value = _ref.value;

  if (Object.prototype.hasOwnProperty.call(theme.colors.border, value)) {
    return "1px solid ".concat(theme.colors.border[value]);
  }

  if (value === true) {
    return "1px solid ".concat(theme.colors.border["default"]);
  }

  if (value === false) {
    return null;
  }

  if (Object.prototype.hasOwnProperty.call(theme.colors.border, border)) {
    return "1px solid ".concat(theme.colors.border[border]);
  }

  if (border === true) {
    return "1px solid ".concat(theme.colors.border["default"]);
  }

  return value || border;
}

var baseStyle = function baseStyle(theme, props) {
  var transitionStyles = {};

  if (theme.shadows[props.hoverElevation] || theme.shadows[props.activeElevation]) {
    Object.assign(transitionStyles, {
      transitionDuration: '150ms',
      transitionProperty: 'box-shadow, transform',
      transitionTimingFunction: 'cubic-bezier(0.0, 0.0, 0.2, 1)'
    });
  }

  var hoverStyles;

  if (theme.shadows[props.hoverElevation]) {
    hoverStyles = {
      transform: 'translateY(-2px)',
      boxShadow: "shadows.".concat(props.hoverElevation)
    };
  }

  var activeStyles;

  if (theme.shadows[props.activeElevation]) {
    activeStyles = {
      transform: 'translateY(-1px)',
      boxShadow: "shadows.".concat(props.activeElevation)
    };
  }

  return _objectSpread(_objectSpread({
    background: theme.colors[props.background] || props.background,
    boxShadow: theme.shadows[props.elevation],
    borderTop: borderProperty(theme, {
      border: props.border,
      value: props.borderTop
    }),
    borderRight: borderProperty(theme, {
      border: props.border,
      value: props.borderRight
    }),
    borderBottom: borderProperty(theme, {
      border: props.border,
      value: props.borderBottom
    }),
    borderLeft: borderProperty(theme, {
      border: props.border,
      value: props.borderLeft
    })
  }, transitionStyles), {}, {
    _hover: hoverStyles,
    _active: activeStyles
  });
};

var appearances = {};
var sizes = {};
var _default = {
  baseStyle: baseStyle,
  appearances: appearances,
  sizes: sizes
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZXMvZGVmYXVsdC9jb21wb25lbnRzL3BhbmUuanMiXSwibmFtZXMiOlsiYm9yZGVyUHJvcGVydHkiLCJ0aGVtZSIsImJvcmRlciIsInZhbHVlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY29sb3JzIiwiYmFzZVN0eWxlIiwicHJvcHMiLCJ0cmFuc2l0aW9uU3R5bGVzIiwic2hhZG93cyIsImhvdmVyRWxldmF0aW9uIiwiYWN0aXZlRWxldmF0aW9uIiwiYXNzaWduIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiaG92ZXJTdHlsZXMiLCJ0cmFuc2Zvcm0iLCJib3hTaGFkb3ciLCJhY3RpdmVTdHlsZXMiLCJiYWNrZ3JvdW5kIiwiZWxldmF0aW9uIiwiYm9yZGVyVG9wIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJCb3R0b20iLCJib3JkZXJMZWZ0IiwiX2hvdmVyIiwiX2FjdGl2ZSIsImFwcGVhcmFuY2VzIiwic2l6ZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLFFBQWtEO0FBQUEsTUFBakJDLE1BQWlCLFFBQWpCQSxNQUFpQjtBQUFBLE1BQVRDLEtBQVMsUUFBVEEsS0FBUzs7QUFDaEQsTUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNOLEtBQUssQ0FBQ08sTUFBTixDQUFhTixNQUFsRCxFQUEwREMsS0FBMUQsQ0FBSixFQUFzRTtBQUNwRSwrQkFBb0JGLEtBQUssQ0FBQ08sTUFBTixDQUFhTixNQUFiLENBQW9CQyxLQUFwQixDQUFwQjtBQUNEOztBQUVELE1BQUlBLEtBQUssS0FBSyxJQUFkLEVBQW9CO0FBQ2xCLCtCQUFvQkYsS0FBSyxDQUFDTyxNQUFOLENBQWFOLE1BQWIsV0FBcEI7QUFD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Z0JBcEJMO0FBcUJFa0IsSUFBQUEsTUFBTSxFQUFFVixXQXJCVjtBQXNCRVcsSUFBQUEsT0FBTyxFQUFFUjtBQXRCWDtBQXdCRCxDQWxERDs7QUFvREEsSUFBTVMsV0FBVyxHQUFHLEVBQXBCO0FBQ0EsSUFBTUMsS0FBSyxHQUFHLEVBQWQ7ZUFFZTtBQUNidkIsRUFBQUEsU0FBUyxFQUFUQSxTQURhO0FBRWJzQixFQUFBQSxXQUFXLEVBQVhBLFdBRmE7QUFHYkMsRUFBQUEsS0FBSyxFQUFMQTtBQUhhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBib3JkZXJQcm9wZXJ0eSh0aGVtZSwgeyBib3JkZXIsIHZhbHVlIH0pIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGVtZS5jb2xvcnMuYm9yZGVyLCB2YWx1ZSkpIHtcbiAgICByZXR1cm4gYDFweCBzb2xpZCAke3RoZW1lLmNvbG9ycy5ib3JkZXJbdmFsdWVdfWBcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmJvcmRlci5kZWZhdWx0fWBcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGVtZS5jb2xvcnMuYm9yZGVyLCBib3JkZXIpKSB7XG4gICAgcmV0dXJuIGAxcHggc29saWQgJHt0aGVtZS5jb2xvcnMuYm9yZGVyW2JvcmRlcl19YFxuICB9XG5cbiAgaWYgKGJvcmRlciA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBgMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmJvcmRlci5kZWZhdWx0fWBcbiAgfVxuXG4gIHJldHVybiB2YWx1ZSB8fCBib3JkZXJcbn1cblxuY29uc3QgYmFzZVN0eWxlID0gKHRoZW1lLCBwcm9wcykgPT4ge1xuICBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge31cbiAgaWYgKHRoZW1lLnNoYWRvd3NbcHJvcHMuaG92ZXJFbGV2YXRpb25dIHx8IHRoZW1lLnNoYWRvd3NbcHJvcHMuYWN0aXZlRWxldmF0aW9uXSkge1xuICAgIE9iamVjdC5hc3NpZ24odHJhbnNpdGlvblN0eWxlcywge1xuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnMTUwbXMnLFxuICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiAnYm94LXNoYWRvdywgdHJhbnNmb3JtJyxcbiAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogJ2N1YmljLWJlemllcigwLjAsIDAuMCwgMC4yLCAxKSdcbiAgICB9KVxuICB9XG5cbiAgbGV0IGhvdmVyU3R5bGVzXG4gIGlmICh0aGVtZS5zaGFkb3dzW3Byb3BzLmhvdmVyRWxldmF0aW9uXSkge1xuICAgIGhvdmVyU3R5bGVzID0ge1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMnB4KScsXG4gICAgICBib3hTaGFkb3c6IGBzaGFkb3dzLiR7cHJvcHMuaG92ZXJFbGV2YXRpb259YFxuICAgIH1cbiAgfVxuXG4gIGxldCBhY3RpdmVTdHlsZXNcbiAgaWYgKHRoZW1lLnNoYWRvd3NbcHJvcHMuYWN0aXZlRWxldmF0aW9uXSkge1xuICAgIGFjdGl2ZVN0eWxlcyA9IHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTFweCknLFxuICAgICAgYm94U2hhZG93OiBgc2hhZG93cy4ke3Byb3BzLmFjdGl2ZUVsZXZhdGlvbn1gXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiYWNrZ3JvdW5kOiB0aGVtZS5jb2xvcnNbcHJvcHMuYmFja2dyb3VuZF0gfHwgcHJvcHMuYmFja2dyb3VuZCxcbiAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbcHJvcHMuZWxldmF0aW9uXSxcbiAgICBib3JkZXJUb3A6IGJvcmRlclByb3BlcnR5KHRoZW1lLCB7XG4gICAgICBib3JkZXI6IHByb3BzLmJvcmRlcixcbiAgICAgIHZhbHVlOiBwcm9wcy5ib3JkZXJUb3BcbiAgICB9KSxcbiAgICBib3JkZXJSaWdodDogYm9yZGVyUHJvcGVydHkodGhlbWUsIHtcbiAgICAgIGJvcmRlcjogcHJvcHMuYm9yZGVyLFxuICAgICAgdmFsdWU6IHByb3BzLmJvcmRlclJpZ2h0XG4gICAgfSksXG4gICAgYm9yZGVyQm90dG9tOiBib3JkZXJQcm9wZXJ0eSh0aGVtZSwge1xuICAgICAgYm9yZGVyOiBwcm9wcy5ib3JkZXIsXG4gICAgICB2YWx1ZTogcHJvcHMuYm9yZGVyQm90dG9tXG4gICAgfSksXG4gICAgYm9yZGVyTGVmdDogYm9yZGVyUHJvcGVydHkodGhlbWUsIHtcbiAgICAgIGJvcmRlcjogcHJvcHMuYm9yZGVyLFxuICAgICAgdmFsdWU6IHByb3BzLmJvcmRlckxlZnRcbiAgICB9KSxcblxuICAgIC4uLnRyYW5zaXRpb25TdHlsZXMsXG4gICAgX2hvdmVyOiBob3ZlclN0eWxlcyxcbiAgICBfYWN0aXZlOiBhY3RpdmVTdHlsZXNcbiAgfVxufVxuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHt9XG5jb25zdCBzaXplcyA9IHt9XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYmFzZVN0eWxlLFxuICBhcHBlYXJhbmNlcyxcbiAgc2l6ZXNcbn1cbiJdfQ==