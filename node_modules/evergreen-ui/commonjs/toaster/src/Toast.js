"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactTransitionGroup = require("react-transition-group");

var _uiBox = _interopRequireDefault(require("ui-box"));

var _Alert = _interopRequireDefault(require("../../alert/src/Alert"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var animationEasing = {
  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)',
  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'
};
var ANIMATION_DURATION = 240;

var openAnimation = _glamor.css.keyframes('openAnimation', {
  from: {
    opacity: 0,
    transform: 'translateY(-120%)'
  },
  to: {
    transform: 'translateY(0)'
  }
});

var closeAnimation = _glamor.css.keyframes('closeAnimation', {
  from: {
    transform: 'scale(1)',
    opacity: 1
  },
  to: {
    transform: 'scale(0.9)',
    opacity: 0
  }
});

var animationStyles = (0, _glamor.css)({
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  height: 0,
  transition: "all ".concat(ANIMATION_DURATION, "ms ").concat(animationEasing.deceleration),
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: "".concat(openAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.spring, " both")
  },
  '&[data-state="exiting"]': {
    animation: "".concat(closeAnimation, " 120ms ").concat(animationEasing.acceleration, " both")
  }
});
var Toast = /*#__PURE__*/(0, _react.memo)(function Toast(props) {
  var children = props.children,
      duration = props.duration,
      hasCloseButton = props.hasCloseButton,
      _props$intent = props.intent,
      intent = _props$intent === void 0 ? 'none' : _props$intent,
      isShownProp = props.isShown,
      onRemove = props.onRemove,
      title = props.title,
      zIndex = props.zIndex;
  var transitionRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(true),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isShown = _useState2[0],
      setIsShown = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      height = _useState4[0],
      setHeight = _useState4[1];

  var closeTimer = (0, _react.useRef)(null);
  var clearCloseTimer = (0, _react.useCallback)(function () {
    if (closeTimer.current) {
      clearTimeout(closeTimer.current);
      closeTimer.current = null;
    }
  }, []);
  var close = (0, _react.useCallback)(function () {
    clearCloseTimer();
    setIsShown(false);
  }, [clearCloseTimer]);
  var startCloseTimer = (0, _react.useCallback)(function () {
    if (duration) {
      clearCloseTimer();
      closeTimer.current = setTimeout(function () {
        close();
      }, duration * 1000);
    }
  }, [duration, clearCloseTimer, close]);
  (0, _react.useEffect)(function () {
    startCloseTimer();
    return function () {
      clearCloseTimer();
    };
  }, [startCloseTimer, clearCloseTimer]);
  (0, _react.useEffect)(function () {
    if (isShownProp !== isShown && typeof isShownProp === 'boolean') {
      setIsShown(isShownProp);
    }
  }, [isShown, isShownProp]);
  var handleMouseEnter = (0, _react.useCallback)(function () {
    return clearCloseTimer();
  }, [clearCloseTimer]);
  var handleMouseLeave = (0, _react.useCallback)(function () {
    return startCloseTimer();
  }, [startCloseTimer]);
  var onRef = (0, _react.useCallback)(function (ref) {
    if (ref === null) return;

    var _ref$getBoundingClien = ref.getBoundingClientRect(),
        rectHeight = _ref$getBoundingClien.height;

    setHeight(rectHeight);
  }, []);
  var styles = (0, _react.useMemo)(function () {
    return {
      height: height,
      zIndex: zIndex,
      marginBottom: isShown ? 0 : -height
    };
  }, [isShown, height, zIndex]);
  return /*#__PURE__*/_react["default"].createElement(_reactTransitionGroup.Transition, {
    nodeRef: transitionRef,
    appear: true,
    unmountOnExit: true,
    timeout: ANIMATION_DURATION,
    "in": isShown,
    onExited: onRemove
  }, function (state) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      ref: transitionRef,
      "data-state": state,
      className: animationStyles,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      style: styles
    }, /*#__PURE__*/_react["default"].createElement(_uiBox["default"], {
      ref: onRef,
      padding: 8
    }, /*#__PURE__*/_react["default"].createElement(_Alert["default"], {
      flexShrink: 0,
      appearance: "card",
      elevation: 3,
      intent: intent,
      title: title,
      isRemoveable: hasCloseButton,
      onRemove: close,
      pointerEvents: "all"
    }, children)));
  });
});
Toast.propTypes = {
  /**
   * The z-index of the toast.
   */
  zIndex: _propTypes["default"].number,

  /**
   * Duration of the toast.
   */
  duration: _propTypes["default"].number,

  /**
   * Function called when the toast is all the way closed.
   */
  onRemove: _propTypes["default"].func,

  /**
   * The type of the alert.
   */
  intent: _propTypes["default"].oneOf(['none', 'success', 'warning', 'danger']),

  /**
   * The title of the alert.
   */
  title: _propTypes["default"].node,

  /**
   * Description of the alert.
   */
  children: _propTypes["default"].node,

  /**
   * When true, show a close icon button inside of the toast.
   */
  hasCloseButton: _propTypes["default"].bool,

  /**
   * When false, will close the Toast and call onRemove when finished.
   */
  isShown: _propTypes["default"].bool
};
var _default = Toast;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2FzdGVyL3NyYy9Ub2FzdC5qcyJdLCJuYW1lcyI6WyJhbmltYXRpb25FYXNpbmciLCJkZWNlbGVyYXRpb24iLCJhY2NlbGVyYXRpb24iLCJzcHJpbmciLCJBTklNQVRJT05fRFVSQVRJT04iLCJvcGVuQW5pbWF0aW9uIiwiY3NzIiwia2V5ZnJhbWVzIiwiZnJvbSIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJ0byIsImNsb3NlQW5pbWF0aW9uIiwiYW5pbWF0aW9uU3R5bGVzIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwiaGVpZ2h0IiwidHJhbnNpdGlvbiIsImFuaW1hdGlvbiIsIlRvYXN0IiwicHJvcHMiLCJjaGlsZHJlbiIsImR1cmF0aW9uIiwiaGFzQ2xvc2VCdXR0b24iLCJpbnRlbnQiLCJpc1Nob3duUHJvcCIsImlzU2hvd24iLCJvblJlbW92ZSIsInRpdGxlIiwiekluZGV4IiwidHJhbnNpdGlvblJlZiIsInNldElzU2hvd24iLCJzZXRIZWlnaHQiLCJjbG9zZVRpbWVyIiwiY2xlYXJDbG9zZVRpbWVyIiwiY3VycmVudCIsImNsZWFyVGltZW91dCIsImNsb3NlIiwic3RhcnRDbG9zZVRpbWVyIiwic2V0VGltZW91dCIsImhhbmRsZU1vdXNlRW50ZXIiLCJoYW5kbGVNb3VzZUxlYXZlIiwib25SZWYiLCJyZWYiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0SGVpZ2h0Iiwic3R5bGVzIiwibWFyZ2luQm90dG9tIiwic3RhdGUiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJudW1iZXIiLCJmdW5jIiwib25lT2YiLCJub2RlIiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxlQUFlLEdBQUc7QUFDdEJDLEVBQUFBLFlBQVksRUFBRSxnQ0FEUTtBQUV0QkMsRUFBQUEsWUFBWSxFQUFFLDhC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NUdhLENBQWQ7QUE4R0FGLEtBQUssQ0FBQzhCLFNBQU4sR0FBa0I7QUFDaEI7QUFDRjtBQUNBO0FBQ0VwQixFQUFBQSxNQUFNLEVBQUVxQixzQkFBVUMsTUFKRjs7QUFNaEI7QUFDRjtBQUNBO0FBQ0U3QixFQUFBQSxRQUFRLEVBQUU0QixzQkFBVUMsTUFUSjs7QUFXaEI7QUFDRjtBQUNBO0FBQ0V4QixFQUFBQSxRQUFRLEVBQUV1QixzQkFBVUUsSUFkSjs7QUFnQmhCO0FBQ0Y7QUFDQTtBQUNFNUIsRUFBQUEsTUFBTSxFQUFFMEIsc0JBQVVHLEtBQVYsQ0FBZ0IsQ0FBQyxNQUFELEVBQVMsU0FBVCxFQUFvQixTQUFwQixFQUErQixRQUEvQixDQUFoQixDQW5CUTs7QUFxQmhCO0FBQ0Y7QUFDQTtBQUNFekIsRUFBQUEsS0FBSyxFQUFFc0Isc0JBQVVJLElBeEJEOztBQTBCaEI7QUFDRjtBQUNBO0FBQ0VqQyxFQUFBQSxRQUFRLEVBQUU2QixzQkFBVUksSUE3Qko7O0FBK0JoQjtBQUNGO0FBQ0E7QUFDRS9CLEVBQUFBLGNBQWMsRUFBRTJCLHNCQUFVSyxJQWxDVjs7QUFvQ2hCO0FBQ0Y7QUFDQTtBQUNFN0IsRUFBQUEsT0FBTyxFQUFFd0Isc0JBQVVLO0FBdkNILENBQWxCO2VBMENlcEMsSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBtZW1vLCB1c2VNZW1vLCB1c2VSZWYsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCdcbmltcG9ydCBCb3ggZnJvbSAndWktYm94J1xuaW1wb3J0IEFsZXJ0IGZyb20gJy4uLy4uL2FsZXJ0L3NyYy9BbGVydCdcblxuY29uc3QgYW5pbWF0aW9uRWFzaW5nID0ge1xuICBkZWNlbGVyYXRpb246ICdjdWJpYy1iZXppZXIoMC4wLCAwLjAsIDAuMiwgMSknLFxuICBhY2NlbGVyYXRpb246ICdjdWJpYy1iZXppZXIoMC40LCAwLjAsIDEsIDEpJyxcbiAgc3ByaW5nOiAnY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMjAsIDEuMTc1KSdcbn1cblxuY29uc3QgQU5JTUFUSU9OX0RVUkFUSU9OID0gMjQwXG5cbmNvbnN0IG9wZW5BbmltYXRpb24gPSBjc3Mua2V5ZnJhbWVzKCdvcGVuQW5pbWF0aW9uJywge1xuICBmcm9tOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMjAlKSdcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJ1xuICB9XG59KVxuXG5jb25zdCBjbG9zZUFuaW1hdGlvbiA9IGNzcy5rZXlmcmFtZXMoJ2Nsb3NlQW5pbWF0aW9uJywge1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkpJyxcbiAgICBvcGFjaXR5OiAwXG4gIH1cbn0pXG5cbmNvbnN0IGFuaW1hdGlvblN0eWxlcyA9IGNzcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBoZWlnaHQ6IDAsXG4gIHRyYW5zaXRpb246IGBhbGwgJHtBTklNQVRJT05fRFVSQVRJT059bXMgJHthbmltYXRpb25FYXNpbmcuZGVjZWxlcmF0aW9ufWAsXG4gICcmW2RhdGEtc3RhdGU9XCJlbnRlcmluZ1wiXSwgJltkYXRhLXN0YXRlPVwiZW50ZXJlZFwiXSc6IHtcbiAgICBhbmltYXRpb246IGAke29wZW5BbmltYXRpb259ICR7QU5JTUFUSU9OX0RVUkFUSU9OfW1zICR7YW5pbWF0aW9uRWFzaW5nLnNwcmluZ30gYm90aGBcbiAgfSxcbiAgJyZbZGF0YS1zdGF0ZT1cImV4aXRpbmdcIl0nOiB7XG4gICAgYW5pbWF0aW9uOiBgJHtjbG9zZUFuaW1hdGlvbn0gMTIwbXMgJHthbmltYXRpb25FYXNpbmcuYWNjZWxlcmF0aW9ufSBib3RoYFxuICB9XG59KVxuXG5jb25zdCBUb2FzdCA9IG1lbW8oZnVuY3Rpb24gVG9hc3QocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGR1cmF0aW9uLFxuICAgIGhhc0Nsb3NlQnV0dG9uLFxuICAgIC8vIFRlbXBsYXRlIHByb3BzXG4gICAgaW50ZW50ID0gJ25vbmUnLFxuICAgIGlzU2hvd246IGlzU2hvd25Qcm9wLFxuICAgIG9uUmVtb3ZlLFxuICAgIHRpdGxlLFxuICAgIHpJbmRleFxuICB9ID0gcHJvcHNcblxuICBjb25zdCB0cmFuc2l0aW9uUmVmID0gdXNlUmVmKG51bGwpXG4gIGNvbnN0IFtpc1Nob3duLCBzZXRJc1Nob3duXSA9IHVzZVN0YXRlKHRydWUpXG4gIGNvbnN0IFtoZWlnaHQsIHNldEhlaWdodF0gPSB1c2VTdGF0ZSgwKVxuICBjb25zdCBjbG9zZVRpbWVyID0gdXNlUmVmKG51bGwpXG5cbiAgY29uc3QgY2xlYXJDbG9zZVRpbWVyID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChjbG9zZVRpbWVyLmN1cnJlbnQpIHtcbiAgICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpXG4gICAgICBjbG9zZVRpbWVyLmN1cnJlbnQgPSBudWxsXG4gICAgfVxuICB9LCBbXSlcblxuICBjb25zdCBjbG9zZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjbGVhckNsb3NlVGltZXIoKVxuICAgIHNldElzU2hvd24oZmFsc2UpXG4gIH0sIFtjbGVhckNsb3NlVGltZXJdKVxuXG4gIGNvbnN0IHN0YXJ0Q2xvc2VUaW1lciA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgIGNsZWFyQ2xvc2VUaW1lcigpXG4gICAgICBjbG9zZVRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xvc2UoKVxuICAgICAgfSwgZHVyYXRpb24gKiAxMDAwKVxuICAgIH1cbiAgfSwgW2R1cmF0aW9uLCBjbGVhckNsb3NlVGltZXIsIGNsb3NlXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHN0YXJ0Q2xvc2VUaW1lcigpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJDbG9zZVRpbWVyKClcbiAgICB9XG4gIH0sIFtzdGFydENsb3NlVGltZXIsIGNsZWFyQ2xvc2VUaW1lcl0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNTaG93blByb3AgIT09IGlzU2hvd24gJiYgdHlwZW9mIGlzU2hvd25Qcm9wID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHNldElzU2hvd24oaXNTaG93blByb3ApXG4gICAgfVxuICB9LCBbaXNTaG93biwgaXNTaG93blByb3BdKVxuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBjbGVhckNsb3NlVGltZXIoKSwgW2NsZWFyQ2xvc2VUaW1lcl0pXG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VDYWxsYmFjaygoKSA9PiBzdGFydENsb3NlVGltZXIoKSwgW3N0YXJ0Q2xvc2VUaW1lcl0pXG5cbiAgY29uc3Qgb25SZWYgPSB1c2VDYWxsYmFjayhyZWYgPT4ge1xuICAgIGlmIChyZWYgPT09IG51bGwpIHJldHVyblxuXG4gICAgY29uc3QgeyBoZWlnaHQ6IHJlY3RIZWlnaHQgfSA9IHJlZi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIHNldEhlaWdodChyZWN0SGVpZ2h0KVxuICB9LCBbXSlcblxuICBjb25zdCBzdHlsZXMgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBoZWlnaHQsXG4gICAgICB6SW5kZXgsXG4gICAgICBtYXJnaW5Cb3R0b206IGlzU2hvd24gPyAwIDogLWhlaWdodFxuICAgIH0pLFxuICAgIFtpc1Nob3duLCBoZWlnaHQsIHpJbmRleF1cbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPFRyYW5zaXRpb25cbiAgICAgIG5vZGVSZWY9e3RyYW5zaXRpb25SZWZ9XG4gICAgICBhcHBlYXJcbiAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgIHRpbWVvdXQ9e0FOSU1BVElPTl9EVVJBVElPTn1cbiAgICAgIGluPXtpc1Nob3dufVxuICAgICAgb25FeGl0ZWQ9e29uUmVtb3ZlfVxuICAgID5cbiAgICAgIHtzdGF0ZSA9PiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICByZWY9e3RyYW5zaXRpb25SZWZ9XG4gICAgICAgICAgZGF0YS1zdGF0ZT17c3RhdGV9XG4gICAgICAgICAgY2xhc3NOYW1lPXthbmltYXRpb25TdHlsZXN9XG4gICAgICAgICAgb25Nb3VzZUVudGVyPXtoYW5kbGVNb3VzZUVudGVyfVxuICAgICAgICAgIG9uTW91c2VMZWF2ZT17aGFuZGxlTW91c2VMZWF2ZX1cbiAgICAgICAgICBzdHlsZT17c3R5bGVzfVxuICAgICAgICA+XG4gICAgICAgICAgPEJveCByZWY9e29uUmVmfSBwYWRkaW5nPXs4fT5cbiAgICAgICAgICAgIDxBbGVydFxuICAgICAgICAgICAgICBmbGV4U2hyaW5rPXswfVxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiY2FyZFwiXG4gICAgICAgICAgICAgIGVsZXZhdGlvbj17M31cbiAgICAgICAgICAgICAgaW50ZW50PXtpbnRlbnR9XG4gICAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgICAgICAgaXNSZW1vdmVhYmxlPXtoYXNDbG9zZUJ1dHRvbn1cbiAgICAgICAgICAgICAgb25SZW1vdmU9e2Nsb3NlfVxuICAgICAgICAgICAgICBwb2ludGVyRXZlbnRzPVwiYWxsXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgPC9BbGVydD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvVHJhbnNpdGlvbj5cbiAgKVxufSlcblxuVG9hc3QucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIHotaW5kZXggb2YgdGhlIHRvYXN0LlxuICAgKi9cbiAgekluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBEdXJhdGlvbiBvZiB0aGUgdG9hc3QuXG4gICAqL1xuICBkdXJhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogRnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIHRvYXN0IGlzIGFsbCB0aGUgd2F5IGNsb3NlZC5cbiAgICovXG4gIG9uUmVtb3ZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGFsZXJ0LlxuICAgKi9cbiAgaW50ZW50OiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdkYW5nZXInXSksXG5cbiAgLyoqXG4gICAqIFRoZSB0aXRsZSBvZiB0aGUgYWxlcnQuXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIG9mIHRoZSBhbGVydC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogV2hlbiB0cnVlLCBzaG93IGEgY2xvc2UgaWNvbiBidXR0b24gaW5zaWRlIG9mIHRoZSB0b2FzdC5cbiAgICovXG4gIGhhc0Nsb3NlQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBmYWxzZSwgd2lsbCBjbG9zZSB0aGUgVG9hc3QgYW5kIGNhbGwgb25SZW1vdmUgd2hlbiBmaW5pc2hlZC5cbiAgICovXG4gIGlzU2hvd246IFByb3BUeXBlcy5ib29sXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvYXN0XG4iXX0=