"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("../../constants");

var _Toast = _interopRequireDefault(require("./Toast"));

var _excluded = ["description", "id"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var wrapperClass = (0, _glamor.css)({
  maxWidth: 560,
  margin: '0 auto',
  top: 0,
  left: 0,
  right: 0,
  position: 'fixed',
  zIndex: _constants.StackingOrder.TOASTER,
  pointerEvents: 'none'
});

var hasCustomId = function hasCustomId(settings) {
  return Object.hasOwnProperty.call(settings, 'id');
};

var ToastManager = /*#__PURE__*/(0, _react.memo)(function ToastManager(props) {
  var bindCloseAll = props.bindCloseAll,
      bindGetToasts = props.bindGetToasts,
      bindNotify = props.bindNotify,
      bindRemove = props.bindRemove;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      toasts = _useState2[0],
      setToasts = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      idCounter = _useState4[0],
      setIdCounter = _useState4[1];

  var getToasts = function getToasts() {
    return toasts;
  };

  var closeAll = function closeAll() {
    setToasts(toasts.map(function (toast) {
      return _objectSpread(_objectSpread({}, toast), {}, {
        isShown: false
      });
    }));
  };
  /**
   * This will set isShown on the Toast which will close the toast.
   * It won't remove the toast until onExited triggers onRemove.
   */


  var closeToast = function closeToast(id) {
    setToasts(toasts.map(function (toast) {
      if (toast.id === id) {
        return _objectSpread(_objectSpread({}, toast), {}, {
          isShown: false
        });
      }

      return toast;
    }));
  };

  var safeCloseToast = function safeCloseToast(id) {
    var toastToRemove = toasts.find(function (toast) {
      return String(toast.id).startsWith(id);
    });

    if (toastToRemove) {
      closeToast(toastToRemove.id);
    }
  };

  var removeToast = function removeToast(id) {
    var updatedToasts = toasts.filter(function (toast) {
      return !String(toast.id).startsWith(id);
    });
    setToasts(updatedToasts);
    return updatedToasts;
  };

  var createToastInstance = function createToastInstance(title, settings) {
    var uniqueId = idCounter;
    setIdCounter(idCounter + 1);
    var id = hasCustomId(settings) ? "".concat(settings.id, "-").concat(uniqueId) : uniqueId;
    return {
      id: id,
      title: title,
      description: settings.description,
      hasCloseButton: settings.hasCloseButton || true,
      duration: settings.duration || 5,
      close: function close() {
        return safeCloseToast(id);
      },
      intent: settings.intent
    };
  };

  var notify = function notify(title, settings) {
    var tempToasts = toasts;

    if (hasCustomId(settings)) {
      tempToasts = removeToast(settings.id);
    }

    var instance = createToastInstance(title, settings);
    setToasts([instance].concat((0, _toConsumableArray2["default"])(tempToasts)));
  };

  bindNotify(notify);
  bindRemove(safeCloseToast);
  bindGetToasts(getToasts);
  bindCloseAll(closeAll);
  return /*#__PURE__*/_react["default"].createElement("span", {
    className: wrapperClass
  }, toasts.map(function (_ref) {
    var description = _ref.description,
        id = _ref.id,
        rest = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
    return /*#__PURE__*/_react["default"].createElement(_Toast["default"], (0, _extends2["default"])({
      key: id,
      onRemove: function onRemove() {
        return removeToast(id);
      }
    }, rest), description);
  }));
});
ToastManager.propTypes = {
  /**
   * Function called with the `this.notify` function.
   */
  bindNotify: _propTypes["default"].func.isRequired,

  /**
   * Function called with the `this.remove` function.
   */
  bindRemove: _propTypes["default"].func.isRequired,

  /**
   * Function called with the `this.getToasts` function.
   */
  bindGetToasts: _propTypes["default"].func.isRequired,

  /**
   * Function called with the `this.closeAll` function.
   */
  bindCloseAll: _propTypes["default"].func.isRequired
};
var _default = ToastManager;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,