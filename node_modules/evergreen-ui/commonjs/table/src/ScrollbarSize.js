"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var noop = function noop() {};

var style = {
  position: 'fixed',
  top: -500,
  left: -500,
  width: 100,
  overflowY: 'scroll'
};
var ScrollbarSize = /*#__PURE__*/(0, _react.memo)(function ScrollbarSize(_ref) {
  var _ref$handleScrollbarS = _ref.handleScrollbarSize,
      handleScrollbarSize = _ref$handleScrollbarS === void 0 ? noop : _ref$handleScrollbarS;
  var innerRef = (0, _react.useRef)();
  var outerRef = (0, _react.useRef)();

  var _useState = (0, _react.useState)({
    innerWidth: null,
    outerWidth: null
  }),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      widths = _useState2[0],
      setWidths = _useState2[1];

  (0, _react.useEffect)(function () {
    var newWidths = {
      innerWidth: null,
      outerWidth: null
    };

    if (innerRef.current) {
      newWidths.innerWidth = innerRef.current.getBoundingClientRect().width;
    }

    if (outerRef.current) {
      newWidths.outerWidth = outerRef.current.getBoundingClientRect().width;
    }

    setWidths(newWidths);
  }, []);
  (0, _react.useEffect)(function () {
    if (widths.innerWidth && widths.outerWidth) {
      handleScrollbarSize(widths.outerWidth - widths.innerWidth);
    }
  }, [widths, handleScrollbarSize]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    ref: outerRef,
    "aria-hidden": true,
    style: style
  }, /*#__PURE__*/_react["default"].createElement("div", {
    ref: innerRef
  }));
});
ScrollbarSize.propTypes = {
  /**
   * Returns the size of the scrollbar by creating a hidden fixed div.
   */
  handleScrollbarSize: _propTypes["default"].func
};
var _default = ScrollbarSize;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvU2Nyb2xsYmFyU2l6ZS5qcyJdLCJuYW1lcyI6WyJub29wIiwic3R5bGUiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ3aWR0aCIsIm92ZXJmbG93WSIsIlNjcm9sbGJhclNpemUiLCJoYW5kbGVTY3JvbGxiYXJTaXplIiwiaW5uZXJSZWYiLCJvdXRlclJlZiIsImlubmVyV2lkdGgiLCJvdXRlcldpZHRoIiwid2lkdGhzIiwic2V0V2lkdGhzIiwibmV3V2lkdGhzIiwiY3VycmVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImZ1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsSUFBSSxHQUFHLFNBQVBBLElBQU8sR0FBTSxDQUFFLENBQXJCOztBQUNBLElBQU1DLEtBQUssR0FBRztBQUNaQyxFQUFBQSxRQUFRLEVBQUUsT0FERTtBQUVaQyxFQUFBQSxHQUFHLEVBQUUsQ0FBQyxHQUZNO0FBR1pDLEVBQUFBLElBQUksRUFBRSxDQUFDLEdBSEs7QUFJWkMsRUFBQUEsS0FBSyxFQUFFLEdBSks7QUFLWkMsRUFBQUEsU0FBUyxFQUFFO0FBTEMsQ0FBZDtBQVFBLElBQU1DLGFBQWEsZ0JBQUcsaUJBQUssU0FBU0EsYUFBVCxPQUF1RDtBQUFBLG1DQUE5QkMsbUJBQThCO0FBQUEsTUFBOUJBLG1CQUE4QixzQ0FBUlIsSUFBUTtBQUNoRixNQUFNUyxRQUFRLEdBQUcsb0JBQWpCO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLG9CQUFqQjs7QUFDQSxrQkFBNEIscUJBQVM7QUFBRUMsSUFBQUEsVUFBVSxFQUFFLElBQWQ7QUFBb0JDLElBQUFBLFVBQVUsRUFBRTtBQUFoQyxHQUFULENBQTVCO0FBQUE7QUFBQSxNQUFPQyxNQUFQO0FBQUEsTUFBZUMsU0FBZjs7QUFFQSx3QkFBVSxZQUFNO0FBQ2QsUUFBTUMsU0FBUyxHQUFHO0FBQUVKLE1BQUFBLFVBQVUsRUFBRSxJQUFkO0FBQW9CQyxNQUFBQSxVQUFVLEVBQUU7QUFBaEMsS0FBbEI7O0FBRUEsUUFBSUgsUUFBUSxDQUFDTyxPQUFiLEVBQXNCO0FBQ3BCRCxNQUFBQSxTQUFTLENBQUNKLFVBQVYsR0FBdUJGLFFBQVEsQ0FBQ08sT0FBVCxDQUFpQkMscUJBQWpCLEdBQXlDWixLQUFoRTtBQUNEOztBQUVELFFBQUlLLFFBQVEsQ0FBQ00sT0FBYixFQUFzQjtBQUNwQkQsTUFBQUEsU0FBUyxDQUFDSCxVQUFWLEdBQXVCRixRQUFRLENBQUNNLE9BQVQsQ0FBaUJDLHFCQUFqQixHQUF5Q1osS0FBaEU7QUFDRDs7QUFFRFMsSUFBQUEsU0FBUyxDQUFDQyxTQUFELENBQVQ7QUFDRCxHQVpELEVBWUcsRUFaSDtBQWNBLHdCQUFVLFlBQU07QUFDZCxRQUFJRixNQUFNLENBQUNGLFVBQVAsSUFBcUJFLE1BQU0sQ0FBQ0QsVUFBaEMsRUFBNEM7QUFDMUNKLE1BQUFBLG1CQUFtQixDQUFDSyxNQUFNLENBQUNELFVBQVAsR0FBb0JDLE1BQU0sQ0FBQ0YsVUFBNUIsQ0FBbkI7QUFDRDtBQUNGLEdBSkQsRUFJRyxDQUFDRSxNQUFELEVBQVNMLG1CQUFULENBSkg7QUFNQSxzQkFDRTtBQUFLLElBQUEsR0FBRyxFQUFFRSxRQUFWO0FBQW9CLHVCQUFwQjtBQUFnQyxJQUFBLEtBQUssRUFBRVQ7QUFBdkMsa0JBQ0U7QUFBSyxJQUFBLEdBQUcsRUFBRVE7QUFBVixJQURGLENBREY7QUFLRCxDQTlCcUIsQ0FBdEI7QUFnQ0FGLGFBQWEsQ0FBQ1csU0FBZCxHQUEwQjtBQUN4QjtBQUNGO0FBQ0E7QUFDRVYsRUFBQUEsbUJBQW1CLEVBQUVXLHNCQUFVQztBQUpQLENBQTFCO2VBT2ViLGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuY29uc3Qgc3R5bGUgPSB7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3A6IC01MDAsXG4gIGxlZnQ6IC01MDAsXG4gIHdpZHRoOiAxMDAsXG4gIG92ZXJmbG93WTogJ3Njcm9sbCdcbn1cblxuY29uc3QgU2Nyb2xsYmFyU2l6ZSA9IG1lbW8oZnVuY3Rpb24gU2Nyb2xsYmFyU2l6ZSh7IGhhbmRsZVNjcm9sbGJhclNpemUgPSBub29wIH0pIHtcbiAgY29uc3QgaW5uZXJSZWYgPSB1c2VSZWYoKVxuICBjb25zdCBvdXRlclJlZiA9IHVzZVJlZigpXG4gIGNvbnN0IFt3aWR0aHMsIHNldFdpZHRoc10gPSB1c2VTdGF0ZSh7IGlubmVyV2lkdGg6IG51bGwsIG91dGVyV2lkdGg6IG51bGwgfSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IG5ld1dpZHRocyA9IHsgaW5uZXJXaWR0aDogbnVsbCwgb3V0ZXJXaWR0aDogbnVsbCB9XG5cbiAgICBpZiAoaW5uZXJSZWYuY3VycmVudCkge1xuICAgICAgbmV3V2lkdGhzLmlubmVyV2lkdGggPSBpbm5lclJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgfVxuXG4gICAgaWYgKG91dGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIG5ld1dpZHRocy5vdXRlcldpZHRoID0gb3V0ZXJSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgIH1cblxuICAgIHNldFdpZHRocyhuZXdXaWR0aHMpXG4gIH0sIFtdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHdpZHRocy5pbm5lcldpZHRoICYmIHdpZHRocy5vdXRlcldpZHRoKSB7XG4gICAgICBoYW5kbGVTY3JvbGxiYXJTaXplKHdpZHRocy5vdXRlcldpZHRoIC0gd2lkdGhzLmlubmVyV2lkdGgpXG4gICAgfVxuICB9LCBbd2lkdGhzLCBoYW5kbGVTY3JvbGxiYXJTaXplXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtvdXRlclJlZn0gYXJpYS1oaWRkZW4gc3R5bGU9e3N0eWxlfT5cbiAgICAgIDxkaXYgcmVmPXtpbm5lclJlZn0gLz5cbiAgICA8L2Rpdj5cbiAgKVxufSlcblxuU2Nyb2xsYmFyU2l6ZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBzY3JvbGxiYXIgYnkgY3JlYXRpbmcgYSBoaWRkZW4gZml4ZWQgZGl2LlxuICAgKi9cbiAgaGFuZGxlU2Nyb2xsYmFyU2l6ZTogUHJvcFR5cGVzLmZ1bmNcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsYmFyU2l6ZVxuIl19