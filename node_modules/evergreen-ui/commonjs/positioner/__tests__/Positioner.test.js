"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _constants = require("../../constants");

var _getPosition = _interopRequireDefault(require("../src/getPosition"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var dimensions = function dimensions(overrides) {
  return _objectSpread({
    height: 100,
    width: 100
  }, overrides);
};

var targetRect = function targetRect(overrides) {
  return _objectSpread({
    x: 250,
    y: 150,
    width: 50,
    height: 30,
    top: 150,
    bottom: 150 - 30,
    left: 250,
    right: 200
  }, overrides);
};

var targetOffset = 6;

var viewport = function viewport(overrides) {
  return _objectSpread({
    height: 250,
    width: 850
  }, overrides);
};

describe('<Positioner />', function () {
  it('All positions work', function () {
    var generatedPositions = Object.values(_constants.Position).map(function (position) {
      return (0, _getPosition["default"])({
        position: position,
        dimensions: dimensions(),
        targetRect: targetRect(),
        targetOffset: targetOffset,
        viewport: viewport()
      });
    });
    expect(generatedPositions).toMatchSnapshot();
  });
  it('Position.LEFT repositions to the right', function () {
    expect((0, _getPosition["default"])({
      position: _constants.Position.LEFT,
      dimensions: dimensions({
        width: 350
      }),
      targetRect: targetRect(),
      targetOffset: targetOffset,
      viewport: viewport()
    }));
  });
  it('Position.RIGHT repositions to the left', function () {
    expect((0, _getPosition["default"])({
      position: _constants.Position.RIGHT,
      dimensions: dimensions({
        width: 250
      }),
      targetRect: targetRect({
        left: 800,
        x: 800,
        right: 850
      }),
      targetOffset: targetOffset,
      viewport: viewport()
    })).toMatchSnapshot();
  });
  it('Position.LEFT and Position.RIGHT will use the side with the most space', function () {
    expect((0, _getPosition["default"])({
      position: _constants.Position.LEFT,
      dimensions: dimensions({
        width: 250
      }),
      targetRect: targetRect({
        left: 50,
        x: 50,
        right: 100
      }),
      targetOffset: targetOffset,
      viewport: viewport({
        width: 300
      })
    })).toMatchSnapshot();
  });
  it('Position.TOP repositions to the bottom', function () {
    expect((0, _getPosition["default"])({
      position: _constants.Position.TOP,
      dimensions: dimensions({
        height: 250
      }),
      targetRect: targetRect({
        top: 20,
        y: 20
      }),
      targetOffset: targetOffset,
      viewport: viewport()
    })).toMatchSnapshot();
  });
  it('Position.BOTTOM repositions to the top', function () {
    expect((0, _getPosition["default"])({
      position: _constants.Position.BOTTOM,
      dimensions: dimensions({
        height: 250
      }),
      targetRect: targetRect({
        top: 290,
        y: 290,
        bottom: 295,
        height: 5
      }),
      targetOffset: targetOffset,
      viewport: viewport({
        height: 300
      })
    })).toMatchSnapshot();
  });
  it('It pushes the rect to the right if overflowing on the left side', function () {
    expect((0, _getPosition["default"])({
      position: _constants.Position.BOTTOM,
      dimensions: dimensions({
        width: 250,
        height: 110
      }),
      targetRect: targetRect({
        left: 10,
        x: 10,
        top: 10,
        y: 10,
        bottom: 20
      }),
      targetOffset: targetOffset,
      viewport: viewport()
    })).toMatchSnapshot();
  });
  it('It pushes the rect to the top if overflowing on the bottom side', function () {
    expect((0, _getPosition["default"])({
      position: _constants.Position.TOP,
      dimensions: dimensions({
        width: 50,
        height: 100
      }),
      targetRect: targetRect({
        left: 100,
        x: 100,
        top: 550,
        y: 550
      }),
      targetOffset: targetOffset,
      viewport: viewport({
        height: 500
      })
    })).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wb3NpdGlvbmVyL19fdGVzdHNfXy9Qb3NpdGlvbmVyLnRlc3QuanMiXSwibmFtZXMiOlsiZGltZW5zaW9ucyIsIm92ZXJyaWRlcyIsImhlaWdodCIsIndpZHRoIiwidGFyZ2V0UmVjdCIsIngiLCJ5IiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwidGFyZ2V0T2Zmc2V0Iiwidmlld3BvcnQiLCJkZXNjcmliZSIsIml0IiwiZ2VuZXJhdGVkUG9zaXRpb25zIiwiT2JqZWN0IiwidmFsdWVzIiwiUG9zaXRpb24iLCJtYXAiLCJwb3NpdGlvbiIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsIkxFRlQiLCJSSUdIVCIsIlRPUCIsIkJPVFRPTSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUFDLFNBQVM7QUFBQTtBQUMxQkMsSUFBQUEsTUFBTSxFQUFFLEdBRGtCO0FBRTFCQyxJQUFBQSxLQUFLLEVBQUU7QUFGbUIsS0FHdkJGLFNBSHVCO0FBQUEsQ0FBNUI7O0FBTUEsSUFBTUcsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQUgsU0FBUztBQUFBO0FBQzFCSSxJQUFBQSxDQUFDLEVBQUUsR0FEdUI7QUFFMUJDLElBQUFBLENBQUMsRUFBRSxHQUZ1QjtBQUcxQkgsSUFBQUEsS0FBSyxFQUFFLEVBSG1CO0FBSTFCRCxJQUFBQSxNQUFNLEVBQUUsRUFKa0I7QUFLMUJLLElBQUFBLEdBQUcsRUFBRSxHQUxxQjtBQU0xQkMsSUFBQUEsTUFBTSxFQUFFLE1BQU0sRUFOWTtBQU8xQkMsSUFBQUEsSUFBSSxFQUFFLEdBUG9CO0FBUTFCQyxJQUFBQSxLQUFLLEVBQUU7QUFSbUIsS0FTdkJULFNBVHVCO0FBQUEsQ0FBNUI7O0FBWUEsSUFBTVUsWUFBWSxHQUFHLENBQXJCOztBQUVBLElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUFYLFNBQVM7QUFBQTtB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Li4vY29uc3RhbnRzJ1xuaW1wb3J0IGdldEZpdHRlZFBvc2l0aW9uIGZyb20gJy4uL3NyYy9nZXRQb3NpdGlvbidcblxuY29uc3QgZGltZW5zaW9ucyA9IG92ZXJyaWRlcyA9PiAoe1xuICBoZWlnaHQ6IDEwMCxcbiAgd2lkdGg6IDEwMCxcbiAgLi4ub3ZlcnJpZGVzXG59KVxuXG5jb25zdCB0YXJnZXRSZWN0ID0gb3ZlcnJpZGVzID0+ICh7XG4gIHg6IDI1MCxcbiAgeTogMTUwLFxuICB3aWR0aDogNTAsXG4gIGhlaWdodDogMzAsXG4gIHRvcDogMTUwLFxuICBib3R0b206IDE1MCAtIDMwLFxuICBsZWZ0OiAyNTAsXG4gIHJpZ2h0OiAyMDAsXG4gIC4uLm92ZXJyaWRlc1xufSlcblxuY29uc3QgdGFyZ2V0T2Zmc2V0ID0gNlxuXG5jb25zdCB2aWV3cG9ydCA9IG92ZXJyaWRlcyA9PiAoe1xuICBoZWlnaHQ6IDI1MCxcbiAgd2lkdGg6IDg1MCxcbiAgLi4ub3ZlcnJpZGVzXG59KVxuXG5kZXNjcmliZSgnPFBvc2l0aW9uZXIgLz4nLCAoKSA9PiB7XG4gIGl0KCdBbGwgcG9zaXRpb25zIHdvcmsnLCAoKSA9PiB7XG4gICAgY29uc3QgZ2VuZXJhdGVkUG9zaXRpb25zID0gT2JqZWN0LnZhbHVlcyhQb3NpdGlvbikubWFwKHBvc2l0aW9uID0+XG4gICAgICBnZXRGaXR0ZWRQb3NpdGlvbih7XG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zKCksXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QoKSxcbiAgICAgICAgdGFyZ2V0T2Zmc2V0LFxuICAgICAgICB2aWV3cG9ydDogdmlld3BvcnQoKVxuICAgICAgfSlcbiAgICApXG4gICAgZXhwZWN0KGdlbmVyYXRlZFBvc2l0aW9ucykudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdCgnUG9zaXRpb24uTEVGVCByZXBvc2l0aW9ucyB0byB0aGUgcmlnaHQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgZ2V0Rml0dGVkUG9zaXRpb24oe1xuICAgICAgICBwb3NpdGlvbjogUG9zaXRpb24uTEVGVCxcbiAgICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyh7IHdpZHRoOiAzNTAgfSksXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QoKSxcbiAgICAgICAgdGFyZ2V0T2Zmc2V0LFxuICAgICAgICB2aWV3cG9ydDogdmlld3BvcnQoKVxuICAgICAgfSlcbiAgICApXG4gIH0pXG5cbiAgaXQoJ1Bvc2l0aW9uLlJJR0hUIHJlcG9zaXRpb25zIHRvIHRoZSBsZWZ0JywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIGdldEZpdHRlZFBvc2l0aW9uKHtcbiAgICAgICAgcG9zaXRpb246IFBvc2l0aW9uLlJJR0hULFxuICAgICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zKHsgd2lkdGg6IDI1MCB9KSxcbiAgICAgICAgdGFyZ2V0UmVjdDogdGFyZ2V0UmVjdCh7IGxlZnQ6IDgwMCwgeDogODAwLCByaWdodDogODUwIH0pLFxuICAgICAgICB0YXJnZXRPZmZzZXQsXG4gICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCgpXG4gICAgICB9KVxuICAgICkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdCgnUG9zaXRpb24uTEVGVCBhbmQgUG9zaXRpb24uUklHSFQgd2lsbCB1c2UgdGhlIHNpZGUgd2l0aCB0aGUgbW9zdCBzcGFjZScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICBnZXRGaXR0ZWRQb3NpdGlvbih7XG4gICAgICAgIHBvc2l0aW9uOiBQb3NpdGlvbi5MRUZULFxuICAgICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zKHsgd2lkdGg6IDI1MCB9KSxcbiAgICAgICAgdGFyZ2V0UmVjdDogdGFyZ2V0UmVjdCh7IGxlZnQ6IDUwLCB4OiA1MCwgcmlnaHQ6IDEwMCB9KSxcbiAgICAgICAgdGFyZ2V0T2Zmc2V0LFxuICAgICAgICB2aWV3cG9ydDogdmlld3BvcnQoeyB3aWR0aDogMzAwIH0pXG4gICAgICB9KVxuICAgICkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdCgnUG9zaXRpb24uVE9QIHJlcG9zaXRpb25zIHRvIHRoZSBib3R0b20nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgZ2V0Rml0dGVkUG9zaXRpb24oe1xuICAgICAgICBwb3NpdGlvbjogUG9zaXRpb24uVE9QLFxuICAgICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zKHsgaGVpZ2h0OiAyNTAgfSksXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QoeyB0b3A6IDIwLCB5OiAyMCB9KSxcbiAgICAgICAgdGFyZ2V0T2Zmc2V0LFxuICAgICAgICB2aWV3cG9ydDogdmlld3BvcnQoKVxuICAgICAgfSlcbiAgICApLnRvTWF0Y2hTbmFwc2hvdCgpXG4gIH0pXG5cbiAgaXQoJ1Bvc2l0aW9uLkJPVFRPTSByZXBvc2l0aW9ucyB0byB0aGUgdG9wJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIGdldEZpdHRlZFBvc2l0aW9uKHtcbiAgICAgICAgcG9zaXRpb246IFBvc2l0aW9uLkJPVFRPTSxcbiAgICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyh7IGhlaWdodDogMjUwIH0pLFxuICAgICAgICB0YXJnZXRSZWN0OiB0YXJnZXRSZWN0KHsgdG9wOiAyOTAsIHk6IDI5MCwgYm90dG9tOiAyOTUsIGhlaWdodDogNSB9KSxcbiAgICAgICAgdGFyZ2V0T2Zmc2V0LFxuICAgICAgICB2aWV3cG9ydDogdmlld3BvcnQoeyBoZWlnaHQ6IDMwMCB9KVxuICAgICAgfSlcbiAgICApLnRvTWF0Y2hTbmFwc2hvdCgpXG4gIH0pXG5cbiAgaXQoJ0l0IHB1c2hlcyB0aGUgcmVjdCB0byB0aGUgcmlnaHQgaWYgb3ZlcmZsb3dpbmcgb24gdGhlIGxlZnQgc2lkZScsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICBnZXRGaXR0ZWRQb3NpdGlvbih7XG4gICAgICAgIHBvc2l0aW9uOiBQb3NpdGlvbi5CT1RUT00sXG4gICAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMoeyB3aWR0aDogMjUwLCBoZWlnaHQ6IDExMCB9KSxcbiAgICAgICAgdGFyZ2V0UmVjdDogdGFyZ2V0UmVjdCh7IGxlZnQ6IDEwLCB4OiAxMCwgdG9wOiAxMCwgeTogMTAsIGJvdHRvbTogMjAgfSksXG4gICAgICAgIHRhcmdldE9mZnNldCxcbiAgICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0KClcbiAgICAgIH0pXG4gICAgKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIGl0KCdJdCBwdXNoZXMgdGhlIHJlY3QgdG8gdGhlIHRvcCBpZiBvdmVyZmxvd2luZyBvbiB0aGUgYm90dG9tIHNpZGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgZ2V0Rml0dGVkUG9zaXRpb24oe1xuICAgICAgICBwb3NpdGlvbjogUG9zaXRpb24uVE9QLFxuICAgICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zKHsgd2lkdGg6IDUwLCBoZWlnaHQ6IDEwMCB9KSxcbiAgICAgICAgdGFyZ2V0UmVjdDogdGFyZ2V0UmVjdCh7IGxlZnQ6IDEwMCwgeDogMTAwLCB0b3A6IDU1MCwgeTogNTUwIH0pLFxuICAgICAgICB0YXJnZXRPZmZzZXQsXG4gICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCh7IGhlaWdodDogNTAwIH0pXG4gICAgICB9KVxuICAgICkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcbn0pXG4iXX0=