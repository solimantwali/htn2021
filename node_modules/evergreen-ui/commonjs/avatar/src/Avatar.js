"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireDefault(require("ui-box"));

var _hooks = require("../../hooks");

var _image = require("../../image");

var _typography = require("../../typography");

var _getInitials = _interopRequireDefault(require("./utils/getInitials"));

var _hash = _interopRequireDefault(require("./utils/hash"));

var _excluded = ["className", "color", "forceShowInitials", "getInitials", "hashValue", "name", "shape", "size", "sizeLimitOneCharacter", "src"],
    _excluded2 = ["className"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var imageStyles = {
  objectFit: 'cover'
};
var pseudoSelectors = {};
var internalStyles = {
  overflow: 'hidden',
  position: 'relative',
  display: 'inline-flex',
  flexShrink: 0,
  justifyContent: 'center'
};
var isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style;
var initialsStyleClass = (0, _glamor.css)({
  top: 0,
  position: 'absolute',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  lineHeight: 1
}).toString();

var getAvatarInitialsFontSize = function getAvatarInitialsFontSize(size, sizeLimitOneCharacter) {
  if (size <= sizeLimitOneCharacter) {
    return Math.floor(size / 2.2);
  }

  return Math.floor(size / 2.6);
};

var Avatar = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Avatar(props, ref) {
  var className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'automatic' : _props$color,
      _props$forceShowIniti = props.forceShowInitials,
      forceShowInitials = _props$forceShowIniti === void 0 ? false : _props$forceShowIniti,
      _props$getInitials = props.getInitials,
      getInitials = _props$getInitials === void 0 ? _getInitials["default"] : _props$getInitials,
      propsHashValue = props.hashValue,
      name = props.name,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'round' : _props$shape,
      _props$size = props.size,
      size = _props$size === void 0 ? 24 : _props$size,
      _props$sizeLimitOneCh = props.sizeLimitOneCharacter,
      sizeLimitOneCharacter = _props$sizeLimitOneCh === void 0 ? 20 : _props$sizeLimitOneCh,
      src = props.src,
      restProps = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var hashValue = (0, _hash["default"])(propsHashValue || name);

  var _useStyleConfig = (0, _hooks.useStyleConfig)('Avatar', {
    color: color,
    hashValue: hashValue,
    shape: shape
  }, pseudoSelectors, internalStyles),
      themedClassName = _useStyleConfig.className,
      styleProps = (0, _objectWithoutProperties2["default"])(_useStyleConfig, _excluded2);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      imageHasFailedLoading = _useState2[0],
      setImageHasFailedLoading = _useState2[1];

  var onError = (0, _react.useCallback)(function () {
    return setImageHasFailedLoading(true);
  }, []);
  var imageUnavailable = !src || imageHasFailedLoading;
  var initialsFontSize = "".concat(getAvatarInitialsFontSize(size, sizeLimitOneCharacter), "px");
  var initials = getInitials(name);

  if (size <= sizeLimitOneCharacter) {
    initials = initials.slice(0, 1);
  }

  return /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
    width: size,
    height: size,
    title: name,
    ref: ref,
    className: (0, _classnames["default"])(className, themedClassName)
  }, styleProps, restProps), (imageUnavailable || forceShowInitials) && /*#__PURE__*/_react["default"].createElement(_typography.Text, {
    className: initialsStyleClass,
    fontSize: initialsFontSize,
    lineHeight: initialsFontSize,
    width: size,
    height: size,
    color: "inherit"
  }, initials), !imageUnavailable && /*#__PURE__*/_react["default"].createElement(_image.Image, {
    style: imageStyles // Unsupported by ui-box directly
    ,
    width: isObjectFitSupported ? '100%' : 'auto' // Fallback to old behaviour on IE
    ,
    height: "100%",
    src: src,
    onError: onError
  }));
}));
Avatar.propTypes = {
  /**
   * Class name passed to the component.
   * Only use if you know what you are doing.
   */
  className: _propTypes["default"].string,

  /**
   * The src attribute of the image.
   * When it's not available, render initials instead.
   */
  src: _propTypes["default"].string,

  /**
   * The size of the avatar.
   */
  size: _propTypes["default"].number,

  /**
   * The name used for the initials and title attribute.
   */
  name: _propTypes["default"].string,

  /**
   * The value used for the hash function.
   * The name is used as the hashValue by default.
   * When dealing with anonymous users you should use the id instead.
   */
  hashValue: _propTypes["default"].string,

  /**
   * The color used for the avatar.
   * When the value is `automatic`, use the hash function to determine the color.
   */
  color: _propTypes["default"].string,

  /**
   * Function to get the initials based on the name.
   */
  getInitials: _propTypes["default"].func,

  /**
   * When true, force show the initials.
   * This is useful in some cases when using Gravatar and transparent pngs.
   */
  forceShowInitials: _propTypes["default"].bool,

  /**
   * When the size is smaller than this number, use a single initial for the avatar.
   */
  sizeLimitOneCharacter: _propTypes["default"].number,

  /**
   * Allows for the shape of the avatar component to either be round or square
   */
  shape: _propTypes["default"].oneOf(['round', 'square'])
};
var _default = Avatar;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,