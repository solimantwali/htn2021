"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = require("ui-box");

var _buttons = require("../../buttons");

var _group = require("../../group");

var _hooks = require("../../hooks");

var _safeInvoke = _interopRequireDefault(require("../../lib/safe-invoke"));

var _warning = _interopRequireDefault(require("../../lib/warning"));

var _excluded = ["defaultValue", "disabled", "height", "name", "onChange", "options", "size", "value"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isControlled(value) {
  return typeof value !== 'undefined' && value !== null;
}

var SegmentedControl = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function SegmentedControl(props, ref) {
  var defaultValue = props.defaultValue,
      disabled = props.disabled,
      height = props.height,
      name = props.name,
      onChange = props.onChange,
      options = props.options,
      size = props.size,
      value = props.value,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var groupName = (0, _hooks.useId)('SegmentedControl');

  if (process.env.NODE_ENV !== 'production') {
    (0, _warning["default"])(true, '<SegmentedControl> is deprecated and will be removed in the next major verison of Evergreen. Prefer Tabs for navigational elements, or form components / button groups for other use cases.');
  }

  var getDefaultValue = function getDefaultValue() {
    if (isControlled(value)) {
      return value;
    }

    return typeof defaultValue !== 'undefined' && defaultValue !== null ? defaultValue : options[0].value;
  };

  var _useState = (0, _react.useState)(getDefaultValue()),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      activeValue = _useState2[0],
      setActiveValue = _useState2[1];

  (0, _react.useEffect)(function () {
    if (isControlled(value)) {
      setActiveValue(value);
    }
  }, [value]);
  var handleChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    var newValue = event.target.value; // Save a render cycle when it's a controlled input

    if (!isControlled(value)) {
      setActiveValue(newValue);
    }

    (0, _safeInvoke["default"])(onChange, newValue);
  }, [value, onChange]);
  return /*#__PURE__*/_react["default"].createElement(_group.Group, (0, _extends2["default"])({
    ref: ref,
    display: "flex"
  }, rest), options.map(function (option, index) {
    return /*#__PURE__*/_react["default"].createElement(_buttons.Button, {
      key: option.value,
      id: groupName + index,
      name: name || groupName,
      value: String(option.value),
      disabled: disabled,
      size: size,
      height: height,
      isActive: activeValue === String(option.value),
      onClick: handleChange,
      flex: "1"
    }, option.label);
  }));
}));
SegmentedControl.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _uiBox.spacing.propTypes), _uiBox.position.propTypes), _uiBox.layout.propTypes), _uiBox.dimensions.propTypes), {}, {
  /**
   * The options for the radios of the Segmented Control.
   */
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].node.isRequired,
    value: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].bool]).isRequired
  })).isRequired,

  /**
   * The current value of the Segmented Control when controlled.
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].bool]),

  /**
   * The default value of the Segmented Control when uncontrolled.
   */
  defaultValue: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].bool]),

  /**
   * Function called when the value changes.
   */
  onChange: _propTypes["default"].func,

  /**
   * The name of the radio group.
   */
  name: _propTypes["default"].string,

  /**
   * The size of the Segmented Control.
   */
  size: _propTypes["default"].oneOf(['small', 'medium', 'large']),

  /**
   * When true, the Segmented Control is disabled.
   */
  disabled: _propTypes["default"].bool
});
var _default = SegmentedControl;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWdtZW50ZWQtY29udHJvbC9zcmMvU2VnbWVudGVkQ29udHJvbC5qcyJdLCJuYW1lcyI6WyJpc0NvbnRyb2xsZWQiLCJ2YWx1ZSIsIlNlZ21lbnRlZENvbnRyb2wiLCJwcm9wcyIsInJlZiIsImRlZmF1bHRWYWx1ZSIsImRpc2FibGVkIiwiaGVpZ2h0IiwibmFtZSIsIm9uQ2hhbmdlIiwib3B0aW9ucyIsInNpemUiLCJyZXN0IiwiZ3JvdXBOYW1lIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZ2V0RGVmYXVsdFZhbHVlIiwiYWN0aXZlVmFsdWUiLCJzZXRBY3RpdmVWYWx1ZSIsImhhbmRsZUNoYW5nZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJuZXdWYWx1ZSIsInRhcmdldCIsIm1hcCIsIm9wdGlvbiIsImluZGV4IiwiU3RyaW5nIiwibGFiZWwiLCJwcm9wVHlwZXMiLCJzcGFjaW5nIiwicG9zaXRpb24iLCJsYXlvdXQiLCJkaW1lbnNpb25zIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsInNoYXBlIiwibm9kZSIsImlzUmVxdWlyZWQiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIm9uZU9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQzNCLFNBQU8sT0FBT0EsS0FBUCxLQUFpQixXQUFqQixJQUFnQ0EsS0FBSyxLQUFLLElBQWpEO0FBQ0Q7O0FBRUQsSUFBTUMsZ0JBQWdCLGdCQUFHLCtCQUN2Qix1QkFBVyxTQUFTQSxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUNDLEdBQWpDLEVBQXNDO0FBQy9DLE1BQVFDLFlBQVIsR0FBMEZGLEtBQTFGLENBQVFFLFlBQVI7QUFBQSxNQUFzQkMsUUFBdEIsR0FBMEZILEtBQTFGLENBQXNCRyxRQUF0QjtBQUFBLE1BQWdDQyxNQUFoQyxHQUEwRkosS0FBMUYsQ0FBZ0NJLE1BQWhDO0FBQUEsTUFBd0NDLElBQXhDLEdBQTBGTCxLQUExRixDQUF3Q0ssSUFBeEM7QUFBQSxNQUE4Q0MsUUFBOUMsR0FBMEZOLEtBQTFGLENBQThDTSxRQUE5QztBQUFBLE1BQXdEQyxPQUF4RCxHQUEwRlAsS0FBMUYsQ0FBd0RPLE9BQXhEO0FBQUEsTUFBaUVDLElBQWpFLEdBQTBGUixLQUExRixDQUFpRVEsSUFBakU7QUFBQSxNQUF1RVYsS0FBdkUsR0FBMEZFLEtBQTFGLENBQXVFRixLQUF2RTtBQUFBLE1BQWlGVyxJQUFqRiw2Q0FBMEZULEtBQTFGO0FBRUEsTUFBTVUsU0FBUyxHQUFHLGtCQUFNLGtCQUFOLENBQWxCOztBQUVBLE1BQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDLDZCQUNFLElBREYsRUFFRSw2TEFGRjtBQUlEOztBQUVELE1BQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsR0FBTTtBQUM1QixRQUFJakIsWUFBWSxDQUFDQyxLQUFELENBQWhCLEVBQXlCO0FBQ3ZCLGFBQU9BLEtBQVA7QUFDRDs7QUFFRCxXQUFPLE9BQU9JLFlBQVAsS0FBd0IsV0FBeEIsSUFBdUNBLFlBQVksS0FBSyxJQUF4RCxHQUErREEsWUFBL0QsR0FBOEVLLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV1QsS0FBaEc7QUFDRCxHQU5EOztBQVFBLGtCQUFzQyxxQkFBU2dCLGVBQWUsRUFBeEIsQ0FBdEM7QUFBQTtBQUFBLE1BQU9DLFdBQVA7QUFBQSxNQUFvQkMsY0FBcEI7O0FBRUEsd0JBQVUsWUFBTTtBQUNkLFFBQUluQixZQUFZLENBQUNDLEtBQUQsQ0FBaEIsRUFBeUI7QUFDdkJrQixNQUFBQSxjQUFjLENBQUNsQixLQUFELENBQWQ7QUFDRDtBQUNGLEdBSkQsRUFJRyxDQUFDQSxLQUFELENBSkg7QUFNQSxNQUFNbUIsWUFBWSxHQUFHLHdCQUNuQixVQUFBQyxLQUFLLEVBQUk7QUFDUEEsSUFBQUEsS0FBSyxDQUFDQyxjQUFOO0FBQ0EsUUFBTUMsUUFBUSxHQUFHRixLQUFLLENBQUNHLE1BQU4sQ0FBYXZCLEtBQTlCLENBRk8sQ0FJUDs7QUFDQSxRQUFJLENBQUNELFlBQVksQ0FBQ0MsS0FBRCxDQUFqQixFQUEwQjtBQUN4QmtCLE1BQUFBLGNBQWMsQ0FBQ0ksUUFBRCxDQUFkO0FBQ0Q7O0FBRUQsZ0NBQVdkLFFBQVgsRUFBcUJjLFFBQXJCO0FBQ0QsR0FYa0IsRUFZbkIsQ0FBQ3RCLEtBQUQsRUFBUVEsUUFBUixDQVptQixDQUFyQjtBQWVBLHNCQUNFLGdDQUFDLFlBQUQ7QUFBTyxJQUFBLEdBQUcsRUFBRUwsR0FBWjtBQUFpQixJQUFBLE9BQU8sRUFBQztBQUF6QixLQUFvQ1EsSUFBcEMsR0FDR0YsT0FBTyxDQUFDZSxHQUFSLENBQVksVUFBQ0MsTUFBRCxFQUFTQyxLQUFUO0FBQUEsd0JBQ1gsZ0NBQUMsZUFBRDtBQUNFLE1BQUEsR0FBRyxFQUFFRCxNQUFNLENBQUN6QixLQURkO0FBRUUsTUFBQSxFQUFFLEVBQUVZLFNBQVMsR0FBR2MsS0FGbEI7QUFHRSxNQUFBLElBQUksRUFBRW5CLElBQUksSUFBSUssU0FIaEI7QUFJRSxNQUFBLEtBQUssRUFBRWUsTUFBTSxDQUFDRixNQUFNLENBQUN6QixLQUFSLENBSmY7QUFLRSxNQUFBLFFBQVEsRUFBRUssUUFMWjtBQU1FLE1BQUEsSUFBSSxFQUFFSyxJQU5SO0FBT0UsTUFBQSxNQUFNLEVBQUVKLE1BUFY7QUFRRSxNQUFBLFFBQVEsRUFBRVcsV0FBVyxLQUFLVSxNQUFNLENBQUNGLE1BQU0sQ0FBQ3pCLEtBQVIsQ0FSbEM7QUFTRSxNQUFBLE9BQU8sRUFBRW1CLFlBVFg7QUFVRSxNQUFBLElBQUksRUFBQztBQVZQLE9BWUdNLE1BQU0sQ0FBQ0csS0FaVixDQURXO0FBQUEsR0FBWixDQURILENBREY7QUFvQkQsQ0EvREQsQ0FEdUIsQ0FBekI7QUFtRUEzQixnQkFBZ0IsQ0FBQzRCLFNBQWpCLDZFQUlLQyxlQUFRRCxTQUpiLEdBS0tFLGdCQUFTRixTQUxkLEdBTUtHLGNBQU9ILFNBTlosR0FPS0ksa0JBQVdKLFNBUGhCO0FBU0U7QUFDRjtBQUNBO0FBQ0VwQixFQUFBQSxPQUFPLEVBQUV5QixzQkFBVUMsT0FBVixDQUNQRCxzQkFBVUUsS0FBVixDQUFnQjtBQUNkUixJQUFBQSxLQUFLLEVBQUVNLHNCQUFVRyxJQUFWLENBQWVDLFVBRFI7QUFFZHRDLElBQUFBLEtBQUssRUFBRWtDLHNCQUFVSyxTQUFWLENBQW9CLENBQUNMLHNCQUFVTSxNQUFYLEVBQW1CTixzQkFBVU8sTUFBN0IsRUFBcUNQLHNCQUFVUSxJQUEvQyxDQUFwQixFQUEwRUo7QUFGbkUsR0FBaEIsQ0FETyxFQUtQQSxVQWpCSjs7QUFtQkU7QUFDRjtBQUNBO0FBQ0V0QyxFQUFBQSxLQUFLLEVBQUVrQyxzQkFBVUssU0FBVixDQUFvQixDQUFDTCxzQkFBVU0sTUFBWCxFQUFtQk4sc0JBQVVPLE1BQTdCLEVBQXFDUCxzQkFBVVEsSUFBL0MsQ0FBcEIsQ0F0QlQ7O0FBd0JFO0FBQ0Y7QUFDQTtBQUNFdEMsRUFBQUEsWUFBWSxFQUFFOEIsc0JBQVVLLFNBQVYsQ0FBb0IsQ0FBQ0wsc0JBQVVNLE1BQVgsRUFBbUJOLHNCQUFVTyxNQUE3QixFQUFxQ1Asc0JBQVVRLElBQS9DLENBQXBCLENBM0JoQjs7QUE2QkU7QUFDRjtBQUNBO0FBQ0VsQyxFQUFBQSxRQUFRLEVBQUUwQixzQkFBVVMsSUFoQ3RCOztBQWtDRTtBQUNGO0FBQ0E7QUFDRXBDLEVBQUFBLElBQUksRUFBRTJCLHNCQUFVTyxNQXJDbEI7O0FBdUNFO0FBQ0Y7QUFDQTtBQUNFL0IsRUFBQUEsSUFBSSxFQUFFd0Isc0JBQVVVLEtBQVYsQ0FBZ0IsQ0FBQyxPQUFELEVBQVUsUUFBVixFQUFvQixPQUFwQixDQUFoQixDQTFDUjs7QUE0Q0U7QUFDRjtBQUNBO0FBQ0V2QyxFQUFBQSxRQUFRLEVBQUU2QixzQkFBVVE7QUEvQ3RCO2VBa0RlekMsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgZm9yd2FyZFJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHNwYWNpbmcsIHBvc2l0aW9uLCBsYXlvdXQsIGRpbWVuc2lvbnMgfSBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi8uLi9idXR0b25zJ1xuaW1wb3J0IHsgR3JvdXAgfSBmcm9tICcuLi8uLi9ncm91cCdcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnLi4vLi4vaG9va3MnXG5pbXBvcnQgc2FmZUludm9rZSBmcm9tICcuLi8uLi9saWIvc2FmZS1pbnZva2UnXG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi8uLi9saWIvd2FybmluZydcblxuZnVuY3Rpb24gaXNDb250cm9sbGVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsXG59XG5cbmNvbnN0IFNlZ21lbnRlZENvbnRyb2wgPSBtZW1vKFxuICBmb3J3YXJkUmVmKGZ1bmN0aW9uIFNlZ21lbnRlZENvbnRyb2wocHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHsgZGVmYXVsdFZhbHVlLCBkaXNhYmxlZCwgaGVpZ2h0LCBuYW1lLCBvbkNoYW5nZSwgb3B0aW9ucywgc2l6ZSwgdmFsdWUsIC4uLnJlc3QgfSA9IHByb3BzXG5cbiAgICBjb25zdCBncm91cE5hbWUgPSB1c2VJZCgnU2VnbWVudGVkQ29udHJvbCcpXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgJzxTZWdtZW50ZWRDb250cm9sPiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyaXNvbiBvZiBFdmVyZ3JlZW4uIFByZWZlciBUYWJzIGZvciBuYXZpZ2F0aW9uYWwgZWxlbWVudHMsIG9yIGZvcm0gY29tcG9uZW50cyAvIGJ1dHRvbiBncm91cHMgZm9yIG90aGVyIHVzZSBjYXNlcy4nXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0RGVmYXVsdFZhbHVlID0gKCkgPT4ge1xuICAgICAgaWYgKGlzQ29udHJvbGxlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0eXBlb2YgZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiBkZWZhdWx0VmFsdWUgIT09IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBvcHRpb25zWzBdLnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgW2FjdGl2ZVZhbHVlLCBzZXRBY3RpdmVWYWx1ZV0gPSB1c2VTdGF0ZShnZXREZWZhdWx0VmFsdWUoKSlcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkKHZhbHVlKSkge1xuICAgICAgICBzZXRBY3RpdmVWYWx1ZSh2YWx1ZSlcbiAgICAgIH1cbiAgICB9LCBbdmFsdWVdKVxuXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgICBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBldmVudC50YXJnZXQudmFsdWVcblxuICAgICAgICAvLyBTYXZlIGEgcmVuZGVyIGN5Y2xlIHdoZW4gaXQncyBhIGNvbnRyb2xsZWQgaW5wdXRcbiAgICAgICAgaWYgKCFpc0NvbnRyb2xsZWQodmFsdWUpKSB7XG4gICAgICAgICAgc2V0QWN0aXZlVmFsdWUobmV3VmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICBzYWZlSW52b2tlKG9uQ2hhbmdlLCBuZXdWYWx1ZSlcbiAgICAgIH0sXG4gICAgICBbdmFsdWUsIG9uQ2hhbmdlXVxuICAgIClcblxuICAgIHJldHVybiAoXG4gICAgICA8R3JvdXAgcmVmPXtyZWZ9IGRpc3BsYXk9XCJmbGV4XCIgey4uLnJlc3R9PlxuICAgICAgICB7b3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IChcbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBrZXk9e29wdGlvbi52YWx1ZX1cbiAgICAgICAgICAgIGlkPXtncm91cE5hbWUgKyBpbmRleH1cbiAgICAgICAgICAgIG5hbWU9e25hbWUgfHwgZ3JvdXBOYW1lfVxuICAgICAgICAgICAgdmFsdWU9e1N0cmluZyhvcHRpb24udmFsdWUpfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgc2l6ZT17c2l6ZX1cbiAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgICAgaXNBY3RpdmU9e2FjdGl2ZVZhbHVlID09PSBTdHJpbmcob3B0aW9uLnZhbHVlKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIGZsZXg9XCIxXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7b3B0aW9uLmxhYmVsfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApKX1cbiAgICAgIDwvR3JvdXA+XG4gICAgKVxuICB9KVxuKVxuXG5TZWdtZW50ZWRDb250cm9sLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENvbXBvc2VzIHNvbWUgQm94IEFQSXMuXG4gICAqL1xuICAuLi5zcGFjaW5nLnByb3BUeXBlcyxcbiAgLi4ucG9zaXRpb24ucHJvcFR5cGVzLFxuICAuLi5sYXlvdXQucHJvcFR5cGVzLFxuICAuLi5kaW1lbnNpb25zLnByb3BUeXBlcyxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbnMgZm9yIHRoZSByYWRpb3Mgb2YgdGhlIFNlZ21lbnRlZCBDb250cm9sLlxuICAgKi9cbiAgb3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGxhYmVsOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICAgICAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSkuaXNSZXF1aXJlZFxuICAgIH0pXG4gICkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIFNlZ21lbnRlZCBDb250cm9sIHdoZW4gY29udHJvbGxlZC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgU2VnbWVudGVkIENvbnRyb2wgd2hlbiB1bmNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSksXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcmFkaW8gZ3JvdXAuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgU2VnbWVudGVkIENvbnRyb2wuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksXG5cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIFNlZ21lbnRlZCBDb250cm9sIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlZ21lbnRlZENvbnRyb2xcbiJdfQ==