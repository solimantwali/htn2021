"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = require("ui-box");

var _autocomplete = require("../../autocomplete");

var _buttons = require("../../buttons");

var _group = require("../../group");

var _icons = require("../../icons");

var _textInput = require("../../text-input");

var _excluded = ["autocompleteProps", "buttonProps", "height", "initialSelectedItem", "inputProps", "isLoading", "itemToString", "items", "onChange", "openOnFocus", "placeholder", "selectedItem", "size", "width"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Combobox = /*#__PURE__*/(0, _react.memo)(function Combobox(props) {
  var autocompleteProps = props.autocompleteProps,
      buttonProps = props.buttonProps,
      height = props.height,
      initialSelectedItem = props.initialSelectedItem,
      inputProps = props.inputProps,
      _props$isLoading = props.isLoading,
      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,
      itemToString = props.itemToString,
      items = props.items,
      onChange = props.onChange,
      _props$openOnFocus = props.openOnFocus,
      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,
      placeholder = props.placeholder,
      selectedItem = props.selectedItem,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$width = props.width,
      width = _props$width === void 0 ? 240 : _props$width,
      rest = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var disabled = props.disabled || isLoading;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isOpenedByButton = _useState2[0],
      setIsOpenedByButton = _useState2[1];

  var handleStateChange = (0, _react.useCallback)(function (changes, stateAndHelpers) {
    if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {
      if (!changes.isOpen) {
        setIsOpenedByButton(false);
      }
    }

    if (autocompleteProps && typeof autocompleteProps.onStateChange === 'function') {
      autocompleteProps.onStateChange(changes, stateAndHelpers);
    }
  }, [autocompleteProps]);
  return /*#__PURE__*/_react["default"].createElement(_autocomplete.Autocomplete, (0, _extends2["default"])({
    items: items,
    selectedItem: selectedItem,
    initialSelectedItem: initialSelectedItem,
    itemToString: itemToString,
    onChange: onChange,
    isFilterDisabled: isOpenedByButton
  }, autocompleteProps, {
    onStateChange: handleStateChange
  }), function (_ref) {
    var clearSelection = _ref.clearSelection,
        getInputProps = _ref.getInputProps,
        getRef = _ref.getRef,
        getToggleButtonProps = _ref.getToggleButtonProps,
        inputValue = _ref.inputValue,
        isShown = _ref.isShown,
        openMenu = _ref.openMenu;
    return /*#__PURE__*/_react["default"].createElement(_group.Group, (0, _extends2["default"])({
      ref: getRef,
      size: size,
      width: width
    }, rest), /*#__PURE__*/_react["default"].createElement(_textInput.TextInput, (0, _extends2["default"])({
      width: 0,
      flex: 1,
      height: height,
      value: inputValue,
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0,
      disabled: disabled
    }, getInputProps(_objectSpread(_objectSpread({}, inputProps), {}, {
      placeholder: placeholder,
      onFocus: function onFocus() {
        if (openOnFocus) openMenu();
      },
      onChange: function onChange(e) {
        if (isOpenedByButton) {
          setIsOpenedByButton(false);
        }

        if (e.target.value.trim() === '') {
          // Prevent the selected item from sticking around
          clearSelection();
        }
      }
    })))), /*#__PURE__*/_react["default"].createElement(_buttons.IconButton, (0, _extends2["default"])({
      color: "muted",
      icon: isLoading ? undefined : _icons.CaretDownIcon,
      appearance: "default",
      height: height,
      marginLeft: -1,
      paddingLeft: isLoading ? 12 : 0,
      paddingRight: 0,
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0,
      disabled: disabled,
      isLoading: isLoading
    }, getToggleButtonProps(_objectSpread(_objectSpread({}, buttonProps), {}, {
      onClick: function onClick() {
        if (!isShown) {
          setIsOpenedByButton(true);
        }
      }
    })))));
  });
});
Combobox.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _uiBox.dimensions.propTypes), _uiBox.spacing.propTypes), _uiBox.position.propTypes), _uiBox.layout.propTypes), {}, {
  /**
   * The options to show in the menu.
   */
  items: _propTypes["default"].array.isRequired,

  /**
   * The selected item when controlled.
   */
  selectedItem: _propTypes["default"].any,

  /**
   * Function called when value changes.
   */
  onChange: _propTypes["default"].func,

  /**
   * When true, open the autocomplete on focus.
   */
  openOnFocus: _propTypes["default"].bool,

  /**
   * Default selected item when uncontrolled.
   */
  initialSelectedItem: _propTypes["default"].any,

  /**
   * The placeholder text when there is no value present.
   */
  placeholder: _propTypes["default"].string,

  /**
   * In case the array of items is not an array of strings,
   * this function is used on each item to return the string that will be shown on the filter
   */
  itemToString: _propTypes["default"].func,

  /**
   * Properties forwarded to the input. Use with caution.
   */
  inputProps: _propTypes["default"].object,

  /**
   * Properties forwarded to the button. Use with caution.
   */
  buttonProps: _propTypes["default"].object,

  /**
   * Properties forwarded to the autocomplete component. Use with caution.
   */
  autocompleteProps: _propTypes["default"].object,

  /**
   * Makes the input element disabled.
   */
  disabled: _propTypes["default"].bool,

  /**
   * When true, show a loading spinner. This also disables the button.
   */
  isLoading: _propTypes["default"].bool,
  size: _propTypes["default"].oneOf(['small', 'medium', 'large'])
});
var _default = Combobox;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,