"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useClickable = useClickable;

var _react = require("react");

var _safeInvoke = _interopRequireDefault(require("../lib/safe-invoke"));

var _useLatest = require("./use-latest");

/**
 * React hook that returns bind props for a clickable component.
 * When the component has focus, Enter and space activate it
 */
function useClickable() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onKeyDownHandler = _ref.onKeyDown,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex;

  var onKeyDownRef = (0, _useLatest.useLatest)(onKeyDownHandler);
  var onKeyDown = (0, _react.useCallback)(function (event) {
    (0, _safeInvoke["default"])(onKeyDownRef.current, event);
    if (event.defaultPrevented) return;
    if (disabled) return;
    if (event.metaKey) return;
    if (event.target !== event.currentTarget) return;

    if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {
      // "Spacebar" for IE11 support
      // Prevent the default action to stop scrolling when space is pressed
      event.preventDefault();
      event.currentTarget.click();
    }
  }, // onKeyDownRef is a ref, but eslint can't figure that out
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [disabled]);
  return {
    // TODO import useFocusable as well (needs to be focusable)
    tabIndex: disabled ? -1 : tabIndex,
    onKeyDown: onKeyDown
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2UtY2xpY2thYmxlLmpzIl0sIm5hbWVzIjpbInVzZUNsaWNrYWJsZSIsImRpc2FibGVkIiwib25LZXlEb3duSGFuZGxlciIsIm9uS2V5RG93biIsInRhYkluZGV4Iiwib25LZXlEb3duUmVmIiwiZXZlbnQiLCJjdXJyZW50IiwiZGVmYXVsdFByZXZlbnRlZCIsIm1ldGFLZXkiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0Iiwia2V5IiwicHJldmVudERlZmF1bHQiLCJjbGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxZQUFULEdBQTRGO0FBQUEsaUZBQUosRUFBSTtBQUFBLDJCQUFwRUMsUUFBb0U7QUFBQSxNQUFwRUEsUUFBb0UsOEJBQXpELEtBQXlEO0FBQUEsTUFBdkNDLGdCQUF1QyxRQUFsREMsU0FBa0Q7QUFBQSwyQkFBckJDLFFBQXFCO0FBQUEsTUFBckJBLFFBQXFCLDhCQUFWLENBQVU7O0FBQ2pHLE1BQU1DLFlBQVksR0FBRywwQkFBVUgsZ0JBQVYsQ0FBckI7QUFFQSxNQUFNQyxTQUFTLEdBQUcsd0JBQ2hCLFVBQUFHLEtBQUssRUFBSTtBQUNQLGdDQUFXRCxZQUFZLENBQUNFLE9BQXhCLEVBQWlDRCxLQUFqQztBQUVBLFFBQUlBLEtBQUssQ0FBQ0UsZ0JBQVYsRUFBNEI7QUFDNUIsUUFBSVAsUUFBSixFQUFjO0FBQ2QsUUFBSUssS0FBSyxDQUFDRyxPQUFWLEVBQW1CO0FBQ25CLFFBQUlILEtBQUssQ0FBQ0ksTUFBTixLQUFpQkosS0FBSyxDQUFDSyxhQUEzQixFQUEwQzs7QUFFMUMsUUFBSUwsS0FBSyxDQUFDTSxHQUFOLEtBQWMsT0FBZCxJQUF5Qk4sS0FBSyxDQUFDTSxHQUFOLEtBQWMsR0FBdkMsSUFBOENOLEtBQUssQ0FBQ00sR0FBTixLQUFjLFVBQWhFLEVBQTRFO0FBQzFFO0FBQ0E7QUFDQU4sTUFBQUEsS0FBSyxDQUFDTyxjQUFOO0FBQ0FQLE1BQUFBLEtBQUssQ0FBQ0ssYUFBTixDQUFvQkcsS0FBcEI7QUFDRDtBQUNGLEdBZmUsRUFnQmhCO0FBQ0E7QUFDQSxHQUFDYixRQUFELENBbEJnQixDQUFsQjtBQXFCQSxTQUFPO0FBQ0w7QUFDQUcsSUFBQUEsUUFBUSxFQUFFSCxRQUFRLEdBQUcsQ0FBQyxDQUFKLEdBQVFHLFFBRnJCO0FBR0xELElBQUFBLFNBQVMsRUFBVEE7QUFISyxHQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHNhZmVJbnZva2UgZnJvbSAnLi4vbGliL3NhZmUtaW52b2tlJ1xuaW1wb3J0IHsgdXNlTGF0ZXN0IH0gZnJvbSAnLi91c2UtbGF0ZXN0J1xuXG4vKipcbiAqIFJlYWN0IGhvb2sgdGhhdCByZXR1cm5zIGJpbmQgcHJvcHMgZm9yIGEgY2xpY2thYmxlIGNvbXBvbmVudC5cbiAqIFdoZW4gdGhlIGNvbXBvbmVudCBoYXMgZm9jdXMsIEVudGVyIGFuZCBzcGFjZSBhY3RpdmF0ZSBpdFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2xpY2thYmxlKHsgZGlzYWJsZWQgPSBmYWxzZSwgb25LZXlEb3duOiBvbktleURvd25IYW5kbGVyLCB0YWJJbmRleCA9IDAgfSA9IHt9KSB7XG4gIGNvbnN0IG9uS2V5RG93blJlZiA9IHVzZUxhdGVzdChvbktleURvd25IYW5kbGVyKVxuXG4gIGNvbnN0IG9uS2V5RG93biA9IHVzZUNhbGxiYWNrKFxuICAgIGV2ZW50ID0+IHtcbiAgICAgIHNhZmVJbnZva2Uob25LZXlEb3duUmVmLmN1cnJlbnQsIGV2ZW50KVxuXG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuXG4gICAgICBpZiAoZGlzYWJsZWQpIHJldHVyblxuICAgICAgaWYgKGV2ZW50Lm1ldGFLZXkpIHJldHVyblxuICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkgcmV0dXJuXG5cbiAgICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicgfHwgZXZlbnQua2V5ID09PSAnICcgfHwgZXZlbnQua2V5ID09PSAnU3BhY2ViYXInKSB7XG4gICAgICAgIC8vIFwiU3BhY2ViYXJcIiBmb3IgSUUxMSBzdXBwb3J0XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIHRvIHN0b3Agc2Nyb2xsaW5nIHdoZW4gc3BhY2UgaXMgcHJlc3NlZFxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xpY2soKVxuICAgICAgfVxuICAgIH0sXG4gICAgLy8gb25LZXlEb3duUmVmIGlzIGEgcmVmLCBidXQgZXNsaW50IGNhbid0IGZpZ3VyZSB0aGF0IG91dFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICBbZGlzYWJsZWRdXG4gIClcblxuICByZXR1cm4ge1xuICAgIC8vIFRPRE8gaW1wb3J0IHVzZUZvY3VzYWJsZSBhcyB3ZWxsIChuZWVkcyB0byBiZSBmb2N1c2FibGUpXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleCxcbiAgICBvbktleURvd25cbiAgfVxufVxuIl19