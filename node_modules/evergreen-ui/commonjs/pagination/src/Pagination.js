"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.usePaginationBehavior = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _buttons = require("../../buttons");

var _icons = require("../../icons");

var _layers = require("../../layers");

var _scales = require("../../scales");

var _theme = require("../../theme");

var _typography = require("../../typography");

var _excluded = ["isSelected", "onPageChange", "page"],
    _excluded2 = ["onNextPage", "onPageChange", "onPreviousPage", "page", "totalPages"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var usePaginationBehavior = function usePaginationBehavior() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$page = _ref.page,
      inputPage = _ref$page === void 0 ? 1 : _ref$page;

  var _useState = (0, _react.useState)(inputPage),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      page = _useState2[0],
      setPage = _useState2[1];

  var onNextPage = (0, _react.useCallback)(function () {
    setPage(function (page) {
      return page + 1;
    });
  }, []);
  var onPreviousPage = (0, _react.useCallback)(function () {
    setPage(function (page) {
      return page - 1;
    });
  }, []);
  var onPageChange = (0, _react.useCallback)(function (index) {
    setPage(index);
  }, []);
  return {
    page: page,
    onNextPage: onNextPage,
    onPageChange: onPageChange,
    onPreviousPage: onPreviousPage
  };
};

exports.usePaginationBehavior = usePaginationBehavior;
var MAX_HANDLES_TO_SHOW = 7;
/* eslint-disable react/prop-types */

var PaginationButton = function PaginationButton(_ref2) {
  var isSelected = _ref2.isSelected,
      onPageChange = _ref2.onPageChange,
      page = _ref2.page,
      rest = (0, _objectWithoutProperties2["default"])(_ref2, _excluded);

  var _useTheme = (0, _theme.useTheme)(),
      colors = _useTheme.colors;

  var isEllipsis = typeof page === 'string' && page === '...';
  var selectedProps = (0, _react.useMemo)(function () {
    if (isSelected) {
      return {
        backgroundColor: colors.blue50,
        color: colors.blue400
      };
    } else {
      return {};
    }
  }, [isSelected, colors]);
  var onClick = (0, _react.useCallback)(function () {
    onPageChange(page);
  }, [page, onPageChange]);

  if (isEllipsis) {
    return /*#__PURE__*/_react["default"].createElement(_typography.Text, {
      paddingX: (0, _scales.majorScale)(1),
      paddingY: (0, _scales.majorScale)(1),
      minWidth: (0, _scales.majorScale)(4),
      textAlign: "center",
      "aria-label": "Pagination overflow"
    }, page);
  }

  return /*#__PURE__*/_react["default"].createElement(_buttons.Button, (0, _extends2["default"])({
    "aria-current": isSelected,
    "aria-label": "Page ".concat(page),
    onClick: onClick,
    minWidth: (0, _scales.majorScale)(4),
    paddingX: (0, _scales.majorScale)(1)
  }, rest, selectedProps));
};

PaginationButton.displayName = "PaginationButton";

/* eslint-enable react/prop-types */
var range = function range(start, stop) {
  var output = [];

  for (var i = start; i <= stop; i++) {
    output.push(i);
  }

  return output;
};

var getPaginationButtonContent = function getPaginationButtonContent(_ref3) {
  var page = _ref3.page,
      totalPages = _ref3.totalPages;

  if (totalPages <= MAX_HANDLES_TO_SHOW) {
    return range(1, totalPages);
  }

  if (totalPages > MAX_HANDLES_TO_SHOW && page <= 4) {
    return [].concat((0, _toConsumableArray2["default"])(range(1, 5)), ['...', totalPages]);
  }

  if (totalPages - page < 4) {
    return [1, '...'].concat((0, _toConsumableArray2["default"])(range(totalPages - 4, totalPages)));
  }

  return [1, '...'].concat((0, _toConsumableArray2["default"])(range(page - 1, page + 1)), ['...', totalPages]);
};

var noop = function noop() {};

var Pagination = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Pagination(_ref4, ref) {
  var _ref4$onNextPage = _ref4.onNextPage,
      onNextPage = _ref4$onNextPage === void 0 ? noop : _ref4$onNextPage,
      _ref4$onPageChange = _ref4.onPageChange,
      onPageChange = _ref4$onPageChange === void 0 ? noop : _ref4$onPageChange,
      _ref4$onPreviousPage = _ref4.onPreviousPage,
      onPreviousPage = _ref4$onPreviousPage === void 0 ? noop : _ref4$onPreviousPage,
      _ref4$page = _ref4.page,
      page = _ref4$page === void 0 ? 1 : _ref4$page,
      totalPages = _ref4.totalPages,
      rest = (0, _objectWithoutProperties2["default"])(_ref4, _excluded2);
  return /*#__PURE__*/_react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
    is: "nav",
    role: "navigation",
    "aria-label": "Pagination"
  }, rest, {
    ref: ref
  }), /*#__PURE__*/_react["default"].createElement(_layers.Pane, {
    is: "ul",
    display: "flex",
    alignItems: "center",
    padding: 0
  }, /*#__PURE__*/_react["default"].createElement(_layers.Pane, {
    is: "li",
    listStyle: "none"
  }, /*#__PURE__*/_react["default"].createElement(_buttons.IconButton, {
    appearance: "minimal",
    icon: _icons.ChevronLeftIcon,
    disabled: page === 1,
    onClick: onPreviousPage
  })), totalPages ? getPaginationButtonContent({
    totalPages: totalPages,
    page: page
  }).map(function (val, i) {
    var isSelected = val === page;
    return /*#__PURE__*/_react["default"].createElement(_layers.Pane, {
      is: "li",
      listStyle: "none",
      key: "".concat(val, "-").concat(i)
    }, /*#__PURE__*/_react["default"].createElement(PaginationButton, {
      appearance: "minimal",
      isSelected: isSelected,
      page: val,
      onPageChange: onPageChange,
      marginX: (0, _scales.minorScale)(1) / 2
    }, val));
  }) : null, /*#__PURE__*/_react["default"].createElement(_layers.Pane, {
    is: "li",
    listStyle: "none"
  }, /*#__PURE__*/_react["default"].createElement(_buttons.IconButton, {
    appearance: "minimal",
    icon: _icons.ChevronRightIcon,
    disabled: totalPages ? page === totalPages : undefined,
    onClick: onNextPage
  }))));
}));
Pagination.propTypes = {
  /**
   * The current page that a user is on - defaults to 1.
   */
  page: _propTypes["default"].number.isRequired,

  /**
   * The total number of pages to render. If ommitted, the page numbers will not be shown to the end user.
   */
  totalPages: _propTypes["default"].number,

  /**
   * Callback handler when the next page button is clicked.
   */
  onNextPage: _propTypes["default"].func,

  /**
   * Callback handler when the previous page button is clicked.
   */
  onPreviousPage: _propTypes["default"].func,

  /**
   * Callback handler when a specific page # is clicked
   */
  onPageChange: _propTypes["default"].func
};
var _default = Pagination;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,