"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("../../constants");

var _layers = require("../../layers");

var _overlay = require("../../overlay");

var _SheetClose = _interopRequireDefault(require("./SheetClose"));

var _paneProps, _subpaneProps, _animationStylesClass;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var paneProps = (_paneProps = {}, (0, _defineProperty2["default"])(_paneProps, _constants.Position.LEFT, {
  height: '100vh',
  maxWidth: '100vw',
  position: 'absolute',
  left: 0,
  right: 'auto'
}), (0, _defineProperty2["default"])(_paneProps, _constants.Position.RIGHT, {
  height: '100vh',
  maxWidth: '100vw',
  position: 'absolute',
  right: 0,
  left: 'auto'
}), (0, _defineProperty2["default"])(_paneProps, _constants.Position.TOP, {
  width: '100vw',
  position: 'absolute',
  maxHeight: '100vh',
  top: 0,
  bottom: 'auto'
}), (0, _defineProperty2["default"])(_paneProps, _constants.Position.BOTTOM, {
  width: '100vw',
  maxHeight: '100vh',
  position: 'absolute',
  bottom: 0,
  top: 'auto'
}), _paneProps);
var subpaneProps = (_subpaneProps = {}, (0, _defineProperty2["default"])(_subpaneProps, _constants.Position.LEFT, {
  height: '100vh'
}), (0, _defineProperty2["default"])(_subpaneProps, _constants.Position.RIGHT, {
  height: '100vh'
}), (0, _defineProperty2["default"])(_subpaneProps, _constants.Position.TOP, {
  width: '100vw'
}), (0, _defineProperty2["default"])(_subpaneProps, _constants.Position.BOTTOM, {
  width: '100vw'
}), _subpaneProps);
var animationEasing = {
  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)'
};
var ANIMATION_DURATION = 240;

var withAnimations = function withAnimations(animateIn, animateOut) {
  return {
    '&[data-state="entering"], &[data-state="entered"]': {
      animation: "".concat(animateIn, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.deceleration, " both")
    },
    '&[data-state="exiting"]': {
      animation: "".concat(animateOut, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.acceleration, " both")
    }
  };
};

var animationStylesClass = (_animationStylesClass = {}, (0, _defineProperty2["default"])(_animationStylesClass, _constants.Position.LEFT, _objectSpread({
  transform: 'translateX(-100%)'
}, withAnimations(_glamor.css.keyframes('anchoredLeftSlideInAnimation', {
  from: {
    transform: 'translateX(-100%)'
  },
  to: {
    transform: 'translateX(0)'
  }
}), _glamor.css.keyframes('anchoredLeftSlideOutAnimation', {
  from: {
    transform: 'translateX(0)'
  },
  to: {
    transform: 'translateX(-100%)'
  }
})))), (0, _defineProperty2["default"])(_animationStylesClass, _constants.Position.RIGHT, _objectSpread({
  transform: 'translateX(100%)'
}, withAnimations(_glamor.css.keyframes('anchoredRightSlideInAnimation', {
  from: {
    transform: 'translateX(100%)'
  },
  to: {
    transform: 'translateX(0)'
  }
}), _glamor.css.keyframes('anchoredRightSlideOutAnimation', {
  from: {
    transform: 'translateX(0)'
  },
  to: {
    transform: 'translateX(100%)'
  }
})))), (0, _defineProperty2["default"])(_animationStylesClass, _constants.Position.TOP, _objectSpread({
  transform: 'translateY(-100%)'
}, withAnimations(_glamor.css.keyframes('anchoredTopSlideInAnimation', {
  from: {
    transform: 'translateY(-100%)'
  },
  to: {
    transform: 'translateY(0)'
  }
}), _glamor.css.keyframes('anchoredTopSlideOutAnimation', {
  from: {
    transform: 'translateY(0)'
  },
  to: {
    transform: 'translateY(-100%)'
  }
})))), (0, _defineProperty2["default"])(_animationStylesClass, _constants.Position.BOTTOM, _objectSpread({
  transform: 'translateY(100%)'
}, withAnimations(_glamor.css.keyframes('anchoredBottomSlideInAnimation', {
  from: {
    transform: 'translateY(100%)'
  },
  to: {
    transform: 'translateY(0)'
  }
}), _glamor.css.keyframes('anchoredBottomSlideOutAnimation', {
  from: {
    transform: 'translateY(0)'
  },
  to: {
    transform: 'translateY(100%)'
  }
})))), _animationStylesClass);

var noop = function noop() {};

var SideSheet = /*#__PURE__*/(0, _react.memo)(function SideSheet(props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? 620 : _props$width,
      isShown = props.isShown,
      children = props.children,
      containerProps = props.containerProps,
      _props$onOpenComplete = props.onOpenComplete,
      onOpenComplete = _props$onOpenComplete === void 0 ? noop : _props$onOpenComplete,
      _props$onCloseComplet = props.onCloseComplete,
      onCloseComplete = _props$onCloseComplet === void 0 ? noop : _props$onCloseComplet,
      onBeforeClose = props.onBeforeClose,
      _props$shouldCloseOnO = props.shouldCloseOnOverlayClick,
      shouldCloseOnOverlayClick = _props$shouldCloseOnO === void 0 ? true : _props$shouldCloseOnO,
      _props$shouldCloseOnE = props.shouldCloseOnEscapePress,
      shouldCloseOnEscapePress = _props$shouldCloseOnE === void 0 ? true : _props$shouldCloseOnE,
      _props$position = props.position,
      position = _props$position === void 0 ? _constants.Position.RIGHT : _props$position,
      preventBodyScrolling = props.preventBodyScrolling;
  return /*#__PURE__*/_react["default"].createElement(_overlay.Overlay, {
    isShown: isShown,
    shouldCloseOnClick: shouldCloseOnOverlayClick,
    shouldCloseOnEscapePress: shouldCloseOnEscapePress,
    onBeforeClose: onBeforeClose,
    onExited: onCloseComplete,
    onEntered: onOpenComplete,
    preventBodyScrolling: preventBodyScrolling
  }, function (_ref) {
    var close = _ref.close,
        state = _ref.state;
    return /*#__PURE__*/_react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
      width: width
    }, paneProps[position], {
      className: (0, _glamor.css)(animationStylesClass[position]).toString(),
      "data-state": state
    }), /*#__PURE__*/_react["default"].createElement(_SheetClose["default"], {
      position: position,
      "data-state": state,
      isClosing: false,
      onClick: close
    }), /*#__PURE__*/_react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
      elevation: 4,
      backgroundColor: "white",
      overflowY: "auto",
      maxHeight: "100vh",
      "data-state": state,
      width: width
    }, subpaneProps[position], containerProps), typeof children === 'function' ? children({
      close: close
    }) : children));
  });
});
SideSheet.propTypes = {
  /**
   * Children can be a string, node or a function accepting `({ close })`.
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]).isRequired,

  /**
   * When true, the Side Sheet is shown.
   */
  isShown: _propTypes["default"].bool,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: _propTypes["default"].func,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: _propTypes["default"].func,

  /**
   * Function called when overlay is about to close.
   * Return `false` to prevent the sheet from closing.
   * type: `Function -> Boolean`
   */
  onBeforeClose: _propTypes["default"].func,

  /**
   * Boolean indicating if clicking the overlay should close the overlay.
   */
  shouldCloseOnOverlayClick: _propTypes["default"].bool,

  /**
   * Boolean indicating if pressing the esc key should close the overlay.
   */
  shouldCloseOnEscapePress: _propTypes["default"].bool,

  /**
   * Width of the SideSheet.
   */
  width: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /**
   * Properties to pass through the SideSheet container Pane.
   */
  containerProps: _propTypes["default"].object,

  /**
   * Positions the sheet to the top, left, right, or bottom of the screen.
   */
  position: _propTypes["default"].oneOf([_constants.Position.TOP, _constants.Position.BOTTOM, _constants.Position.LEFT, _constants.Position.RIGHT]),

  /**
   * Whether or not to prevent scrolling in the outer body
   */
  preventBodyScrolling: _propTypes["default"].bool
};
var _default = SideSheet;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,