"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactTransitionGroup = require("react-transition-group");

var _uiBox = _interopRequireDefault(require("ui-box"));

var _constants = require("../../constants");

var _preventBodyScroll = _interopRequireDefault(require("../../lib/prevent-body-scroll"));

var _safeInvoke = _interopRequireDefault(require("../../lib/safe-invoke"));

var _portal = require("../../portal");

var _stack = require("../../stack");

var _theme = require("../../theme");

var _excluded = ["children", "containerProps", "preventBodyScrolling", "shouldCloseOnClick", "shouldCloseOnEscapePress", "onBeforeClose", "onExit", "onExiting", "onExited", "onEnter", "onEntering", "onEntered", "isShown"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var noop = function noop() {};

var emptyProps = {};
var animationEasing = {
  standard: 'cubic-bezier(0.4, 0.0, 0.2, 1)',
  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)',
  sharp: 'cubic-bezier(0.4, 0.0, 0.6, 1)',
  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'
};
var ANIMATION_DURATION = 240;

var fadeInAnimation = _glamor.css.keyframes('fadeInAnimation', {
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});

var fadeOutAnimation = _glamor.css.keyframes('fadeOutAnimation', {
  from: {
    opacity: 1
  },
  to: {
    opacity: 0
  }
});

var animationStyles = function animationStyles(backgroundColor) {
  return {
    '&::before': {
      backgroundColor: backgroundColor,
      left: 0,
      top: 0,
      position: 'fixed',
      display: 'block',
      width: '100%',
      height: '100%',
      content: '" "'
    },
    '&[data-state="entering"]::before, &[data-state="entered"]::before': {
      animation: "".concat(fadeInAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.deceleration, " both")
    },
    '&[data-state="exiting"]::before, &[data-state="exited"]::before': {
      animation: "".concat(fadeOutAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.acceleration, " both")
    }
  };
};
/**
 * Overlay is essentially a wrapper around react-transition-group/Transition
 */


var Overlay = /*#__PURE__*/(0, _react.memo)(function Overlay(_ref) {
  var children = _ref.children,
      _ref$containerProps = _ref.containerProps,
      containerProps = _ref$containerProps === void 0 ? emptyProps : _ref$containerProps,
      _ref$preventBodyScrol = _ref.preventBodyScrolling,
      preventBodyScrolling = _ref$preventBodyScrol === void 0 ? false : _ref$preventBodyScrol,
      _ref$shouldCloseOnCli = _ref.shouldCloseOnClick,
      shouldCloseOnClick = _ref$shouldCloseOnCli === void 0 ? true : _ref$shouldCloseOnCli,
      _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscapePress,
      shouldCloseOnEscapePress = _ref$shouldCloseOnEsc === void 0 ? true : _ref$shouldCloseOnEsc,
      onBeforeClose = _ref.onBeforeClose,
      _ref$onExit = _ref.onExit,
      onExit = _ref$onExit === void 0 ? noop : _ref$onExit,
      _ref$onExiting = _ref.onExiting,
      onExiting = _ref$onExiting === void 0 ? noop : _ref$onExiting,
      _ref$onExited = _ref.onExited,
      onExited = _ref$onExited === void 0 ? noop : _ref$onExited,
      _ref$onEnter = _ref.onEnter,
      onEnter = _ref$onEnter === void 0 ? noop : _ref$onEnter,
      _ref$onEntering = _ref.onEntering,
      onEntering = _ref$onEntering === void 0 ? noop : _ref$onEntering,
      _ref$onEntered = _ref.onEntered,
      onEntered = _ref$onEntered === void 0 ? noop : _ref$onEntered,
      isShown = _ref.isShown,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  var theme = (0, _theme.useTheme)();
  var colors = theme.colors;

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      previousActiveElement = _useState2[0],
      setPreviousActiveElement = _useState2[1];

  var _useState3 = (0, _react.useState)(isShown ? 'entering' : 'exited'),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      status = _useState4[0],
      setStatus = _useState4[1];

  var containerRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (isShown) {
      setStatus('entering');
    }
  }, [isShown]);

  var close = function close() {
    var shouldClose = (0, _safeInvoke["default"])(onBeforeClose);

    if (shouldClose !== false) {
      setStatus('exiting');
    }
  };

  var onEsc = function onEsc(event) {
    if (event.key === 'Escape' && shouldCloseOnEscapePress) {
      close();
    }
  };

  (0, _react.useEffect)(function () {
    if (status === 'entered') {
      setPreviousActiveElement(document.activeElement);
      bringFocusInsideOverlay();
    }

    if (status === 'entering') {
      document.body.addEventListener('keydown', onEsc, false);
    }

    if (status === 'exiting') {
      document.body.removeEventListener('keydown', onEsc, false);
      bringFocusBackToTarget();
    } // These missing deps *should* be okay (adding them would require other changes)
    // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [status]); // ComponentWillUnmount

  (0, _react.useEffect)(function () {
    return function () {
      handleBodyScroll(false);
      document.body.removeEventListener('keydown', onEsc, false);
    };
  }, // These missing deps *should* be okay (adding them would require other changes)
  // eslint-disable-next-line react-hooks/exhaustive-deps
  []);
  /**
   * Methods borrowed from BlueprintJS
   * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx
   */

  var bringFocusInsideOverlay = function bringFocusInsideOverlay() {
    // Always delay focus manipulation to just before repaint to prevent scroll jumping
    return requestAnimationFrame(function () {
      // Container ref may be undefined between component mounting and Portal rendering
      // activeElement may be undefined in some rare cases in IE
      if (containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null
      document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null
      !isShown) {
        return;
      }

      var isFocusOutsideModal = !containerRef.current.contains(document.activeElement);

      if (isFocusOutsideModal) {
        // Element marked autofocus has higher priority than the other clowns
        var autofocusElement = containerRef.current.querySelector('[autofocus]');
        var wrapperElement = containerRef.current.querySelector('[tabindex]');
        var buttonElement = containerRef.current.querySelector('button');

        if (autofocusElement) {
          autofocusElement.focus();
        } else if (wrapperElement) {
          wrapperElement.focus();
        } else if (buttonElement) {
          buttonElement.focus();
        }
      }
    });
  };

  var bringFocusBackToTarget = function bringFocusBackToTarget() {
    return requestAnimationFrame(function () {
      if (previousActiveElement == null || // eslint-disable-line eqeqeq, no-eq-null
      containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null
      document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null
      ) {
        return;
      } // Bring back focus on the target.


      var isFocusInsideModal = containerRef.current.contains(document.activeElement);

      if (document.activeElement === document.body || isFocusInsideModal) {
        previousActiveElement.focus();
      }
    });
  };

  var handleBodyScroll = function handleBodyScroll(preventScroll) {
    if (preventBodyScrolling) {
      (0, _preventBodyScroll["default"])(preventScroll);
    }
  };

  var handleEnter = function handleEnter(node, isAppearing) {
    handleBodyScroll(true);
    (0, _safeInvoke["default"])(onEnter, node, isAppearing);
  };

  var handleEntering = function handleEntering(node, isAppearing) {
    setStatus('entering');
    (0, _safeInvoke["default"])(onEntering, node, isAppearing);
  };

  var handleEntered = function handleEntered(node, isAppearing) {
    setStatus('entered');
    (0, _safeInvoke["default"])(onEntered, node, isAppearing);
  };

  var handleExit = function handleExit(node) {
    handleBodyScroll(false);
    (0, _safeInvoke["default"])(onExit, node);
  };

  var handleExiting = function handleExiting(node) {
    setStatus('exiting');
    (0, _safeInvoke["default"])(onExiting, node);
  };

  var handleExited = function handleExited(node) {
    setStatus('exited');
    (0, _safeInvoke["default"])(onExited, node);
  };

  var handleBackdropClick = function handleBackdropClick(event) {
    if (event.target !== event.currentTarget || !shouldCloseOnClick) {
      return;
    }

    close();
  };

  if (status === 'exited') {
    return null;
  }

  return /*#__PURE__*/_react["default"].createElement(_stack.Stack, {
    value: _constants.StackingOrder.OVERLAY
  }, function (zIndex) {
    return /*#__PURE__*/_react["default"].createElement(_portal.Portal, null, /*#__PURE__*/_react["default"].createElement(_reactTransitionGroup.Transition, {
      nodeRef: containerRef,
      appear: true,
      unmountOnExit: true,
      timeout: ANIMATION_DURATION,
      "in": isShown && status !== 'exiting',
      onExit: handleExit,
      onExiting: handleExiting,
      onExited: handleExited,
      onEnter: handleEnter,
      onEntering: handleEntering,
      onEntered: handleEntered
    }, function (state) {
      return /*#__PURE__*/_react["default"].createElement(_uiBox["default"], (0, _extends2["default"])({
        onClick: handleBackdropClick,
        ref: containerRef,
        position: "fixed",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: zIndex,
        "data-state": state
      }, containerProps, {
        className: (0, _classnames["default"])(containerProps.className, (0, _glamor.css)(animationStyles(colors.overlay)).toString())
      }), typeof children === 'function' ? children({
        state: state,
        close: close
      }) : children);
    }));
  });
});
Overlay.propTypes = {
  /**
   * Children can be a node or a function accepting `close: func`
   * and `state: ENTERING | ENTERED | EXITING | EXITED`.
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]).isRequired,

  /**
   * Show the component; triggers the enter or exit states.
   */
  isShown: _propTypes["default"].bool,

  /**
   * Props to be passed through on the inner Box.
   */
  containerProps: _propTypes["default"].object,

  /**
   * Whether or not to prevent body scrolling outside the context of the overlay
   */
  preventBodyScrolling: _propTypes["default"].bool,

  /**
   * Boolean indicating if clicking the overlay should close the overlay.
   */
  shouldCloseOnClick: _propTypes["default"].bool,

  /**
   * Boolean indicating if pressing the esc key should close the overlay.
   */
  shouldCloseOnEscapePress: _propTypes["default"].bool,

  /**
   * Function called when overlay is about to close.
   * Return `false` to prevent the sheet from closing.
   * type: `Function -> Boolean`
   */
  onBeforeClose: _propTypes["default"].func,

  /**
   * Callback fired before the "exiting" status is applied.
   * type: `Function(node: HtmlElement) -> void`
   */
  onExit: _propTypes["default"].func,

  /**
   * Callback fired after the "exiting" status is applied.
   * type: `Function(node: HtmlElement) -> void`
   */
  onExiting: _propTypes["default"].func,

  /**
   * Callback fired after the "exited" status is applied.
   * type: `Function(exitState: Any?, node: HtmlElement) -> void`
   */
  onExited: _propTypes["default"].func,

  /**
   * Callback fired before the "entering" status is applied.
   * An extra parameter isAppearing is supplied to indicate if the enter stage
   * is occurring on the initial mount.
   *
   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`
   */
  onEnter: _propTypes["default"].func,

  /**
   * Callback fired after the "entering" status is applied.
   * An extra parameter isAppearing is supplied to indicate if the enter stage
   * is occurring on the initial mount.
   *
   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`
   */
  onEntering: _propTypes["default"].func,

  /**
   * Callback fired after the "entered" status is applied.
   * An extra parameter isAppearing is supplied to indicate if the enter stage
   * is occurring on the initial mount.
   *
   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`
   */
  onEntered: _propTypes["default"].func
};
var _default = Overlay;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,